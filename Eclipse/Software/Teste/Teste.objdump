
Teste.elf:     file format elf32-littlenios2
Teste.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0000571c memsz 0x0000571c flags r-x
    LOAD off    0x0000673c vaddr 0x0200573c paddr 0x02007208 align 2**12
         filesz 0x00001acc memsz 0x00001acc flags rw-
    LOAD off    0x00008cd4 vaddr 0x02008cd4 paddr 0x02008cd4 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005518  020001b4  020001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000070  020056cc  020056cc  000066cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001acc  0200573c  02007208  0000673c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  02008cd4  02008cd4  00008cd4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00008208  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008d8  00000000  00000000  00008230  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d1a  00000000  00000000  00008b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000195a2  00000000  00000000  00009822  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004df2  00000000  00000000  00022dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c4ff  00000000  00000000  00027bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000fcc  00000000  00000000  000340b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001743  00000000  00000000  00035084  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003e18  00000000  00000000  000367c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003a5e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003a5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003cc9d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003cca0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003cca3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003cca4  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003cca5  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003ccae  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003ccb7  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0003ccc0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002a  00000000  00000000  0003ccc6  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00078886  00000000  00000000  0003ccf0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001b4 l    d  .text	00000000 .text
020056cc l    d  .rodata	00000000 .rodata
0200573c l    d  .rwdata	00000000 .rwdata
02008cd4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
020001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0200573c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02001b5c l     F .text	00000058 std
02001c68 l     F .text	00000008 __fp_lock
02001c70 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
02002ca0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02002d00 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02002e04 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
02002f28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
02003008 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
02003168 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
02003398 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
020071f8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
02003650 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
020060ec l     O .rwdata	00001060 JTAG_UART
0200714c l     O .rwdata	00000030 AV_Config
0200717c l     O .rwdata	00000054 Pixel_Buffer_DMA
0200392c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02003b6c l     F .text	00000228 altera_avalon_jtag_uart_irq
02003d94 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02004634 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02004a44 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
02004b94 l     F .text	000000f8 alt_file_locked
02004e18 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
020054b4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
02005668 l     F .text	00000040 alt_sim_halt
02002a08 g     F .text	00000070 _isatty_r
020031c8 g     F .text	0000006c alt_main
02000224 g     F .text	000000a0 _puts_r
02008d24 g     O .bss	00000100 alt_irq
02002a78 g     F .text	00000078 _lseek_r
02007208 g       *ABS*	00000000 __flash_rwdata_start
02008fb4 g       *ABS*	00000000 __alt_heap_start
02002644 g     F .text	00000068 __sseek
02001bc4 g     F .text	000000a4 __sinit
02001cc4 g     F .text	0000009c __sfmoreglue
02003254 g     F .text	00000020 __malloc_unlock
020010ac g     F .text	000000e0 memmove
02001cb4 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
02000000 g     F .entry	0000000c __reset
02000020 g       *ABS*	00000000 __flash_exceptions_start
02002994 g     F .text	00000074 _fstat_r
02008ce0 g     O .bss	00000004 errno
02008ce8 g     O .bss	00000004 alt_argv
0200f1d0 g       *ABS*	00000000 _gp
02005f6c g     O .rwdata	00000180 alt_fd_list
0200503c g     F .text	00000094 alt_find_dev
0200100c g     F .text	000000a0 memcpy
02001ca8 g     F .text	0000000c _cleanup_r
02004b1c g     F .text	00000078 alt_io_redirect
020056cc g       *ABS*	00000000 __DTOR_END__
020002c4 g     F .text	00000014 puts
02003fac g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02002e64 g     F .text	000000c4 isatty
02008cd4 g     O .bss	00000004 __malloc_top_pad
0200034c g     F .text	0000049c __sfvwrite_r
02001780 g     F .text	00000070 _sbrk_r
02002af0 g     F .text	00000078 _read_r
020071f0 g     O .rwdata	00000004 alt_max_fd
02002870 g     F .text	00000110 _fclose_r
02001b28 g     F .text	00000034 fflush
02008cd8 g     O .bss	00000004 __malloc_max_sbrked_mem
02003074 g     F .text	000000f4 lseek
020071d4 g     O .rwdata	00000004 _global_impure_ptr
0200118c g     F .text	000005f4 _realloc_r
02008fb4 g       *ABS*	00000000 __bss_end
0200494c g     F .text	000000f8 alt_iic_isr_register
02004f10 g     F .text	0000010c alt_tick
02001c90 g     F .text	00000018 __fp_lock_all
02004904 g     F .text	00000048 alt_ic_irq_enabled
02004e78 g     F .text	00000098 alt_alarm_stop
02008cf0 g     O .bss	00000004 alt_irq_active
020000ec g     F .exceptions	000000c8 alt_irq_handler
02005f44 g     O .rwdata	00000028 alt_dev_null
02004564 g     F .text	0000001c alt_dcache_flush_all
02007208 g       *ABS*	00000000 __ram_rwdata_end
020071e8 g     O .rwdata	00000008 alt_dev_list
0200352c g     F .text	00000124 write
0200573c g       *ABS*	00000000 __ram_rodata_end
02002d2c g     F .text	000000d8 fstat
02000000 g       *ABS*	00000000 __alt_mem_SDRAM
02008fb4 g       *ABS*	00000000 end
02003aac g     F .text	000000c0 altera_avalon_jtag_uart_init
020056c8 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
020041d0 g     F .text	00000240 altera_avalon_jtag_uart_write
02001bb4 g     F .text	00000004 __sfp_lock_acquire
02000f28 g     F .text	000000e4 memchr
02001f7c g     F .text	00000314 _free_r
020054b8 g     F .text	000001b0 __call_exitprocs
020071dc g     O .rwdata	00000004 __malloc_sbrk_base
020001b4 g     F .text	0000003c _start
02008cf4 g     O .bss	00000004 _alt_tick_rate
02008cf8 g     O .bss	00000004 _alt_nticks
02003274 g     F .text	00000124 read
020036e4 g     F .text	00000248 alt_sys_init
02005380 g     F .text	00000134 __register_exitproc
02003e44 g     F .text	00000074 altera_avalon_jtag_uart_close
02002b68 g     F .text	00000038 __mulsi3
0200573c g       *ABS*	00000000 __ram_rwdata_start
020056cc g       *ABS*	00000000 __ram_rodata_start
02008cfc g     O .bss	00000028 __malloc_current_mallinfo
02003964 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
020051f0 g     F .text	000000d0 alt_get_fd
02002800 g     F .text	00000070 _close_r
0200530c g     F .text	00000074 memcmp
02003a14 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
02008fb4 g       *ABS*	00000000 __alt_stack_base
02003a5c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
020017f0 g     F .text	0000013c __swsetup_r
02001d60 g     F .text	000000f0 __sfp
02005b3c g     O .rwdata	00000408 __malloc_av_
02001bc0 g     F .text	00000004 __sinit_lock_release
02002728 g     F .text	00000060 __sread
020050d0 g     F .text	00000120 alt_find_file
02004580 g     F .text	000000b4 alt_dev_llist_insert
02003234 g     F .text	00000020 __malloc_lock
02003470 g     F .text	000000bc sbrk
0200192c g     F .text	000001fc _fflush_r
02008cd4 g       *ABS*	00000000 __bss_start
020025a4 g     F .text	00000098 memset
020001f0 g     F .text	00000034 main
02008cec g     O .bss	00000004 alt_envp
02008cdc g     O .bss	00000004 __malloc_max_total_mem
020039bc g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0200263c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
02002980 g     F .text	00000014 fclose
02008e24 g     O .bss	00000190 _atexit0
020007e8 g     F .text	00000740 _malloc_r
020071f4 g     O .rwdata	00000004 alt_errno
02002358 g     F .text	000000b8 _fwalk
02001e50 g     F .text	0000012c _malloc_trim_r
020056cc g       *ABS*	00000000 __CTOR_END__
020056cc g       *ABS*	00000000 __flash_rodata_start
020056cc g       *ABS*	00000000 __DTOR_LIST__
020036b0 g     F .text	00000034 alt_irq_init
020033f8 g     F .text	00000078 alt_release_fd
020052c0 g     F .text	00000014 atexit
02002788 g     F .text	00000078 _write_r
020071d0 g     O .rwdata	00000004 _impure_ptr
02008ce4 g     O .bss	00000004 alt_argc
020046f8 g     F .text	00000064 _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
02001c78 g     F .text	00000018 __fp_unlock_all
020071e0 g     O .rwdata	00000008 alt_fs_list
02000020 g       *ABS*	00000000 __ram_exceptions_start
02004778 g     F .text	00000050 alt_ic_isr_register
02007208 g       *ABS*	00000000 _edata
02008fb4 g       *ABS*	00000000 _end
020001b4 g       *ABS*	00000000 __ram_exceptions_end
02003eb8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
02004864 g     F .text	000000a0 alt_ic_irq_disable
04004000 g       *ABS*	00000000 __alt_mem_Onchip_Memory
020026ac g     F .text	0000007c __swrite
020071d8 g     O .rwdata	00000004 __malloc_trim_threshold
0200501c g     F .text	00000020 altera_nios2_qsys_irq_init
020052d4 g     F .text	00000038 exit
02002290 g     F .text	000000c8 _fwalk_reent
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02001bb8 g     F .text	00000004 __sfp_lock_release
020056a8 g     F .text	00000020 _exit
02004410 g     F .text	00000154 alt_alarm_start
02002410 g     F .text	00000194 __smakebuf_r
020002d8 g     F .text	00000074 strlen
02004c8c g     F .text	0000018c open
0200475c g     F .text	0000001c alt_icache_flush_all
020071fc g     O .rwdata	00000004 alt_priority_mask
020047c8 g     F .text	0000009c alt_ic_irq_enable
02007200 g     O .rwdata	00000008 alt_alarm_list
02004694 g     F .text	00000064 _do_ctors
02002ba0 g     F .text	00000100 close
02002f88 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
02001bbc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000004:	08406d14 	ori	at,at,436
    jmp r1
 2000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20000fc:	0005313a 	rdctl	r2,ipending
 2000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 200010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000110:	00800044 	movi	r2,1
 2000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2000118:	e0ffff17 	ldw	r3,-4(fp)
 200011c:	e0bffe17 	ldw	r2,-8(fp)
 2000120:	1884703a 	and	r2,r3,r2
 2000124:	1005003a 	cmpeq	r2,r2,zero
 2000128:	1000161e 	bne	r2,zero,2000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	e0bffd17 	ldw	r2,-12(fp)
 2000130:	00c08074 	movhi	r3,513
 2000134:	18e34904 	addi	r3,r3,-29404
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	10c5883a 	add	r2,r2,r3
 2000140:	11400017 	ldw	r5,0(r2)
 2000144:	e0bffd17 	ldw	r2,-12(fp)
 2000148:	00c08074 	movhi	r3,513
 200014c:	18e34904 	addi	r3,r3,-29404
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	10c5883a 	add	r2,r2,r3
 2000158:	10800104 	addi	r2,r2,4
 200015c:	11000017 	ldw	r4,0(r2)
 2000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000164:	0005313a 	rdctl	r2,ipending
 2000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 200016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000174:	e0bfff17 	ldw	r2,-4(fp)
 2000178:	1004c03a 	cmpne	r2,r2,zero
 200017c:	103fe31e 	bne	r2,zero,200010c <alt_irq_handler+0x20>
 2000180:	00000706 	br	20001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000184:	e0bffe17 	ldw	r2,-8(fp)
 2000188:	1085883a 	add	r2,r2,r2
 200018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000190:	e0bffd17 	ldw	r2,-12(fp)
 2000194:	10800044 	addi	r2,r2,1
 2000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 200019c:	003fde06 	br	2000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a0:	e037883a 	mov	sp,fp
 20001a4:	dfc00117 	ldw	ra,4(sp)
 20001a8:	df000017 	ldw	fp,0(sp)
 20001ac:	dec00204 	addi	sp,sp,8
 20001b0:	f800283a 	ret

Disassembly of section .text:

020001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001b4:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 20001bc:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
 20001c0:	d6bc7414 	ori	gp,gp,61904
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001c4:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 20001c8:	10a33514 	ori	r2,r2,36052

    movhi r3, %hi(__bss_end)
 20001cc:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 20001d0:	18e3ed14 	ori	r3,r3,36788

    beq r2, r3, 1f
 20001d4:	10c00326 	beq	r2,r3,20001e4 <_start+0x30>

0:
    stw zero, (r2)
 20001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001e0:	10fffd36 	bltu	r2,r3,20001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 20001e4:	2002f880 	call	2002f88 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001e8:	20031c80 	call	20031c8 <alt_main>

020001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001ec:	003fff06 	br	20001ec <alt_after_alt_main>

020001f0 <main>:
 */

#include <stdio.h>

int main()
{
 20001f0:	defffe04 	addi	sp,sp,-8
 20001f4:	dfc00115 	stw	ra,4(sp)
 20001f8:	df000015 	stw	fp,0(sp)
 20001fc:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 2000200:	01008034 	movhi	r4,512
 2000204:	2115b304 	addi	r4,r4,22220
 2000208:	20002c40 	call	20002c4 <puts>

  return 0;
 200020c:	0005883a 	mov	r2,zero
}
 2000210:	e037883a 	mov	sp,fp
 2000214:	dfc00117 	ldw	ra,4(sp)
 2000218:	df000017 	ldw	fp,0(sp)
 200021c:	dec00204 	addi	sp,sp,8
 2000220:	f800283a 	ret

02000224 <_puts_r>:
 2000224:	defff604 	addi	sp,sp,-40
 2000228:	dc400715 	stw	r17,28(sp)
 200022c:	2023883a 	mov	r17,r4
 2000230:	2809883a 	mov	r4,r5
 2000234:	dfc00915 	stw	ra,36(sp)
 2000238:	dcc00815 	stw	r19,32(sp)
 200023c:	2827883a 	mov	r19,r5
 2000240:	20002d80 	call	20002d8 <strlen>
 2000244:	89400217 	ldw	r5,8(r17)
 2000248:	00c08034 	movhi	r3,512
 200024c:	18d5b804 	addi	r3,r3,22240
 2000250:	01c00044 	movi	r7,1
 2000254:	12000044 	addi	r8,r2,1
 2000258:	d8c00515 	stw	r3,20(sp)
 200025c:	d9c00615 	stw	r7,24(sp)
 2000260:	d8c00304 	addi	r3,sp,12
 2000264:	01c00084 	movi	r7,2
 2000268:	8809883a 	mov	r4,r17
 200026c:	d80d883a 	mov	r6,sp
 2000270:	d8c00015 	stw	r3,0(sp)
 2000274:	dcc00315 	stw	r19,12(sp)
 2000278:	da000215 	stw	r8,8(sp)
 200027c:	d9c00115 	stw	r7,4(sp)
 2000280:	d8800415 	stw	r2,16(sp)
 2000284:	200034c0 	call	200034c <__sfvwrite_r>
 2000288:	00ffffc4 	movi	r3,-1
 200028c:	10000626 	beq	r2,zero,20002a8 <_puts_r+0x84>
 2000290:	1805883a 	mov	r2,r3
 2000294:	dfc00917 	ldw	ra,36(sp)
 2000298:	dcc00817 	ldw	r19,32(sp)
 200029c:	dc400717 	ldw	r17,28(sp)
 20002a0:	dec00a04 	addi	sp,sp,40
 20002a4:	f800283a 	ret
 20002a8:	00c00284 	movi	r3,10
 20002ac:	1805883a 	mov	r2,r3
 20002b0:	dfc00917 	ldw	ra,36(sp)
 20002b4:	dcc00817 	ldw	r19,32(sp)
 20002b8:	dc400717 	ldw	r17,28(sp)
 20002bc:	dec00a04 	addi	sp,sp,40
 20002c0:	f800283a 	ret

020002c4 <puts>:
 20002c4:	00808034 	movhi	r2,512
 20002c8:	109c7404 	addi	r2,r2,29136
 20002cc:	200b883a 	mov	r5,r4
 20002d0:	11000017 	ldw	r4,0(r2)
 20002d4:	20002241 	jmpi	2000224 <_puts_r>

020002d8 <strlen>:
 20002d8:	208000cc 	andi	r2,r4,3
 20002dc:	2011883a 	mov	r8,r4
 20002e0:	1000161e 	bne	r2,zero,200033c <strlen+0x64>
 20002e4:	20c00017 	ldw	r3,0(r4)
 20002e8:	017fbff4 	movhi	r5,65279
 20002ec:	297fbfc4 	addi	r5,r5,-257
 20002f0:	01e02074 	movhi	r7,32897
 20002f4:	39e02004 	addi	r7,r7,-32640
 20002f8:	1945883a 	add	r2,r3,r5
 20002fc:	11c4703a 	and	r2,r2,r7
 2000300:	00c6303a 	nor	r3,zero,r3
 2000304:	1886703a 	and	r3,r3,r2
 2000308:	18000c1e 	bne	r3,zero,200033c <strlen+0x64>
 200030c:	280d883a 	mov	r6,r5
 2000310:	380b883a 	mov	r5,r7
 2000314:	21000104 	addi	r4,r4,4
 2000318:	20800017 	ldw	r2,0(r4)
 200031c:	1187883a 	add	r3,r2,r6
 2000320:	1946703a 	and	r3,r3,r5
 2000324:	0084303a 	nor	r2,zero,r2
 2000328:	10c4703a 	and	r2,r2,r3
 200032c:	103ff926 	beq	r2,zero,2000314 <strlen+0x3c>
 2000330:	20800007 	ldb	r2,0(r4)
 2000334:	10000326 	beq	r2,zero,2000344 <strlen+0x6c>
 2000338:	21000044 	addi	r4,r4,1
 200033c:	20800007 	ldb	r2,0(r4)
 2000340:	103ffd1e 	bne	r2,zero,2000338 <strlen+0x60>
 2000344:	2205c83a 	sub	r2,r4,r8
 2000348:	f800283a 	ret

0200034c <__sfvwrite_r>:
 200034c:	30800217 	ldw	r2,8(r6)
 2000350:	defff504 	addi	sp,sp,-44
 2000354:	df000915 	stw	fp,36(sp)
 2000358:	dd800715 	stw	r22,28(sp)
 200035c:	dc800315 	stw	r18,12(sp)
 2000360:	dfc00a15 	stw	ra,40(sp)
 2000364:	ddc00815 	stw	r23,32(sp)
 2000368:	dd400615 	stw	r21,24(sp)
 200036c:	dd000515 	stw	r20,20(sp)
 2000370:	dcc00415 	stw	r19,16(sp)
 2000374:	dc400215 	stw	r17,8(sp)
 2000378:	dc000115 	stw	r16,4(sp)
 200037c:	302d883a 	mov	r22,r6
 2000380:	2039883a 	mov	fp,r4
 2000384:	2825883a 	mov	r18,r5
 2000388:	10001c26 	beq	r2,zero,20003fc <__sfvwrite_r+0xb0>
 200038c:	29c0030b 	ldhu	r7,12(r5)
 2000390:	3880020c 	andi	r2,r7,8
 2000394:	10002726 	beq	r2,zero,2000434 <__sfvwrite_r+0xe8>
 2000398:	28800417 	ldw	r2,16(r5)
 200039c:	10002526 	beq	r2,zero,2000434 <__sfvwrite_r+0xe8>
 20003a0:	3880008c 	andi	r2,r7,2
 20003a4:	b5400017 	ldw	r21,0(r22)
 20003a8:	10002826 	beq	r2,zero,200044c <__sfvwrite_r+0x100>
 20003ac:	0021883a 	mov	r16,zero
 20003b0:	0023883a 	mov	r17,zero
 20003b4:	880d883a 	mov	r6,r17
 20003b8:	e009883a 	mov	r4,fp
 20003bc:	00810004 	movi	r2,1024
 20003c0:	80006e26 	beq	r16,zero,200057c <__sfvwrite_r+0x230>
 20003c4:	800f883a 	mov	r7,r16
 20003c8:	91400717 	ldw	r5,28(r18)
 20003cc:	1400012e 	bgeu	r2,r16,20003d4 <__sfvwrite_r+0x88>
 20003d0:	100f883a 	mov	r7,r2
 20003d4:	90c00917 	ldw	r3,36(r18)
 20003d8:	183ee83a 	callr	r3
 20003dc:	1007883a 	mov	r3,r2
 20003e0:	80a1c83a 	sub	r16,r16,r2
 20003e4:	88a3883a 	add	r17,r17,r2
 20003e8:	00806d0e 	bge	zero,r2,20005a0 <__sfvwrite_r+0x254>
 20003ec:	b0800217 	ldw	r2,8(r22)
 20003f0:	10c5c83a 	sub	r2,r2,r3
 20003f4:	b0800215 	stw	r2,8(r22)
 20003f8:	103fee1e 	bne	r2,zero,20003b4 <__sfvwrite_r+0x68>
 20003fc:	0009883a 	mov	r4,zero
 2000400:	2005883a 	mov	r2,r4
 2000404:	dfc00a17 	ldw	ra,40(sp)
 2000408:	df000917 	ldw	fp,36(sp)
 200040c:	ddc00817 	ldw	r23,32(sp)
 2000410:	dd800717 	ldw	r22,28(sp)
 2000414:	dd400617 	ldw	r21,24(sp)
 2000418:	dd000517 	ldw	r20,20(sp)
 200041c:	dcc00417 	ldw	r19,16(sp)
 2000420:	dc800317 	ldw	r18,12(sp)
 2000424:	dc400217 	ldw	r17,8(sp)
 2000428:	dc000117 	ldw	r16,4(sp)
 200042c:	dec00b04 	addi	sp,sp,44
 2000430:	f800283a 	ret
 2000434:	20017f00 	call	20017f0 <__swsetup_r>
 2000438:	1000e41e 	bne	r2,zero,20007cc <__sfvwrite_r+0x480>
 200043c:	91c0030b 	ldhu	r7,12(r18)
 2000440:	b5400017 	ldw	r21,0(r22)
 2000444:	3880008c 	andi	r2,r7,2
 2000448:	103fd81e 	bne	r2,zero,20003ac <__sfvwrite_r+0x60>
 200044c:	3880004c 	andi	r2,r7,1
 2000450:	1005003a 	cmpeq	r2,r2,zero
 2000454:	10005726 	beq	r2,zero,20005b4 <__sfvwrite_r+0x268>
 2000458:	0029883a 	mov	r20,zero
 200045c:	002f883a 	mov	r23,zero
 2000460:	a0004226 	beq	r20,zero,200056c <__sfvwrite_r+0x220>
 2000464:	3880800c 	andi	r2,r7,512
 2000468:	94000217 	ldw	r16,8(r18)
 200046c:	10008b26 	beq	r2,zero,200069c <__sfvwrite_r+0x350>
 2000470:	800d883a 	mov	r6,r16
 2000474:	a400a536 	bltu	r20,r16,200070c <__sfvwrite_r+0x3c0>
 2000478:	3881200c 	andi	r2,r7,1152
 200047c:	10002726 	beq	r2,zero,200051c <__sfvwrite_r+0x1d0>
 2000480:	90800517 	ldw	r2,20(r18)
 2000484:	92000417 	ldw	r8,16(r18)
 2000488:	91400017 	ldw	r5,0(r18)
 200048c:	1087883a 	add	r3,r2,r2
 2000490:	1887883a 	add	r3,r3,r2
 2000494:	1808d7fa 	srli	r4,r3,31
 2000498:	2a21c83a 	sub	r16,r5,r8
 200049c:	80800044 	addi	r2,r16,1
 20004a0:	20c9883a 	add	r4,r4,r3
 20004a4:	2027d07a 	srai	r19,r4,1
 20004a8:	a085883a 	add	r2,r20,r2
 20004ac:	980d883a 	mov	r6,r19
 20004b0:	9880022e 	bgeu	r19,r2,20004bc <__sfvwrite_r+0x170>
 20004b4:	1027883a 	mov	r19,r2
 20004b8:	100d883a 	mov	r6,r2
 20004bc:	3881000c 	andi	r2,r7,1024
 20004c0:	1000b826 	beq	r2,zero,20007a4 <__sfvwrite_r+0x458>
 20004c4:	300b883a 	mov	r5,r6
 20004c8:	e009883a 	mov	r4,fp
 20004cc:	20007e80 	call	20007e8 <_malloc_r>
 20004d0:	10003126 	beq	r2,zero,2000598 <__sfvwrite_r+0x24c>
 20004d4:	91400417 	ldw	r5,16(r18)
 20004d8:	1009883a 	mov	r4,r2
 20004dc:	800d883a 	mov	r6,r16
 20004e0:	1023883a 	mov	r17,r2
 20004e4:	200100c0 	call	200100c <memcpy>
 20004e8:	90c0030b 	ldhu	r3,12(r18)
 20004ec:	00beffc4 	movi	r2,-1025
 20004f0:	1886703a 	and	r3,r3,r2
 20004f4:	18c02014 	ori	r3,r3,128
 20004f8:	90c0030d 	sth	r3,12(r18)
 20004fc:	9c07c83a 	sub	r3,r19,r16
 2000500:	8c05883a 	add	r2,r17,r16
 2000504:	a00d883a 	mov	r6,r20
 2000508:	a021883a 	mov	r16,r20
 200050c:	90800015 	stw	r2,0(r18)
 2000510:	90c00215 	stw	r3,8(r18)
 2000514:	94400415 	stw	r17,16(r18)
 2000518:	94c00515 	stw	r19,20(r18)
 200051c:	91000017 	ldw	r4,0(r18)
 2000520:	b80b883a 	mov	r5,r23
 2000524:	a023883a 	mov	r17,r20
 2000528:	20010ac0 	call	20010ac <memmove>
 200052c:	90c00217 	ldw	r3,8(r18)
 2000530:	90800017 	ldw	r2,0(r18)
 2000534:	a027883a 	mov	r19,r20
 2000538:	1c07c83a 	sub	r3,r3,r16
 200053c:	1405883a 	add	r2,r2,r16
 2000540:	90c00215 	stw	r3,8(r18)
 2000544:	a021883a 	mov	r16,r20
 2000548:	90800015 	stw	r2,0(r18)
 200054c:	b0800217 	ldw	r2,8(r22)
 2000550:	1405c83a 	sub	r2,r2,r16
 2000554:	b0800215 	stw	r2,8(r22)
 2000558:	103fa826 	beq	r2,zero,20003fc <__sfvwrite_r+0xb0>
 200055c:	a469c83a 	sub	r20,r20,r17
 2000560:	91c0030b 	ldhu	r7,12(r18)
 2000564:	bcef883a 	add	r23,r23,r19
 2000568:	a03fbe1e 	bne	r20,zero,2000464 <__sfvwrite_r+0x118>
 200056c:	adc00017 	ldw	r23,0(r21)
 2000570:	ad000117 	ldw	r20,4(r21)
 2000574:	ad400204 	addi	r21,r21,8
 2000578:	003fb906 	br	2000460 <__sfvwrite_r+0x114>
 200057c:	ac400017 	ldw	r17,0(r21)
 2000580:	ac000117 	ldw	r16,4(r21)
 2000584:	ad400204 	addi	r21,r21,8
 2000588:	003f8a06 	br	20003b4 <__sfvwrite_r+0x68>
 200058c:	91400417 	ldw	r5,16(r18)
 2000590:	e009883a 	mov	r4,fp
 2000594:	2001f7c0 	call	2001f7c <_free_r>
 2000598:	00800304 	movi	r2,12
 200059c:	e0800015 	stw	r2,0(fp)
 20005a0:	9080030b 	ldhu	r2,12(r18)
 20005a4:	013fffc4 	movi	r4,-1
 20005a8:	10801014 	ori	r2,r2,64
 20005ac:	9080030d 	sth	r2,12(r18)
 20005b0:	003f9306 	br	2000400 <__sfvwrite_r+0xb4>
 20005b4:	0027883a 	mov	r19,zero
 20005b8:	002f883a 	mov	r23,zero
 20005bc:	d8000015 	stw	zero,0(sp)
 20005c0:	0029883a 	mov	r20,zero
 20005c4:	98001e26 	beq	r19,zero,2000640 <__sfvwrite_r+0x2f4>
 20005c8:	d8c00017 	ldw	r3,0(sp)
 20005cc:	1804c03a 	cmpne	r2,r3,zero
 20005d0:	10005e26 	beq	r2,zero,200074c <__sfvwrite_r+0x400>
 20005d4:	9821883a 	mov	r16,r19
 20005d8:	a4c0012e 	bgeu	r20,r19,20005e0 <__sfvwrite_r+0x294>
 20005dc:	a021883a 	mov	r16,r20
 20005e0:	91000017 	ldw	r4,0(r18)
 20005e4:	90800417 	ldw	r2,16(r18)
 20005e8:	91800217 	ldw	r6,8(r18)
 20005ec:	91c00517 	ldw	r7,20(r18)
 20005f0:	1100022e 	bgeu	r2,r4,20005fc <__sfvwrite_r+0x2b0>
 20005f4:	31e3883a 	add	r17,r6,r7
 20005f8:	8c001616 	blt	r17,r16,2000654 <__sfvwrite_r+0x308>
 20005fc:	81c03816 	blt	r16,r7,20006e0 <__sfvwrite_r+0x394>
 2000600:	90c00917 	ldw	r3,36(r18)
 2000604:	91400717 	ldw	r5,28(r18)
 2000608:	e009883a 	mov	r4,fp
 200060c:	b80d883a 	mov	r6,r23
 2000610:	183ee83a 	callr	r3
 2000614:	1023883a 	mov	r17,r2
 2000618:	00bfe10e 	bge	zero,r2,20005a0 <__sfvwrite_r+0x254>
 200061c:	a469c83a 	sub	r20,r20,r17
 2000620:	a0001826 	beq	r20,zero,2000684 <__sfvwrite_r+0x338>
 2000624:	b0800217 	ldw	r2,8(r22)
 2000628:	1445c83a 	sub	r2,r2,r17
 200062c:	b0800215 	stw	r2,8(r22)
 2000630:	103f7226 	beq	r2,zero,20003fc <__sfvwrite_r+0xb0>
 2000634:	9c67c83a 	sub	r19,r19,r17
 2000638:	bc6f883a 	add	r23,r23,r17
 200063c:	983fe21e 	bne	r19,zero,20005c8 <__sfvwrite_r+0x27c>
 2000640:	adc00017 	ldw	r23,0(r21)
 2000644:	acc00117 	ldw	r19,4(r21)
 2000648:	ad400204 	addi	r21,r21,8
 200064c:	d8000015 	stw	zero,0(sp)
 2000650:	003fdc06 	br	20005c4 <__sfvwrite_r+0x278>
 2000654:	b80b883a 	mov	r5,r23
 2000658:	880d883a 	mov	r6,r17
 200065c:	20010ac0 	call	20010ac <memmove>
 2000660:	90c00017 	ldw	r3,0(r18)
 2000664:	e009883a 	mov	r4,fp
 2000668:	900b883a 	mov	r5,r18
 200066c:	1c47883a 	add	r3,r3,r17
 2000670:	90c00015 	stw	r3,0(r18)
 2000674:	200192c0 	call	200192c <_fflush_r>
 2000678:	103fc91e 	bne	r2,zero,20005a0 <__sfvwrite_r+0x254>
 200067c:	a469c83a 	sub	r20,r20,r17
 2000680:	a03fe81e 	bne	r20,zero,2000624 <__sfvwrite_r+0x2d8>
 2000684:	e009883a 	mov	r4,fp
 2000688:	900b883a 	mov	r5,r18
 200068c:	200192c0 	call	200192c <_fflush_r>
 2000690:	103fc31e 	bne	r2,zero,20005a0 <__sfvwrite_r+0x254>
 2000694:	d8000015 	stw	zero,0(sp)
 2000698:	003fe206 	br	2000624 <__sfvwrite_r+0x2d8>
 200069c:	91000017 	ldw	r4,0(r18)
 20006a0:	90800417 	ldw	r2,16(r18)
 20006a4:	1100022e 	bgeu	r2,r4,20006b0 <__sfvwrite_r+0x364>
 20006a8:	8023883a 	mov	r17,r16
 20006ac:	85003136 	bltu	r16,r20,2000774 <__sfvwrite_r+0x428>
 20006b0:	91c00517 	ldw	r7,20(r18)
 20006b4:	a1c01836 	bltu	r20,r7,2000718 <__sfvwrite_r+0x3cc>
 20006b8:	90c00917 	ldw	r3,36(r18)
 20006bc:	91400717 	ldw	r5,28(r18)
 20006c0:	e009883a 	mov	r4,fp
 20006c4:	b80d883a 	mov	r6,r23
 20006c8:	183ee83a 	callr	r3
 20006cc:	1021883a 	mov	r16,r2
 20006d0:	00bfb30e 	bge	zero,r2,20005a0 <__sfvwrite_r+0x254>
 20006d4:	1023883a 	mov	r17,r2
 20006d8:	1027883a 	mov	r19,r2
 20006dc:	003f9b06 	br	200054c <__sfvwrite_r+0x200>
 20006e0:	b80b883a 	mov	r5,r23
 20006e4:	800d883a 	mov	r6,r16
 20006e8:	20010ac0 	call	20010ac <memmove>
 20006ec:	90c00217 	ldw	r3,8(r18)
 20006f0:	90800017 	ldw	r2,0(r18)
 20006f4:	8023883a 	mov	r17,r16
 20006f8:	1c07c83a 	sub	r3,r3,r16
 20006fc:	1405883a 	add	r2,r2,r16
 2000700:	90c00215 	stw	r3,8(r18)
 2000704:	90800015 	stw	r2,0(r18)
 2000708:	003fc406 	br	200061c <__sfvwrite_r+0x2d0>
 200070c:	a00d883a 	mov	r6,r20
 2000710:	a021883a 	mov	r16,r20
 2000714:	003f8106 	br	200051c <__sfvwrite_r+0x1d0>
 2000718:	b80b883a 	mov	r5,r23
 200071c:	a00d883a 	mov	r6,r20
 2000720:	20010ac0 	call	20010ac <memmove>
 2000724:	90c00217 	ldw	r3,8(r18)
 2000728:	90800017 	ldw	r2,0(r18)
 200072c:	a021883a 	mov	r16,r20
 2000730:	1d07c83a 	sub	r3,r3,r20
 2000734:	1505883a 	add	r2,r2,r20
 2000738:	a023883a 	mov	r17,r20
 200073c:	a027883a 	mov	r19,r20
 2000740:	90c00215 	stw	r3,8(r18)
 2000744:	90800015 	stw	r2,0(r18)
 2000748:	003f8006 	br	200054c <__sfvwrite_r+0x200>
 200074c:	b809883a 	mov	r4,r23
 2000750:	01400284 	movi	r5,10
 2000754:	980d883a 	mov	r6,r19
 2000758:	2000f280 	call	2000f28 <memchr>
 200075c:	10001726 	beq	r2,zero,20007bc <__sfvwrite_r+0x470>
 2000760:	15c5c83a 	sub	r2,r2,r23
 2000764:	15000044 	addi	r20,r2,1
 2000768:	00800044 	movi	r2,1
 200076c:	d8800015 	stw	r2,0(sp)
 2000770:	003f9806 	br	20005d4 <__sfvwrite_r+0x288>
 2000774:	b80b883a 	mov	r5,r23
 2000778:	800d883a 	mov	r6,r16
 200077c:	20010ac0 	call	20010ac <memmove>
 2000780:	90c00017 	ldw	r3,0(r18)
 2000784:	e009883a 	mov	r4,fp
 2000788:	900b883a 	mov	r5,r18
 200078c:	1c07883a 	add	r3,r3,r16
 2000790:	90c00015 	stw	r3,0(r18)
 2000794:	8027883a 	mov	r19,r16
 2000798:	200192c0 	call	200192c <_fflush_r>
 200079c:	103f6b26 	beq	r2,zero,200054c <__sfvwrite_r+0x200>
 20007a0:	003f7f06 	br	20005a0 <__sfvwrite_r+0x254>
 20007a4:	400b883a 	mov	r5,r8
 20007a8:	e009883a 	mov	r4,fp
 20007ac:	200118c0 	call	200118c <_realloc_r>
 20007b0:	103f7626 	beq	r2,zero,200058c <__sfvwrite_r+0x240>
 20007b4:	1023883a 	mov	r17,r2
 20007b8:	003f5006 	br	20004fc <__sfvwrite_r+0x1b0>
 20007bc:	00c00044 	movi	r3,1
 20007c0:	9d000044 	addi	r20,r19,1
 20007c4:	d8c00015 	stw	r3,0(sp)
 20007c8:	003f8206 	br	20005d4 <__sfvwrite_r+0x288>
 20007cc:	9080030b 	ldhu	r2,12(r18)
 20007d0:	00c00244 	movi	r3,9
 20007d4:	013fffc4 	movi	r4,-1
 20007d8:	10801014 	ori	r2,r2,64
 20007dc:	9080030d 	sth	r2,12(r18)
 20007e0:	e0c00015 	stw	r3,0(fp)
 20007e4:	003f0606 	br	2000400 <__sfvwrite_r+0xb4>

020007e8 <_malloc_r>:
 20007e8:	defff604 	addi	sp,sp,-40
 20007ec:	28c002c4 	addi	r3,r5,11
 20007f0:	00800584 	movi	r2,22
 20007f4:	dc800215 	stw	r18,8(sp)
 20007f8:	dfc00915 	stw	ra,36(sp)
 20007fc:	df000815 	stw	fp,32(sp)
 2000800:	ddc00715 	stw	r23,28(sp)
 2000804:	dd800615 	stw	r22,24(sp)
 2000808:	dd400515 	stw	r21,20(sp)
 200080c:	dd000415 	stw	r20,16(sp)
 2000810:	dcc00315 	stw	r19,12(sp)
 2000814:	dc400115 	stw	r17,4(sp)
 2000818:	dc000015 	stw	r16,0(sp)
 200081c:	2025883a 	mov	r18,r4
 2000820:	10c01236 	bltu	r2,r3,200086c <_malloc_r+0x84>
 2000824:	04400404 	movi	r17,16
 2000828:	8940142e 	bgeu	r17,r5,200087c <_malloc_r+0x94>
 200082c:	00800304 	movi	r2,12
 2000830:	0007883a 	mov	r3,zero
 2000834:	90800015 	stw	r2,0(r18)
 2000838:	1805883a 	mov	r2,r3
 200083c:	dfc00917 	ldw	ra,36(sp)
 2000840:	df000817 	ldw	fp,32(sp)
 2000844:	ddc00717 	ldw	r23,28(sp)
 2000848:	dd800617 	ldw	r22,24(sp)
 200084c:	dd400517 	ldw	r21,20(sp)
 2000850:	dd000417 	ldw	r20,16(sp)
 2000854:	dcc00317 	ldw	r19,12(sp)
 2000858:	dc800217 	ldw	r18,8(sp)
 200085c:	dc400117 	ldw	r17,4(sp)
 2000860:	dc000017 	ldw	r16,0(sp)
 2000864:	dec00a04 	addi	sp,sp,40
 2000868:	f800283a 	ret
 200086c:	00bffe04 	movi	r2,-8
 2000870:	18a2703a 	and	r17,r3,r2
 2000874:	883fed16 	blt	r17,zero,200082c <_malloc_r+0x44>
 2000878:	897fec36 	bltu	r17,r5,200082c <_malloc_r+0x44>
 200087c:	9009883a 	mov	r4,r18
 2000880:	20032340 	call	2003234 <__malloc_lock>
 2000884:	00807dc4 	movi	r2,503
 2000888:	14402b2e 	bgeu	r2,r17,2000938 <_malloc_r+0x150>
 200088c:	8806d27a 	srli	r3,r17,9
 2000890:	18003f1e 	bne	r3,zero,2000990 <_malloc_r+0x1a8>
 2000894:	880cd0fa 	srli	r6,r17,3
 2000898:	300490fa 	slli	r2,r6,3
 200089c:	02c08034 	movhi	r11,512
 20008a0:	5ad6cf04 	addi	r11,r11,23356
 20008a4:	12cb883a 	add	r5,r2,r11
 20008a8:	2c000317 	ldw	r16,12(r5)
 20008ac:	580f883a 	mov	r7,r11
 20008b0:	2c00041e 	bne	r5,r16,20008c4 <_malloc_r+0xdc>
 20008b4:	00000a06 	br	20008e0 <_malloc_r+0xf8>
 20008b8:	1800860e 	bge	r3,zero,2000ad4 <_malloc_r+0x2ec>
 20008bc:	84000317 	ldw	r16,12(r16)
 20008c0:	2c000726 	beq	r5,r16,20008e0 <_malloc_r+0xf8>
 20008c4:	80800117 	ldw	r2,4(r16)
 20008c8:	00ffff04 	movi	r3,-4
 20008cc:	10c8703a 	and	r4,r2,r3
 20008d0:	2447c83a 	sub	r3,r4,r17
 20008d4:	008003c4 	movi	r2,15
 20008d8:	10fff70e 	bge	r2,r3,20008b8 <_malloc_r+0xd0>
 20008dc:	31bfffc4 	addi	r6,r6,-1
 20008e0:	32400044 	addi	r9,r6,1
 20008e4:	02808034 	movhi	r10,512
 20008e8:	5296d104 	addi	r10,r10,23364
 20008ec:	54000217 	ldw	r16,8(r10)
 20008f0:	8280a026 	beq	r16,r10,2000b74 <_malloc_r+0x38c>
 20008f4:	80800117 	ldw	r2,4(r16)
 20008f8:	00ffff04 	movi	r3,-4
 20008fc:	10ca703a 	and	r5,r2,r3
 2000900:	2c4dc83a 	sub	r6,r5,r17
 2000904:	008003c4 	movi	r2,15
 2000908:	11808316 	blt	r2,r6,2000b18 <_malloc_r+0x330>
 200090c:	52800315 	stw	r10,12(r10)
 2000910:	52800215 	stw	r10,8(r10)
 2000914:	30002916 	blt	r6,zero,20009bc <_malloc_r+0x1d4>
 2000918:	8147883a 	add	r3,r16,r5
 200091c:	18800117 	ldw	r2,4(r3)
 2000920:	9009883a 	mov	r4,r18
 2000924:	10800054 	ori	r2,r2,1
 2000928:	18800115 	stw	r2,4(r3)
 200092c:	20032540 	call	2003254 <__malloc_unlock>
 2000930:	80c00204 	addi	r3,r16,8
 2000934:	003fc006 	br	2000838 <_malloc_r+0x50>
 2000938:	02c08034 	movhi	r11,512
 200093c:	5ad6cf04 	addi	r11,r11,23356
 2000940:	8ac5883a 	add	r2,r17,r11
 2000944:	14000317 	ldw	r16,12(r2)
 2000948:	580f883a 	mov	r7,r11
 200094c:	8806d0fa 	srli	r3,r17,3
 2000950:	14006c26 	beq	r2,r16,2000b04 <_malloc_r+0x31c>
 2000954:	80c00117 	ldw	r3,4(r16)
 2000958:	00bfff04 	movi	r2,-4
 200095c:	81800317 	ldw	r6,12(r16)
 2000960:	1886703a 	and	r3,r3,r2
 2000964:	80c7883a 	add	r3,r16,r3
 2000968:	18800117 	ldw	r2,4(r3)
 200096c:	81400217 	ldw	r5,8(r16)
 2000970:	9009883a 	mov	r4,r18
 2000974:	10800054 	ori	r2,r2,1
 2000978:	18800115 	stw	r2,4(r3)
 200097c:	31400215 	stw	r5,8(r6)
 2000980:	29800315 	stw	r6,12(r5)
 2000984:	20032540 	call	2003254 <__malloc_unlock>
 2000988:	80c00204 	addi	r3,r16,8
 200098c:	003faa06 	br	2000838 <_malloc_r+0x50>
 2000990:	00800104 	movi	r2,4
 2000994:	10c0052e 	bgeu	r2,r3,20009ac <_malloc_r+0x1c4>
 2000998:	00800504 	movi	r2,20
 200099c:	10c07836 	bltu	r2,r3,2000b80 <_malloc_r+0x398>
 20009a0:	198016c4 	addi	r6,r3,91
 20009a4:	300490fa 	slli	r2,r6,3
 20009a8:	003fbc06 	br	200089c <_malloc_r+0xb4>
 20009ac:	8804d1ba 	srli	r2,r17,6
 20009b0:	11800e04 	addi	r6,r2,56
 20009b4:	300490fa 	slli	r2,r6,3
 20009b8:	003fb806 	br	200089c <_malloc_r+0xb4>
 20009bc:	00807fc4 	movi	r2,511
 20009c0:	1140bb36 	bltu	r2,r5,2000cb0 <_malloc_r+0x4c8>
 20009c4:	2806d0fa 	srli	r3,r5,3
 20009c8:	573ffe04 	addi	fp,r10,-8
 20009cc:	00800044 	movi	r2,1
 20009d0:	180890fa 	slli	r4,r3,3
 20009d4:	1807d0ba 	srai	r3,r3,2
 20009d8:	e1c00117 	ldw	r7,4(fp)
 20009dc:	5909883a 	add	r4,r11,r4
 20009e0:	21400217 	ldw	r5,8(r4)
 20009e4:	10c4983a 	sll	r2,r2,r3
 20009e8:	81000315 	stw	r4,12(r16)
 20009ec:	81400215 	stw	r5,8(r16)
 20009f0:	388eb03a 	or	r7,r7,r2
 20009f4:	2c000315 	stw	r16,12(r5)
 20009f8:	24000215 	stw	r16,8(r4)
 20009fc:	e1c00115 	stw	r7,4(fp)
 2000a00:	4807883a 	mov	r3,r9
 2000a04:	4800cd16 	blt	r9,zero,2000d3c <_malloc_r+0x554>
 2000a08:	1807d0ba 	srai	r3,r3,2
 2000a0c:	00800044 	movi	r2,1
 2000a10:	10c8983a 	sll	r4,r2,r3
 2000a14:	39004436 	bltu	r7,r4,2000b28 <_malloc_r+0x340>
 2000a18:	21c4703a 	and	r2,r4,r7
 2000a1c:	10000a1e 	bne	r2,zero,2000a48 <_malloc_r+0x260>
 2000a20:	2109883a 	add	r4,r4,r4
 2000a24:	00bfff04 	movi	r2,-4
 2000a28:	4884703a 	and	r2,r9,r2
 2000a2c:	3906703a 	and	r3,r7,r4
 2000a30:	12400104 	addi	r9,r2,4
 2000a34:	1800041e 	bne	r3,zero,2000a48 <_malloc_r+0x260>
 2000a38:	2109883a 	add	r4,r4,r4
 2000a3c:	3904703a 	and	r2,r7,r4
 2000a40:	4a400104 	addi	r9,r9,4
 2000a44:	103ffc26 	beq	r2,zero,2000a38 <_malloc_r+0x250>
 2000a48:	480490fa 	slli	r2,r9,3
 2000a4c:	4819883a 	mov	r12,r9
 2000a50:	023fff04 	movi	r8,-4
 2000a54:	589b883a 	add	r13,r11,r2
 2000a58:	6807883a 	mov	r3,r13
 2000a5c:	014003c4 	movi	r5,15
 2000a60:	1c000317 	ldw	r16,12(r3)
 2000a64:	1c00041e 	bne	r3,r16,2000a78 <_malloc_r+0x290>
 2000a68:	0000a706 	br	2000d08 <_malloc_r+0x520>
 2000a6c:	3000ab0e 	bge	r6,zero,2000d1c <_malloc_r+0x534>
 2000a70:	84000317 	ldw	r16,12(r16)
 2000a74:	1c00a426 	beq	r3,r16,2000d08 <_malloc_r+0x520>
 2000a78:	80800117 	ldw	r2,4(r16)
 2000a7c:	1204703a 	and	r2,r2,r8
 2000a80:	144dc83a 	sub	r6,r2,r17
 2000a84:	29bff90e 	bge	r5,r6,2000a6c <_malloc_r+0x284>
 2000a88:	81000317 	ldw	r4,12(r16)
 2000a8c:	80c00217 	ldw	r3,8(r16)
 2000a90:	89400054 	ori	r5,r17,1
 2000a94:	8445883a 	add	r2,r16,r17
 2000a98:	20c00215 	stw	r3,8(r4)
 2000a9c:	19000315 	stw	r4,12(r3)
 2000aa0:	81400115 	stw	r5,4(r16)
 2000aa4:	1187883a 	add	r3,r2,r6
 2000aa8:	31000054 	ori	r4,r6,1
 2000aac:	50800315 	stw	r2,12(r10)
 2000ab0:	50800215 	stw	r2,8(r10)
 2000ab4:	19800015 	stw	r6,0(r3)
 2000ab8:	11000115 	stw	r4,4(r2)
 2000abc:	12800215 	stw	r10,8(r2)
 2000ac0:	12800315 	stw	r10,12(r2)
 2000ac4:	9009883a 	mov	r4,r18
 2000ac8:	20032540 	call	2003254 <__malloc_unlock>
 2000acc:	80c00204 	addi	r3,r16,8
 2000ad0:	003f5906 	br	2000838 <_malloc_r+0x50>
 2000ad4:	8109883a 	add	r4,r16,r4
 2000ad8:	20800117 	ldw	r2,4(r4)
 2000adc:	80c00217 	ldw	r3,8(r16)
 2000ae0:	81400317 	ldw	r5,12(r16)
 2000ae4:	10800054 	ori	r2,r2,1
 2000ae8:	20800115 	stw	r2,4(r4)
 2000aec:	28c00215 	stw	r3,8(r5)
 2000af0:	19400315 	stw	r5,12(r3)
 2000af4:	9009883a 	mov	r4,r18
 2000af8:	20032540 	call	2003254 <__malloc_unlock>
 2000afc:	80c00204 	addi	r3,r16,8
 2000b00:	003f4d06 	br	2000838 <_malloc_r+0x50>
 2000b04:	80800204 	addi	r2,r16,8
 2000b08:	14000317 	ldw	r16,12(r2)
 2000b0c:	143f911e 	bne	r2,r16,2000954 <_malloc_r+0x16c>
 2000b10:	1a400084 	addi	r9,r3,2
 2000b14:	003f7306 	br	20008e4 <_malloc_r+0xfc>
 2000b18:	88c00054 	ori	r3,r17,1
 2000b1c:	8445883a 	add	r2,r16,r17
 2000b20:	80c00115 	stw	r3,4(r16)
 2000b24:	003fdf06 	br	2000aa4 <_malloc_r+0x2bc>
 2000b28:	e4000217 	ldw	r16,8(fp)
 2000b2c:	00bfff04 	movi	r2,-4
 2000b30:	80c00117 	ldw	r3,4(r16)
 2000b34:	802d883a 	mov	r22,r16
 2000b38:	18aa703a 	and	r21,r3,r2
 2000b3c:	ac401636 	bltu	r21,r17,2000b98 <_malloc_r+0x3b0>
 2000b40:	ac49c83a 	sub	r4,r21,r17
 2000b44:	008003c4 	movi	r2,15
 2000b48:	1100130e 	bge	r2,r4,2000b98 <_malloc_r+0x3b0>
 2000b4c:	88800054 	ori	r2,r17,1
 2000b50:	8447883a 	add	r3,r16,r17
 2000b54:	80800115 	stw	r2,4(r16)
 2000b58:	20800054 	ori	r2,r4,1
 2000b5c:	18800115 	stw	r2,4(r3)
 2000b60:	e0c00215 	stw	r3,8(fp)
 2000b64:	9009883a 	mov	r4,r18
 2000b68:	20032540 	call	2003254 <__malloc_unlock>
 2000b6c:	80c00204 	addi	r3,r16,8
 2000b70:	003f3106 	br	2000838 <_malloc_r+0x50>
 2000b74:	39c00117 	ldw	r7,4(r7)
 2000b78:	573ffe04 	addi	fp,r10,-8
 2000b7c:	003fa006 	br	2000a00 <_malloc_r+0x218>
 2000b80:	00801504 	movi	r2,84
 2000b84:	10c06736 	bltu	r2,r3,2000d24 <_malloc_r+0x53c>
 2000b88:	8804d33a 	srli	r2,r17,12
 2000b8c:	11801b84 	addi	r6,r2,110
 2000b90:	300490fa 	slli	r2,r6,3
 2000b94:	003f4106 	br	200089c <_malloc_r+0xb4>
 2000b98:	d0a6c117 	ldw	r2,-25852(gp)
 2000b9c:	d0e00317 	ldw	r3,-32756(gp)
 2000ba0:	053fffc4 	movi	r20,-1
 2000ba4:	10800404 	addi	r2,r2,16
 2000ba8:	88a7883a 	add	r19,r17,r2
 2000bac:	1d000326 	beq	r3,r20,2000bbc <_malloc_r+0x3d4>
 2000bb0:	98c3ffc4 	addi	r3,r19,4095
 2000bb4:	00bc0004 	movi	r2,-4096
 2000bb8:	18a6703a 	and	r19,r3,r2
 2000bbc:	9009883a 	mov	r4,r18
 2000bc0:	980b883a 	mov	r5,r19
 2000bc4:	20017800 	call	2001780 <_sbrk_r>
 2000bc8:	1009883a 	mov	r4,r2
 2000bcc:	15000426 	beq	r2,r20,2000be0 <_malloc_r+0x3f8>
 2000bd0:	854b883a 	add	r5,r16,r21
 2000bd4:	1029883a 	mov	r20,r2
 2000bd8:	11405a2e 	bgeu	r2,r5,2000d44 <_malloc_r+0x55c>
 2000bdc:	87000c26 	beq	r16,fp,2000c10 <_malloc_r+0x428>
 2000be0:	e4000217 	ldw	r16,8(fp)
 2000be4:	80c00117 	ldw	r3,4(r16)
 2000be8:	00bfff04 	movi	r2,-4
 2000bec:	1884703a 	and	r2,r3,r2
 2000bf0:	14400336 	bltu	r2,r17,2000c00 <_malloc_r+0x418>
 2000bf4:	1449c83a 	sub	r4,r2,r17
 2000bf8:	008003c4 	movi	r2,15
 2000bfc:	113fd316 	blt	r2,r4,2000b4c <_malloc_r+0x364>
 2000c00:	9009883a 	mov	r4,r18
 2000c04:	20032540 	call	2003254 <__malloc_unlock>
 2000c08:	0007883a 	mov	r3,zero
 2000c0c:	003f0a06 	br	2000838 <_malloc_r+0x50>
 2000c10:	05c08074 	movhi	r23,513
 2000c14:	bde33f04 	addi	r23,r23,-29444
 2000c18:	b8800017 	ldw	r2,0(r23)
 2000c1c:	988d883a 	add	r6,r19,r2
 2000c20:	b9800015 	stw	r6,0(r23)
 2000c24:	d0e00317 	ldw	r3,-32756(gp)
 2000c28:	00bfffc4 	movi	r2,-1
 2000c2c:	18808e26 	beq	r3,r2,2000e68 <_malloc_r+0x680>
 2000c30:	2145c83a 	sub	r2,r4,r5
 2000c34:	3085883a 	add	r2,r6,r2
 2000c38:	b8800015 	stw	r2,0(r23)
 2000c3c:	20c001cc 	andi	r3,r4,7
 2000c40:	18005f1e 	bne	r3,zero,2000dc0 <_malloc_r+0x5d8>
 2000c44:	000b883a 	mov	r5,zero
 2000c48:	a4c5883a 	add	r2,r20,r19
 2000c4c:	1083ffcc 	andi	r2,r2,4095
 2000c50:	00c40004 	movi	r3,4096
 2000c54:	1887c83a 	sub	r3,r3,r2
 2000c58:	28e7883a 	add	r19,r5,r3
 2000c5c:	9009883a 	mov	r4,r18
 2000c60:	980b883a 	mov	r5,r19
 2000c64:	20017800 	call	2001780 <_sbrk_r>
 2000c68:	1007883a 	mov	r3,r2
 2000c6c:	00bfffc4 	movi	r2,-1
 2000c70:	18807a26 	beq	r3,r2,2000e5c <_malloc_r+0x674>
 2000c74:	1d05c83a 	sub	r2,r3,r20
 2000c78:	9885883a 	add	r2,r19,r2
 2000c7c:	10c00054 	ori	r3,r2,1
 2000c80:	b8800017 	ldw	r2,0(r23)
 2000c84:	a021883a 	mov	r16,r20
 2000c88:	a0c00115 	stw	r3,4(r20)
 2000c8c:	9885883a 	add	r2,r19,r2
 2000c90:	b8800015 	stw	r2,0(r23)
 2000c94:	e5000215 	stw	r20,8(fp)
 2000c98:	b7003626 	beq	r22,fp,2000d74 <_malloc_r+0x58c>
 2000c9c:	018003c4 	movi	r6,15
 2000ca0:	35404b36 	bltu	r6,r21,2000dd0 <_malloc_r+0x5e8>
 2000ca4:	00800044 	movi	r2,1
 2000ca8:	a0800115 	stw	r2,4(r20)
 2000cac:	003fcd06 	br	2000be4 <_malloc_r+0x3fc>
 2000cb0:	2808d27a 	srli	r4,r5,9
 2000cb4:	2000371e 	bne	r4,zero,2000d94 <_malloc_r+0x5ac>
 2000cb8:	2808d0fa 	srli	r4,r5,3
 2000cbc:	200690fa 	slli	r3,r4,3
 2000cc0:	1ad1883a 	add	r8,r3,r11
 2000cc4:	41800217 	ldw	r6,8(r8)
 2000cc8:	41805b26 	beq	r8,r6,2000e38 <_malloc_r+0x650>
 2000ccc:	30800117 	ldw	r2,4(r6)
 2000cd0:	00ffff04 	movi	r3,-4
 2000cd4:	10c4703a 	and	r2,r2,r3
 2000cd8:	2880022e 	bgeu	r5,r2,2000ce4 <_malloc_r+0x4fc>
 2000cdc:	31800217 	ldw	r6,8(r6)
 2000ce0:	41bffa1e 	bne	r8,r6,2000ccc <_malloc_r+0x4e4>
 2000ce4:	32000317 	ldw	r8,12(r6)
 2000ce8:	39c00117 	ldw	r7,4(r7)
 2000cec:	82000315 	stw	r8,12(r16)
 2000cf0:	81800215 	stw	r6,8(r16)
 2000cf4:	07008034 	movhi	fp,512
 2000cf8:	e716cf04 	addi	fp,fp,23356
 2000cfc:	34000315 	stw	r16,12(r6)
 2000d00:	44000215 	stw	r16,8(r8)
 2000d04:	003f3e06 	br	2000a00 <_malloc_r+0x218>
 2000d08:	63000044 	addi	r12,r12,1
 2000d0c:	608000cc 	andi	r2,r12,3
 2000d10:	10005d26 	beq	r2,zero,2000e88 <_malloc_r+0x6a0>
 2000d14:	18c00204 	addi	r3,r3,8
 2000d18:	003f5106 	br	2000a60 <_malloc_r+0x278>
 2000d1c:	8089883a 	add	r4,r16,r2
 2000d20:	003f6d06 	br	2000ad8 <_malloc_r+0x2f0>
 2000d24:	00805504 	movi	r2,340
 2000d28:	10c02036 	bltu	r2,r3,2000dac <_malloc_r+0x5c4>
 2000d2c:	8804d3fa 	srli	r2,r17,15
 2000d30:	11801dc4 	addi	r6,r2,119
 2000d34:	300490fa 	slli	r2,r6,3
 2000d38:	003ed806 	br	200089c <_malloc_r+0xb4>
 2000d3c:	48c000c4 	addi	r3,r9,3
 2000d40:	003f3106 	br	2000a08 <_malloc_r+0x220>
 2000d44:	05c08074 	movhi	r23,513
 2000d48:	bde33f04 	addi	r23,r23,-29444
 2000d4c:	b8800017 	ldw	r2,0(r23)
 2000d50:	988d883a 	add	r6,r19,r2
 2000d54:	b9800015 	stw	r6,0(r23)
 2000d58:	293fb21e 	bne	r5,r4,2000c24 <_malloc_r+0x43c>
 2000d5c:	2083ffcc 	andi	r2,r4,4095
 2000d60:	103fb01e 	bne	r2,zero,2000c24 <_malloc_r+0x43c>
 2000d64:	e4000217 	ldw	r16,8(fp)
 2000d68:	9d45883a 	add	r2,r19,r21
 2000d6c:	10800054 	ori	r2,r2,1
 2000d70:	80800115 	stw	r2,4(r16)
 2000d74:	b8c00017 	ldw	r3,0(r23)
 2000d78:	d0a6c217 	ldw	r2,-25848(gp)
 2000d7c:	10c0012e 	bgeu	r2,r3,2000d84 <_malloc_r+0x59c>
 2000d80:	d0e6c215 	stw	r3,-25848(gp)
 2000d84:	d0a6c317 	ldw	r2,-25844(gp)
 2000d88:	10ff962e 	bgeu	r2,r3,2000be4 <_malloc_r+0x3fc>
 2000d8c:	d0e6c315 	stw	r3,-25844(gp)
 2000d90:	003f9406 	br	2000be4 <_malloc_r+0x3fc>
 2000d94:	00800104 	movi	r2,4
 2000d98:	11001e36 	bltu	r2,r4,2000e14 <_malloc_r+0x62c>
 2000d9c:	2804d1ba 	srli	r2,r5,6
 2000da0:	11000e04 	addi	r4,r2,56
 2000da4:	200690fa 	slli	r3,r4,3
 2000da8:	003fc506 	br	2000cc0 <_malloc_r+0x4d8>
 2000dac:	00815504 	movi	r2,1364
 2000db0:	10c01d2e 	bgeu	r2,r3,2000e28 <_malloc_r+0x640>
 2000db4:	01801f84 	movi	r6,126
 2000db8:	0080fc04 	movi	r2,1008
 2000dbc:	003eb706 	br	200089c <_malloc_r+0xb4>
 2000dc0:	00800204 	movi	r2,8
 2000dc4:	10cbc83a 	sub	r5,r2,r3
 2000dc8:	2169883a 	add	r20,r4,r5
 2000dcc:	003f9e06 	br	2000c48 <_malloc_r+0x460>
 2000dd0:	00bffe04 	movi	r2,-8
 2000dd4:	a93ffd04 	addi	r4,r21,-12
 2000dd8:	2088703a 	and	r4,r4,r2
 2000ddc:	b10b883a 	add	r5,r22,r4
 2000de0:	00c00144 	movi	r3,5
 2000de4:	28c00215 	stw	r3,8(r5)
 2000de8:	28c00115 	stw	r3,4(r5)
 2000dec:	b0800117 	ldw	r2,4(r22)
 2000df0:	1080004c 	andi	r2,r2,1
 2000df4:	2084b03a 	or	r2,r4,r2
 2000df8:	b0800115 	stw	r2,4(r22)
 2000dfc:	313fdd2e 	bgeu	r6,r4,2000d74 <_malloc_r+0x58c>
 2000e00:	b1400204 	addi	r5,r22,8
 2000e04:	9009883a 	mov	r4,r18
 2000e08:	2001f7c0 	call	2001f7c <_free_r>
 2000e0c:	e4000217 	ldw	r16,8(fp)
 2000e10:	003fd806 	br	2000d74 <_malloc_r+0x58c>
 2000e14:	00800504 	movi	r2,20
 2000e18:	11001536 	bltu	r2,r4,2000e70 <_malloc_r+0x688>
 2000e1c:	210016c4 	addi	r4,r4,91
 2000e20:	200690fa 	slli	r3,r4,3
 2000e24:	003fa606 	br	2000cc0 <_malloc_r+0x4d8>
 2000e28:	8804d4ba 	srli	r2,r17,18
 2000e2c:	11801f04 	addi	r6,r2,124
 2000e30:	300490fa 	slli	r2,r6,3
 2000e34:	003e9906 	br	200089c <_malloc_r+0xb4>
 2000e38:	2009d0ba 	srai	r4,r4,2
 2000e3c:	01408034 	movhi	r5,512
 2000e40:	2956cf04 	addi	r5,r5,23356
 2000e44:	00c00044 	movi	r3,1
 2000e48:	28800117 	ldw	r2,4(r5)
 2000e4c:	1906983a 	sll	r3,r3,r4
 2000e50:	10c4b03a 	or	r2,r2,r3
 2000e54:	28800115 	stw	r2,4(r5)
 2000e58:	003fa306 	br	2000ce8 <_malloc_r+0x500>
 2000e5c:	0027883a 	mov	r19,zero
 2000e60:	00c00044 	movi	r3,1
 2000e64:	003f8606 	br	2000c80 <_malloc_r+0x498>
 2000e68:	d1200315 	stw	r4,-32756(gp)
 2000e6c:	003f7306 	br	2000c3c <_malloc_r+0x454>
 2000e70:	00801504 	movi	r2,84
 2000e74:	11001936 	bltu	r2,r4,2000edc <_malloc_r+0x6f4>
 2000e78:	2804d33a 	srli	r2,r5,12
 2000e7c:	11001b84 	addi	r4,r2,110
 2000e80:	200690fa 	slli	r3,r4,3
 2000e84:	003f8e06 	br	2000cc0 <_malloc_r+0x4d8>
 2000e88:	480b883a 	mov	r5,r9
 2000e8c:	6807883a 	mov	r3,r13
 2000e90:	288000cc 	andi	r2,r5,3
 2000e94:	18fffe04 	addi	r3,r3,-8
 2000e98:	297fffc4 	addi	r5,r5,-1
 2000e9c:	10001526 	beq	r2,zero,2000ef4 <_malloc_r+0x70c>
 2000ea0:	18800217 	ldw	r2,8(r3)
 2000ea4:	10fffa26 	beq	r2,r3,2000e90 <_malloc_r+0x6a8>
 2000ea8:	2109883a 	add	r4,r4,r4
 2000eac:	393f1e36 	bltu	r7,r4,2000b28 <_malloc_r+0x340>
 2000eb0:	203f1d26 	beq	r4,zero,2000b28 <_malloc_r+0x340>
 2000eb4:	21c4703a 	and	r2,r4,r7
 2000eb8:	10000226 	beq	r2,zero,2000ec4 <_malloc_r+0x6dc>
 2000ebc:	6013883a 	mov	r9,r12
 2000ec0:	003ee106 	br	2000a48 <_malloc_r+0x260>
 2000ec4:	2109883a 	add	r4,r4,r4
 2000ec8:	3904703a 	and	r2,r7,r4
 2000ecc:	63000104 	addi	r12,r12,4
 2000ed0:	103ffc26 	beq	r2,zero,2000ec4 <_malloc_r+0x6dc>
 2000ed4:	6013883a 	mov	r9,r12
 2000ed8:	003edb06 	br	2000a48 <_malloc_r+0x260>
 2000edc:	00805504 	movi	r2,340
 2000ee0:	11000836 	bltu	r2,r4,2000f04 <_malloc_r+0x71c>
 2000ee4:	2804d3fa 	srli	r2,r5,15
 2000ee8:	11001dc4 	addi	r4,r2,119
 2000eec:	200690fa 	slli	r3,r4,3
 2000ef0:	003f7306 	br	2000cc0 <_malloc_r+0x4d8>
 2000ef4:	0104303a 	nor	r2,zero,r4
 2000ef8:	388e703a 	and	r7,r7,r2
 2000efc:	e1c00115 	stw	r7,4(fp)
 2000f00:	003fe906 	br	2000ea8 <_malloc_r+0x6c0>
 2000f04:	00815504 	movi	r2,1364
 2000f08:	1100032e 	bgeu	r2,r4,2000f18 <_malloc_r+0x730>
 2000f0c:	01001f84 	movi	r4,126
 2000f10:	00c0fc04 	movi	r3,1008
 2000f14:	003f6a06 	br	2000cc0 <_malloc_r+0x4d8>
 2000f18:	2804d4ba 	srli	r2,r5,18
 2000f1c:	11001f04 	addi	r4,r2,124
 2000f20:	200690fa 	slli	r3,r4,3
 2000f24:	003f6606 	br	2000cc0 <_malloc_r+0x4d8>

02000f28 <memchr>:
 2000f28:	008000c4 	movi	r2,3
 2000f2c:	29403fcc 	andi	r5,r5,255
 2000f30:	2007883a 	mov	r3,r4
 2000f34:	1180022e 	bgeu	r2,r6,2000f40 <memchr+0x18>
 2000f38:	2084703a 	and	r2,r4,r2
 2000f3c:	10000b26 	beq	r2,zero,2000f6c <memchr+0x44>
 2000f40:	313fffc4 	addi	r4,r6,-1
 2000f44:	3000051e 	bne	r6,zero,2000f5c <memchr+0x34>
 2000f48:	00002c06 	br	2000ffc <memchr+0xd4>
 2000f4c:	213fffc4 	addi	r4,r4,-1
 2000f50:	00bfffc4 	movi	r2,-1
 2000f54:	18c00044 	addi	r3,r3,1
 2000f58:	20802826 	beq	r4,r2,2000ffc <memchr+0xd4>
 2000f5c:	18800003 	ldbu	r2,0(r3)
 2000f60:	28bffa1e 	bne	r5,r2,2000f4c <memchr+0x24>
 2000f64:	1805883a 	mov	r2,r3
 2000f68:	f800283a 	ret
 2000f6c:	0011883a 	mov	r8,zero
 2000f70:	0007883a 	mov	r3,zero
 2000f74:	01c00104 	movi	r7,4
 2000f78:	4004923a 	slli	r2,r8,8
 2000f7c:	18c00044 	addi	r3,r3,1
 2000f80:	1151883a 	add	r8,r2,r5
 2000f84:	19fffc1e 	bne	r3,r7,2000f78 <memchr+0x50>
 2000f88:	02bfbff4 	movhi	r10,65279
 2000f8c:	52bfbfc4 	addi	r10,r10,-257
 2000f90:	02602074 	movhi	r9,32897
 2000f94:	4a602004 	addi	r9,r9,-32640
 2000f98:	02c000c4 	movi	r11,3
 2000f9c:	20800017 	ldw	r2,0(r4)
 2000fa0:	31bfff04 	addi	r6,r6,-4
 2000fa4:	200f883a 	mov	r7,r4
 2000fa8:	1204f03a 	xor	r2,r2,r8
 2000fac:	1287883a 	add	r3,r2,r10
 2000fb0:	1a46703a 	and	r3,r3,r9
 2000fb4:	0084303a 	nor	r2,zero,r2
 2000fb8:	10c4703a 	and	r2,r2,r3
 2000fbc:	10000b26 	beq	r2,zero,2000fec <memchr+0xc4>
 2000fc0:	20800003 	ldbu	r2,0(r4)
 2000fc4:	28800f26 	beq	r5,r2,2001004 <memchr+0xdc>
 2000fc8:	20800043 	ldbu	r2,1(r4)
 2000fcc:	21c00044 	addi	r7,r4,1
 2000fd0:	28800c26 	beq	r5,r2,2001004 <memchr+0xdc>
 2000fd4:	20800083 	ldbu	r2,2(r4)
 2000fd8:	21c00084 	addi	r7,r4,2
 2000fdc:	28800926 	beq	r5,r2,2001004 <memchr+0xdc>
 2000fe0:	208000c3 	ldbu	r2,3(r4)
 2000fe4:	21c000c4 	addi	r7,r4,3
 2000fe8:	28800626 	beq	r5,r2,2001004 <memchr+0xdc>
 2000fec:	21000104 	addi	r4,r4,4
 2000ff0:	59bfea36 	bltu	r11,r6,2000f9c <memchr+0x74>
 2000ff4:	2007883a 	mov	r3,r4
 2000ff8:	003fd106 	br	2000f40 <memchr+0x18>
 2000ffc:	0005883a 	mov	r2,zero
 2001000:	f800283a 	ret
 2001004:	3805883a 	mov	r2,r7
 2001008:	f800283a 	ret

0200100c <memcpy>:
 200100c:	01c003c4 	movi	r7,15
 2001010:	2007883a 	mov	r3,r4
 2001014:	3980032e 	bgeu	r7,r6,2001024 <memcpy+0x18>
 2001018:	2904b03a 	or	r2,r5,r4
 200101c:	108000cc 	andi	r2,r2,3
 2001020:	10000926 	beq	r2,zero,2001048 <memcpy+0x3c>
 2001024:	30000626 	beq	r6,zero,2001040 <memcpy+0x34>
 2001028:	30cd883a 	add	r6,r6,r3
 200102c:	28800003 	ldbu	r2,0(r5)
 2001030:	29400044 	addi	r5,r5,1
 2001034:	18800005 	stb	r2,0(r3)
 2001038:	18c00044 	addi	r3,r3,1
 200103c:	30fffb1e 	bne	r6,r3,200102c <memcpy+0x20>
 2001040:	2005883a 	mov	r2,r4
 2001044:	f800283a 	ret
 2001048:	3811883a 	mov	r8,r7
 200104c:	200f883a 	mov	r7,r4
 2001050:	28c00017 	ldw	r3,0(r5)
 2001054:	31bffc04 	addi	r6,r6,-16
 2001058:	38c00015 	stw	r3,0(r7)
 200105c:	28800117 	ldw	r2,4(r5)
 2001060:	38800115 	stw	r2,4(r7)
 2001064:	28c00217 	ldw	r3,8(r5)
 2001068:	38c00215 	stw	r3,8(r7)
 200106c:	28800317 	ldw	r2,12(r5)
 2001070:	29400404 	addi	r5,r5,16
 2001074:	38800315 	stw	r2,12(r7)
 2001078:	39c00404 	addi	r7,r7,16
 200107c:	41bff436 	bltu	r8,r6,2001050 <memcpy+0x44>
 2001080:	008000c4 	movi	r2,3
 2001084:	1180072e 	bgeu	r2,r6,20010a4 <memcpy+0x98>
 2001088:	1007883a 	mov	r3,r2
 200108c:	28800017 	ldw	r2,0(r5)
 2001090:	31bfff04 	addi	r6,r6,-4
 2001094:	29400104 	addi	r5,r5,4
 2001098:	38800015 	stw	r2,0(r7)
 200109c:	39c00104 	addi	r7,r7,4
 20010a0:	19bffa36 	bltu	r3,r6,200108c <memcpy+0x80>
 20010a4:	3807883a 	mov	r3,r7
 20010a8:	003fde06 	br	2001024 <memcpy+0x18>

020010ac <memmove>:
 20010ac:	2807883a 	mov	r3,r5
 20010b0:	2011883a 	mov	r8,r4
 20010b4:	29000c2e 	bgeu	r5,r4,20010e8 <memmove+0x3c>
 20010b8:	298f883a 	add	r7,r5,r6
 20010bc:	21c00a2e 	bgeu	r4,r7,20010e8 <memmove+0x3c>
 20010c0:	30000726 	beq	r6,zero,20010e0 <memmove+0x34>
 20010c4:	2187883a 	add	r3,r4,r6
 20010c8:	198dc83a 	sub	r6,r3,r6
 20010cc:	39ffffc4 	addi	r7,r7,-1
 20010d0:	38800003 	ldbu	r2,0(r7)
 20010d4:	18ffffc4 	addi	r3,r3,-1
 20010d8:	18800005 	stb	r2,0(r3)
 20010dc:	19bffb1e 	bne	r3,r6,20010cc <memmove+0x20>
 20010e0:	2005883a 	mov	r2,r4
 20010e4:	f800283a 	ret
 20010e8:	01c003c4 	movi	r7,15
 20010ec:	39800a36 	bltu	r7,r6,2001118 <memmove+0x6c>
 20010f0:	303ffb26 	beq	r6,zero,20010e0 <memmove+0x34>
 20010f4:	400f883a 	mov	r7,r8
 20010f8:	320d883a 	add	r6,r6,r8
 20010fc:	28800003 	ldbu	r2,0(r5)
 2001100:	29400044 	addi	r5,r5,1
 2001104:	38800005 	stb	r2,0(r7)
 2001108:	39c00044 	addi	r7,r7,1
 200110c:	39bffb1e 	bne	r7,r6,20010fc <memmove+0x50>
 2001110:	2005883a 	mov	r2,r4
 2001114:	f800283a 	ret
 2001118:	1904b03a 	or	r2,r3,r4
 200111c:	108000cc 	andi	r2,r2,3
 2001120:	103ff31e 	bne	r2,zero,20010f0 <memmove+0x44>
 2001124:	3811883a 	mov	r8,r7
 2001128:	180b883a 	mov	r5,r3
 200112c:	200f883a 	mov	r7,r4
 2001130:	28c00017 	ldw	r3,0(r5)
 2001134:	31bffc04 	addi	r6,r6,-16
 2001138:	38c00015 	stw	r3,0(r7)
 200113c:	28800117 	ldw	r2,4(r5)
 2001140:	38800115 	stw	r2,4(r7)
 2001144:	28c00217 	ldw	r3,8(r5)
 2001148:	38c00215 	stw	r3,8(r7)
 200114c:	28800317 	ldw	r2,12(r5)
 2001150:	29400404 	addi	r5,r5,16
 2001154:	38800315 	stw	r2,12(r7)
 2001158:	39c00404 	addi	r7,r7,16
 200115c:	41bff436 	bltu	r8,r6,2001130 <memmove+0x84>
 2001160:	008000c4 	movi	r2,3
 2001164:	1180072e 	bgeu	r2,r6,2001184 <memmove+0xd8>
 2001168:	1007883a 	mov	r3,r2
 200116c:	28800017 	ldw	r2,0(r5)
 2001170:	31bfff04 	addi	r6,r6,-4
 2001174:	29400104 	addi	r5,r5,4
 2001178:	38800015 	stw	r2,0(r7)
 200117c:	39c00104 	addi	r7,r7,4
 2001180:	19bffa36 	bltu	r3,r6,200116c <memmove+0xc0>
 2001184:	3811883a 	mov	r8,r7
 2001188:	003fd906 	br	20010f0 <memmove+0x44>

0200118c <_realloc_r>:
 200118c:	defff404 	addi	sp,sp,-48
 2001190:	dd800815 	stw	r22,32(sp)
 2001194:	dc800415 	stw	r18,16(sp)
 2001198:	dc400315 	stw	r17,12(sp)
 200119c:	dfc00b15 	stw	ra,44(sp)
 20011a0:	df000a15 	stw	fp,40(sp)
 20011a4:	ddc00915 	stw	r23,36(sp)
 20011a8:	dd400715 	stw	r21,28(sp)
 20011ac:	dd000615 	stw	r20,24(sp)
 20011b0:	dcc00515 	stw	r19,20(sp)
 20011b4:	dc000215 	stw	r16,8(sp)
 20011b8:	2825883a 	mov	r18,r5
 20011bc:	3023883a 	mov	r17,r6
 20011c0:	202d883a 	mov	r22,r4
 20011c4:	2800c926 	beq	r5,zero,20014ec <_realloc_r+0x360>
 20011c8:	20032340 	call	2003234 <__malloc_lock>
 20011cc:	943ffe04 	addi	r16,r18,-8
 20011d0:	88c002c4 	addi	r3,r17,11
 20011d4:	00800584 	movi	r2,22
 20011d8:	82000117 	ldw	r8,4(r16)
 20011dc:	10c01b2e 	bgeu	r2,r3,200124c <_realloc_r+0xc0>
 20011e0:	00bffe04 	movi	r2,-8
 20011e4:	188e703a 	and	r7,r3,r2
 20011e8:	3839883a 	mov	fp,r7
 20011ec:	38001a16 	blt	r7,zero,2001258 <_realloc_r+0xcc>
 20011f0:	e4401936 	bltu	fp,r17,2001258 <_realloc_r+0xcc>
 20011f4:	013fff04 	movi	r4,-4
 20011f8:	4126703a 	and	r19,r8,r4
 20011fc:	99c02616 	blt	r19,r7,2001298 <_realloc_r+0x10c>
 2001200:	802b883a 	mov	r21,r16
 2001204:	9829883a 	mov	r20,r19
 2001208:	84000204 	addi	r16,r16,8
 200120c:	a80f883a 	mov	r7,r21
 2001210:	a70dc83a 	sub	r6,r20,fp
 2001214:	008003c4 	movi	r2,15
 2001218:	1180c136 	bltu	r2,r6,2001520 <_realloc_r+0x394>
 200121c:	38800117 	ldw	r2,4(r7)
 2001220:	a549883a 	add	r4,r20,r21
 2001224:	1080004c 	andi	r2,r2,1
 2001228:	a084b03a 	or	r2,r20,r2
 200122c:	38800115 	stw	r2,4(r7)
 2001230:	20c00117 	ldw	r3,4(r4)
 2001234:	18c00054 	ori	r3,r3,1
 2001238:	20c00115 	stw	r3,4(r4)
 200123c:	b009883a 	mov	r4,r22
 2001240:	20032540 	call	2003254 <__malloc_unlock>
 2001244:	8023883a 	mov	r17,r16
 2001248:	00000606 	br	2001264 <_realloc_r+0xd8>
 200124c:	01c00404 	movi	r7,16
 2001250:	3839883a 	mov	fp,r7
 2001254:	e47fe72e 	bgeu	fp,r17,20011f4 <_realloc_r+0x68>
 2001258:	00800304 	movi	r2,12
 200125c:	0023883a 	mov	r17,zero
 2001260:	b0800015 	stw	r2,0(r22)
 2001264:	8805883a 	mov	r2,r17
 2001268:	dfc00b17 	ldw	ra,44(sp)
 200126c:	df000a17 	ldw	fp,40(sp)
 2001270:	ddc00917 	ldw	r23,36(sp)
 2001274:	dd800817 	ldw	r22,32(sp)
 2001278:	dd400717 	ldw	r21,28(sp)
 200127c:	dd000617 	ldw	r20,24(sp)
 2001280:	dcc00517 	ldw	r19,20(sp)
 2001284:	dc800417 	ldw	r18,16(sp)
 2001288:	dc400317 	ldw	r17,12(sp)
 200128c:	dc000217 	ldw	r16,8(sp)
 2001290:	dec00c04 	addi	sp,sp,48
 2001294:	f800283a 	ret
 2001298:	00808034 	movhi	r2,512
 200129c:	1096cf04 	addi	r2,r2,23356
 20012a0:	12400217 	ldw	r9,8(r2)
 20012a4:	84cd883a 	add	r6,r16,r19
 20012a8:	802b883a 	mov	r21,r16
 20012ac:	3240b926 	beq	r6,r9,2001594 <_realloc_r+0x408>
 20012b0:	31400117 	ldw	r5,4(r6)
 20012b4:	00bfff84 	movi	r2,-2
 20012b8:	2884703a 	and	r2,r5,r2
 20012bc:	1185883a 	add	r2,r2,r6
 20012c0:	10c00117 	ldw	r3,4(r2)
 20012c4:	18c0004c 	andi	r3,r3,1
 20012c8:	1807003a 	cmpeq	r3,r3,zero
 20012cc:	1800a326 	beq	r3,zero,200155c <_realloc_r+0x3d0>
 20012d0:	2908703a 	and	r4,r5,r4
 20012d4:	9929883a 	add	r20,r19,r4
 20012d8:	a1c0a30e 	bge	r20,r7,2001568 <_realloc_r+0x3dc>
 20012dc:	4080004c 	andi	r2,r8,1
 20012e0:	1000551e 	bne	r2,zero,2001438 <_realloc_r+0x2ac>
 20012e4:	80800017 	ldw	r2,0(r16)
 20012e8:	80afc83a 	sub	r23,r16,r2
 20012ec:	b8c00117 	ldw	r3,4(r23)
 20012f0:	00bfff04 	movi	r2,-4
 20012f4:	1884703a 	and	r2,r3,r2
 20012f8:	30002e26 	beq	r6,zero,20013b4 <_realloc_r+0x228>
 20012fc:	3240b926 	beq	r6,r9,20015e4 <_realloc_r+0x458>
 2001300:	98a9883a 	add	r20,r19,r2
 2001304:	2509883a 	add	r4,r4,r20
 2001308:	d9000015 	stw	r4,0(sp)
 200130c:	21c02a16 	blt	r4,r7,20013b8 <_realloc_r+0x22c>
 2001310:	30800317 	ldw	r2,12(r6)
 2001314:	30c00217 	ldw	r3,8(r6)
 2001318:	01400904 	movi	r5,36
 200131c:	99bfff04 	addi	r6,r19,-4
 2001320:	18800315 	stw	r2,12(r3)
 2001324:	10c00215 	stw	r3,8(r2)
 2001328:	b9000317 	ldw	r4,12(r23)
 200132c:	b8800217 	ldw	r2,8(r23)
 2001330:	b82b883a 	mov	r21,r23
 2001334:	bc000204 	addi	r16,r23,8
 2001338:	20800215 	stw	r2,8(r4)
 200133c:	11000315 	stw	r4,12(r2)
 2001340:	2980e436 	bltu	r5,r6,20016d4 <_realloc_r+0x548>
 2001344:	008004c4 	movi	r2,19
 2001348:	9009883a 	mov	r4,r18
 200134c:	8011883a 	mov	r8,r16
 2001350:	11800f2e 	bgeu	r2,r6,2001390 <_realloc_r+0x204>
 2001354:	90800017 	ldw	r2,0(r18)
 2001358:	ba000404 	addi	r8,r23,16
 200135c:	91000204 	addi	r4,r18,8
 2001360:	b8800215 	stw	r2,8(r23)
 2001364:	90c00117 	ldw	r3,4(r18)
 2001368:	008006c4 	movi	r2,27
 200136c:	b8c00315 	stw	r3,12(r23)
 2001370:	1180072e 	bgeu	r2,r6,2001390 <_realloc_r+0x204>
 2001374:	90c00217 	ldw	r3,8(r18)
 2001378:	ba000604 	addi	r8,r23,24
 200137c:	91000404 	addi	r4,r18,16
 2001380:	b8c00415 	stw	r3,16(r23)
 2001384:	90800317 	ldw	r2,12(r18)
 2001388:	b8800515 	stw	r2,20(r23)
 200138c:	3140e726 	beq	r6,r5,200172c <_realloc_r+0x5a0>
 2001390:	20800017 	ldw	r2,0(r4)
 2001394:	dd000017 	ldw	r20,0(sp)
 2001398:	b80f883a 	mov	r7,r23
 200139c:	40800015 	stw	r2,0(r8)
 20013a0:	20c00117 	ldw	r3,4(r4)
 20013a4:	40c00115 	stw	r3,4(r8)
 20013a8:	20800217 	ldw	r2,8(r4)
 20013ac:	40800215 	stw	r2,8(r8)
 20013b0:	003f9706 	br	2001210 <_realloc_r+0x84>
 20013b4:	98a9883a 	add	r20,r19,r2
 20013b8:	a1c01f16 	blt	r20,r7,2001438 <_realloc_r+0x2ac>
 20013bc:	b8c00317 	ldw	r3,12(r23)
 20013c0:	b8800217 	ldw	r2,8(r23)
 20013c4:	99bfff04 	addi	r6,r19,-4
 20013c8:	01400904 	movi	r5,36
 20013cc:	b82b883a 	mov	r21,r23
 20013d0:	18800215 	stw	r2,8(r3)
 20013d4:	10c00315 	stw	r3,12(r2)
 20013d8:	bc000204 	addi	r16,r23,8
 20013dc:	2980c336 	bltu	r5,r6,20016ec <_realloc_r+0x560>
 20013e0:	008004c4 	movi	r2,19
 20013e4:	9009883a 	mov	r4,r18
 20013e8:	8011883a 	mov	r8,r16
 20013ec:	11800f2e 	bgeu	r2,r6,200142c <_realloc_r+0x2a0>
 20013f0:	90800017 	ldw	r2,0(r18)
 20013f4:	ba000404 	addi	r8,r23,16
 20013f8:	91000204 	addi	r4,r18,8
 20013fc:	b8800215 	stw	r2,8(r23)
 2001400:	90c00117 	ldw	r3,4(r18)
 2001404:	008006c4 	movi	r2,27
 2001408:	b8c00315 	stw	r3,12(r23)
 200140c:	1180072e 	bgeu	r2,r6,200142c <_realloc_r+0x2a0>
 2001410:	90c00217 	ldw	r3,8(r18)
 2001414:	ba000604 	addi	r8,r23,24
 2001418:	91000404 	addi	r4,r18,16
 200141c:	b8c00415 	stw	r3,16(r23)
 2001420:	90800317 	ldw	r2,12(r18)
 2001424:	b8800515 	stw	r2,20(r23)
 2001428:	3140c726 	beq	r6,r5,2001748 <_realloc_r+0x5bc>
 200142c:	20800017 	ldw	r2,0(r4)
 2001430:	b80f883a 	mov	r7,r23
 2001434:	003fd906 	br	200139c <_realloc_r+0x210>
 2001438:	880b883a 	mov	r5,r17
 200143c:	b009883a 	mov	r4,r22
 2001440:	20007e80 	call	20007e8 <_malloc_r>
 2001444:	1023883a 	mov	r17,r2
 2001448:	10002526 	beq	r2,zero,20014e0 <_realloc_r+0x354>
 200144c:	80800117 	ldw	r2,4(r16)
 2001450:	00ffff84 	movi	r3,-2
 2001454:	893ffe04 	addi	r4,r17,-8
 2001458:	10c4703a 	and	r2,r2,r3
 200145c:	8085883a 	add	r2,r16,r2
 2001460:	20809526 	beq	r4,r2,20016b8 <_realloc_r+0x52c>
 2001464:	99bfff04 	addi	r6,r19,-4
 2001468:	01c00904 	movi	r7,36
 200146c:	39804536 	bltu	r7,r6,2001584 <_realloc_r+0x3f8>
 2001470:	008004c4 	movi	r2,19
 2001474:	9009883a 	mov	r4,r18
 2001478:	880b883a 	mov	r5,r17
 200147c:	11800f2e 	bgeu	r2,r6,20014bc <_realloc_r+0x330>
 2001480:	90800017 	ldw	r2,0(r18)
 2001484:	89400204 	addi	r5,r17,8
 2001488:	91000204 	addi	r4,r18,8
 200148c:	88800015 	stw	r2,0(r17)
 2001490:	90c00117 	ldw	r3,4(r18)
 2001494:	008006c4 	movi	r2,27
 2001498:	88c00115 	stw	r3,4(r17)
 200149c:	1180072e 	bgeu	r2,r6,20014bc <_realloc_r+0x330>
 20014a0:	90c00217 	ldw	r3,8(r18)
 20014a4:	89400404 	addi	r5,r17,16
 20014a8:	91000404 	addi	r4,r18,16
 20014ac:	88c00215 	stw	r3,8(r17)
 20014b0:	90800317 	ldw	r2,12(r18)
 20014b4:	88800315 	stw	r2,12(r17)
 20014b8:	31c09126 	beq	r6,r7,2001700 <_realloc_r+0x574>
 20014bc:	20800017 	ldw	r2,0(r4)
 20014c0:	28800015 	stw	r2,0(r5)
 20014c4:	20c00117 	ldw	r3,4(r4)
 20014c8:	28c00115 	stw	r3,4(r5)
 20014cc:	20800217 	ldw	r2,8(r4)
 20014d0:	28800215 	stw	r2,8(r5)
 20014d4:	900b883a 	mov	r5,r18
 20014d8:	b009883a 	mov	r4,r22
 20014dc:	2001f7c0 	call	2001f7c <_free_r>
 20014e0:	b009883a 	mov	r4,r22
 20014e4:	20032540 	call	2003254 <__malloc_unlock>
 20014e8:	003f5e06 	br	2001264 <_realloc_r+0xd8>
 20014ec:	300b883a 	mov	r5,r6
 20014f0:	dfc00b17 	ldw	ra,44(sp)
 20014f4:	df000a17 	ldw	fp,40(sp)
 20014f8:	ddc00917 	ldw	r23,36(sp)
 20014fc:	dd800817 	ldw	r22,32(sp)
 2001500:	dd400717 	ldw	r21,28(sp)
 2001504:	dd000617 	ldw	r20,24(sp)
 2001508:	dcc00517 	ldw	r19,20(sp)
 200150c:	dc800417 	ldw	r18,16(sp)
 2001510:	dc400317 	ldw	r17,12(sp)
 2001514:	dc000217 	ldw	r16,8(sp)
 2001518:	dec00c04 	addi	sp,sp,48
 200151c:	20007e81 	jmpi	20007e8 <_malloc_r>
 2001520:	38800117 	ldw	r2,4(r7)
 2001524:	e54b883a 	add	r5,fp,r21
 2001528:	31000054 	ori	r4,r6,1
 200152c:	1080004c 	andi	r2,r2,1
 2001530:	1704b03a 	or	r2,r2,fp
 2001534:	38800115 	stw	r2,4(r7)
 2001538:	29000115 	stw	r4,4(r5)
 200153c:	2987883a 	add	r3,r5,r6
 2001540:	18800117 	ldw	r2,4(r3)
 2001544:	29400204 	addi	r5,r5,8
 2001548:	b009883a 	mov	r4,r22
 200154c:	10800054 	ori	r2,r2,1
 2001550:	18800115 	stw	r2,4(r3)
 2001554:	2001f7c0 	call	2001f7c <_free_r>
 2001558:	003f3806 	br	200123c <_realloc_r+0xb0>
 200155c:	000d883a 	mov	r6,zero
 2001560:	0009883a 	mov	r4,zero
 2001564:	003f5d06 	br	20012dc <_realloc_r+0x150>
 2001568:	30c00217 	ldw	r3,8(r6)
 200156c:	30800317 	ldw	r2,12(r6)
 2001570:	800f883a 	mov	r7,r16
 2001574:	84000204 	addi	r16,r16,8
 2001578:	10c00215 	stw	r3,8(r2)
 200157c:	18800315 	stw	r2,12(r3)
 2001580:	003f2306 	br	2001210 <_realloc_r+0x84>
 2001584:	8809883a 	mov	r4,r17
 2001588:	900b883a 	mov	r5,r18
 200158c:	20010ac0 	call	20010ac <memmove>
 2001590:	003fd006 	br	20014d4 <_realloc_r+0x348>
 2001594:	30800117 	ldw	r2,4(r6)
 2001598:	e0c00404 	addi	r3,fp,16
 200159c:	1108703a 	and	r4,r2,r4
 20015a0:	9905883a 	add	r2,r19,r4
 20015a4:	10ff4d16 	blt	r2,r3,20012dc <_realloc_r+0x150>
 20015a8:	1705c83a 	sub	r2,r2,fp
 20015ac:	870b883a 	add	r5,r16,fp
 20015b0:	10800054 	ori	r2,r2,1
 20015b4:	28800115 	stw	r2,4(r5)
 20015b8:	80c00117 	ldw	r3,4(r16)
 20015bc:	00808034 	movhi	r2,512
 20015c0:	1096cf04 	addi	r2,r2,23356
 20015c4:	b009883a 	mov	r4,r22
 20015c8:	18c0004c 	andi	r3,r3,1
 20015cc:	e0c6b03a 	or	r3,fp,r3
 20015d0:	11400215 	stw	r5,8(r2)
 20015d4:	80c00115 	stw	r3,4(r16)
 20015d8:	20032540 	call	2003254 <__malloc_unlock>
 20015dc:	84400204 	addi	r17,r16,8
 20015e0:	003f2006 	br	2001264 <_realloc_r+0xd8>
 20015e4:	98a9883a 	add	r20,r19,r2
 20015e8:	2509883a 	add	r4,r4,r20
 20015ec:	e0800404 	addi	r2,fp,16
 20015f0:	d9000115 	stw	r4,4(sp)
 20015f4:	20bf7016 	blt	r4,r2,20013b8 <_realloc_r+0x22c>
 20015f8:	b8c00317 	ldw	r3,12(r23)
 20015fc:	b8800217 	ldw	r2,8(r23)
 2001600:	99bfff04 	addi	r6,r19,-4
 2001604:	01400904 	movi	r5,36
 2001608:	18800215 	stw	r2,8(r3)
 200160c:	10c00315 	stw	r3,12(r2)
 2001610:	bc400204 	addi	r17,r23,8
 2001614:	29804136 	bltu	r5,r6,200171c <_realloc_r+0x590>
 2001618:	008004c4 	movi	r2,19
 200161c:	9009883a 	mov	r4,r18
 2001620:	880f883a 	mov	r7,r17
 2001624:	11800f2e 	bgeu	r2,r6,2001664 <_realloc_r+0x4d8>
 2001628:	90800017 	ldw	r2,0(r18)
 200162c:	b9c00404 	addi	r7,r23,16
 2001630:	91000204 	addi	r4,r18,8
 2001634:	b8800215 	stw	r2,8(r23)
 2001638:	90c00117 	ldw	r3,4(r18)
 200163c:	008006c4 	movi	r2,27
 2001640:	b8c00315 	stw	r3,12(r23)
 2001644:	1180072e 	bgeu	r2,r6,2001664 <_realloc_r+0x4d8>
 2001648:	90c00217 	ldw	r3,8(r18)
 200164c:	b9c00604 	addi	r7,r23,24
 2001650:	91000404 	addi	r4,r18,16
 2001654:	b8c00415 	stw	r3,16(r23)
 2001658:	90800317 	ldw	r2,12(r18)
 200165c:	b8800515 	stw	r2,20(r23)
 2001660:	31404026 	beq	r6,r5,2001764 <_realloc_r+0x5d8>
 2001664:	20800017 	ldw	r2,0(r4)
 2001668:	38800015 	stw	r2,0(r7)
 200166c:	20c00117 	ldw	r3,4(r4)
 2001670:	38c00115 	stw	r3,4(r7)
 2001674:	20800217 	ldw	r2,8(r4)
 2001678:	38800215 	stw	r2,8(r7)
 200167c:	d8c00117 	ldw	r3,4(sp)
 2001680:	bf0b883a 	add	r5,r23,fp
 2001684:	b009883a 	mov	r4,r22
 2001688:	1f05c83a 	sub	r2,r3,fp
 200168c:	10800054 	ori	r2,r2,1
 2001690:	28800115 	stw	r2,4(r5)
 2001694:	b8c00117 	ldw	r3,4(r23)
 2001698:	00808034 	movhi	r2,512
 200169c:	1096cf04 	addi	r2,r2,23356
 20016a0:	11400215 	stw	r5,8(r2)
 20016a4:	18c0004c 	andi	r3,r3,1
 20016a8:	e0c6b03a 	or	r3,fp,r3
 20016ac:	b8c00115 	stw	r3,4(r23)
 20016b0:	20032540 	call	2003254 <__malloc_unlock>
 20016b4:	003eeb06 	br	2001264 <_realloc_r+0xd8>
 20016b8:	20800117 	ldw	r2,4(r4)
 20016bc:	00ffff04 	movi	r3,-4
 20016c0:	800f883a 	mov	r7,r16
 20016c4:	10c4703a 	and	r2,r2,r3
 20016c8:	98a9883a 	add	r20,r19,r2
 20016cc:	84000204 	addi	r16,r16,8
 20016d0:	003ecf06 	br	2001210 <_realloc_r+0x84>
 20016d4:	900b883a 	mov	r5,r18
 20016d8:	8009883a 	mov	r4,r16
 20016dc:	20010ac0 	call	20010ac <memmove>
 20016e0:	dd000017 	ldw	r20,0(sp)
 20016e4:	b80f883a 	mov	r7,r23
 20016e8:	003ec906 	br	2001210 <_realloc_r+0x84>
 20016ec:	900b883a 	mov	r5,r18
 20016f0:	8009883a 	mov	r4,r16
 20016f4:	20010ac0 	call	20010ac <memmove>
 20016f8:	b80f883a 	mov	r7,r23
 20016fc:	003ec406 	br	2001210 <_realloc_r+0x84>
 2001700:	90c00417 	ldw	r3,16(r18)
 2001704:	89400604 	addi	r5,r17,24
 2001708:	91000604 	addi	r4,r18,24
 200170c:	88c00415 	stw	r3,16(r17)
 2001710:	90800517 	ldw	r2,20(r18)
 2001714:	88800515 	stw	r2,20(r17)
 2001718:	003f6806 	br	20014bc <_realloc_r+0x330>
 200171c:	900b883a 	mov	r5,r18
 2001720:	8809883a 	mov	r4,r17
 2001724:	20010ac0 	call	20010ac <memmove>
 2001728:	003fd406 	br	200167c <_realloc_r+0x4f0>
 200172c:	90c00417 	ldw	r3,16(r18)
 2001730:	91000604 	addi	r4,r18,24
 2001734:	ba000804 	addi	r8,r23,32
 2001738:	b8c00615 	stw	r3,24(r23)
 200173c:	90800517 	ldw	r2,20(r18)
 2001740:	b8800715 	stw	r2,28(r23)
 2001744:	003f1206 	br	2001390 <_realloc_r+0x204>
 2001748:	90c00417 	ldw	r3,16(r18)
 200174c:	91000604 	addi	r4,r18,24
 2001750:	ba000804 	addi	r8,r23,32
 2001754:	b8c00615 	stw	r3,24(r23)
 2001758:	90800517 	ldw	r2,20(r18)
 200175c:	b8800715 	stw	r2,28(r23)
 2001760:	003f3206 	br	200142c <_realloc_r+0x2a0>
 2001764:	90c00417 	ldw	r3,16(r18)
 2001768:	91000604 	addi	r4,r18,24
 200176c:	b9c00804 	addi	r7,r23,32
 2001770:	b8c00615 	stw	r3,24(r23)
 2001774:	90800517 	ldw	r2,20(r18)
 2001778:	b8800715 	stw	r2,28(r23)
 200177c:	003fb906 	br	2001664 <_realloc_r+0x4d8>

02001780 <_sbrk_r>:
 2001780:	defffd04 	addi	sp,sp,-12
 2001784:	dc000015 	stw	r16,0(sp)
 2001788:	04008074 	movhi	r16,513
 200178c:	84233804 	addi	r16,r16,-29472
 2001790:	dc400115 	stw	r17,4(sp)
 2001794:	80000015 	stw	zero,0(r16)
 2001798:	2023883a 	mov	r17,r4
 200179c:	2809883a 	mov	r4,r5
 20017a0:	dfc00215 	stw	ra,8(sp)
 20017a4:	20034700 	call	2003470 <sbrk>
 20017a8:	1007883a 	mov	r3,r2
 20017ac:	00bfffc4 	movi	r2,-1
 20017b0:	18800626 	beq	r3,r2,20017cc <_sbrk_r+0x4c>
 20017b4:	1805883a 	mov	r2,r3
 20017b8:	dfc00217 	ldw	ra,8(sp)
 20017bc:	dc400117 	ldw	r17,4(sp)
 20017c0:	dc000017 	ldw	r16,0(sp)
 20017c4:	dec00304 	addi	sp,sp,12
 20017c8:	f800283a 	ret
 20017cc:	80800017 	ldw	r2,0(r16)
 20017d0:	103ff826 	beq	r2,zero,20017b4 <_sbrk_r+0x34>
 20017d4:	88800015 	stw	r2,0(r17)
 20017d8:	1805883a 	mov	r2,r3
 20017dc:	dfc00217 	ldw	ra,8(sp)
 20017e0:	dc400117 	ldw	r17,4(sp)
 20017e4:	dc000017 	ldw	r16,0(sp)
 20017e8:	dec00304 	addi	sp,sp,12
 20017ec:	f800283a 	ret

020017f0 <__swsetup_r>:
 20017f0:	00808034 	movhi	r2,512
 20017f4:	109c7404 	addi	r2,r2,29136
 20017f8:	10c00017 	ldw	r3,0(r2)
 20017fc:	defffd04 	addi	sp,sp,-12
 2001800:	dc400115 	stw	r17,4(sp)
 2001804:	dc000015 	stw	r16,0(sp)
 2001808:	dfc00215 	stw	ra,8(sp)
 200180c:	2023883a 	mov	r17,r4
 2001810:	2821883a 	mov	r16,r5
 2001814:	18000226 	beq	r3,zero,2001820 <__swsetup_r+0x30>
 2001818:	18800e17 	ldw	r2,56(r3)
 200181c:	10001f26 	beq	r2,zero,200189c <__swsetup_r+0xac>
 2001820:	8100030b 	ldhu	r4,12(r16)
 2001824:	2080020c 	andi	r2,r4,8
 2001828:	10002826 	beq	r2,zero,20018cc <__swsetup_r+0xdc>
 200182c:	81400417 	ldw	r5,16(r16)
 2001830:	28001d26 	beq	r5,zero,20018a8 <__swsetup_r+0xb8>
 2001834:	2080004c 	andi	r2,r4,1
 2001838:	1005003a 	cmpeq	r2,r2,zero
 200183c:	10000b26 	beq	r2,zero,200186c <__swsetup_r+0x7c>
 2001840:	2080008c 	andi	r2,r4,2
 2001844:	10001226 	beq	r2,zero,2001890 <__swsetup_r+0xa0>
 2001848:	0005883a 	mov	r2,zero
 200184c:	80800215 	stw	r2,8(r16)
 2001850:	28000b26 	beq	r5,zero,2001880 <__swsetup_r+0x90>
 2001854:	0005883a 	mov	r2,zero
 2001858:	dfc00217 	ldw	ra,8(sp)
 200185c:	dc400117 	ldw	r17,4(sp)
 2001860:	dc000017 	ldw	r16,0(sp)
 2001864:	dec00304 	addi	sp,sp,12
 2001868:	f800283a 	ret
 200186c:	80800517 	ldw	r2,20(r16)
 2001870:	80000215 	stw	zero,8(r16)
 2001874:	0085c83a 	sub	r2,zero,r2
 2001878:	80800615 	stw	r2,24(r16)
 200187c:	283ff51e 	bne	r5,zero,2001854 <__swsetup_r+0x64>
 2001880:	2080200c 	andi	r2,r4,128
 2001884:	103ff326 	beq	r2,zero,2001854 <__swsetup_r+0x64>
 2001888:	00bfffc4 	movi	r2,-1
 200188c:	003ff206 	br	2001858 <__swsetup_r+0x68>
 2001890:	80800517 	ldw	r2,20(r16)
 2001894:	80800215 	stw	r2,8(r16)
 2001898:	003fed06 	br	2001850 <__swsetup_r+0x60>
 200189c:	1809883a 	mov	r4,r3
 20018a0:	2001bc40 	call	2001bc4 <__sinit>
 20018a4:	003fde06 	br	2001820 <__swsetup_r+0x30>
 20018a8:	20c0a00c 	andi	r3,r4,640
 20018ac:	00808004 	movi	r2,512
 20018b0:	18bfe026 	beq	r3,r2,2001834 <__swsetup_r+0x44>
 20018b4:	8809883a 	mov	r4,r17
 20018b8:	800b883a 	mov	r5,r16
 20018bc:	20024100 	call	2002410 <__smakebuf_r>
 20018c0:	8100030b 	ldhu	r4,12(r16)
 20018c4:	81400417 	ldw	r5,16(r16)
 20018c8:	003fda06 	br	2001834 <__swsetup_r+0x44>
 20018cc:	2080040c 	andi	r2,r4,16
 20018d0:	103fed26 	beq	r2,zero,2001888 <__swsetup_r+0x98>
 20018d4:	2080010c 	andi	r2,r4,4
 20018d8:	10001226 	beq	r2,zero,2001924 <__swsetup_r+0x134>
 20018dc:	81400c17 	ldw	r5,48(r16)
 20018e0:	28000526 	beq	r5,zero,20018f8 <__swsetup_r+0x108>
 20018e4:	80801004 	addi	r2,r16,64
 20018e8:	28800226 	beq	r5,r2,20018f4 <__swsetup_r+0x104>
 20018ec:	8809883a 	mov	r4,r17
 20018f0:	2001f7c0 	call	2001f7c <_free_r>
 20018f4:	80000c15 	stw	zero,48(r16)
 20018f8:	8080030b 	ldhu	r2,12(r16)
 20018fc:	81400417 	ldw	r5,16(r16)
 2001900:	80000115 	stw	zero,4(r16)
 2001904:	10bff6cc 	andi	r2,r2,65499
 2001908:	8080030d 	sth	r2,12(r16)
 200190c:	81400015 	stw	r5,0(r16)
 2001910:	8080030b 	ldhu	r2,12(r16)
 2001914:	10800214 	ori	r2,r2,8
 2001918:	113fffcc 	andi	r4,r2,65535
 200191c:	8080030d 	sth	r2,12(r16)
 2001920:	003fc306 	br	2001830 <__swsetup_r+0x40>
 2001924:	81400417 	ldw	r5,16(r16)
 2001928:	003ff906 	br	2001910 <__swsetup_r+0x120>

0200192c <_fflush_r>:
 200192c:	defffb04 	addi	sp,sp,-20
 2001930:	dcc00315 	stw	r19,12(sp)
 2001934:	dc800215 	stw	r18,8(sp)
 2001938:	dfc00415 	stw	ra,16(sp)
 200193c:	dc400115 	stw	r17,4(sp)
 2001940:	dc000015 	stw	r16,0(sp)
 2001944:	2027883a 	mov	r19,r4
 2001948:	2825883a 	mov	r18,r5
 200194c:	20000226 	beq	r4,zero,2001958 <_fflush_r+0x2c>
 2001950:	20800e17 	ldw	r2,56(r4)
 2001954:	10005626 	beq	r2,zero,2001ab0 <_fflush_r+0x184>
 2001958:	9100030b 	ldhu	r4,12(r18)
 200195c:	20ffffcc 	andi	r3,r4,65535
 2001960:	18e0001c 	xori	r3,r3,32768
 2001964:	18e00004 	addi	r3,r3,-32768
 2001968:	1880020c 	andi	r2,r3,8
 200196c:	1000261e 	bne	r2,zero,2001a08 <_fflush_r+0xdc>
 2001970:	90c00117 	ldw	r3,4(r18)
 2001974:	20820014 	ori	r2,r4,2048
 2001978:	9080030d 	sth	r2,12(r18)
 200197c:	1009883a 	mov	r4,r2
 2001980:	00c0400e 	bge	zero,r3,2001a84 <_fflush_r+0x158>
 2001984:	92000a17 	ldw	r8,40(r18)
 2001988:	40004026 	beq	r8,zero,2001a8c <_fflush_r+0x160>
 200198c:	2084000c 	andi	r2,r4,4096
 2001990:	10005326 	beq	r2,zero,2001ae0 <_fflush_r+0x1b4>
 2001994:	94001417 	ldw	r16,80(r18)
 2001998:	9080030b 	ldhu	r2,12(r18)
 200199c:	1080010c 	andi	r2,r2,4
 20019a0:	1000481e 	bne	r2,zero,2001ac4 <_fflush_r+0x198>
 20019a4:	91400717 	ldw	r5,28(r18)
 20019a8:	9809883a 	mov	r4,r19
 20019ac:	800d883a 	mov	r6,r16
 20019b0:	000f883a 	mov	r7,zero
 20019b4:	403ee83a 	callr	r8
 20019b8:	8080261e 	bne	r16,r2,2001a54 <_fflush_r+0x128>
 20019bc:	9080030b 	ldhu	r2,12(r18)
 20019c0:	91000417 	ldw	r4,16(r18)
 20019c4:	90000115 	stw	zero,4(r18)
 20019c8:	10bdffcc 	andi	r2,r2,63487
 20019cc:	10ffffcc 	andi	r3,r2,65535
 20019d0:	18c4000c 	andi	r3,r3,4096
 20019d4:	9080030d 	sth	r2,12(r18)
 20019d8:	91000015 	stw	r4,0(r18)
 20019dc:	18002b26 	beq	r3,zero,2001a8c <_fflush_r+0x160>
 20019e0:	0007883a 	mov	r3,zero
 20019e4:	1805883a 	mov	r2,r3
 20019e8:	94001415 	stw	r16,80(r18)
 20019ec:	dfc00417 	ldw	ra,16(sp)
 20019f0:	dcc00317 	ldw	r19,12(sp)
 20019f4:	dc800217 	ldw	r18,8(sp)
 20019f8:	dc400117 	ldw	r17,4(sp)
 20019fc:	dc000017 	ldw	r16,0(sp)
 2001a00:	dec00504 	addi	sp,sp,20
 2001a04:	f800283a 	ret
 2001a08:	94400417 	ldw	r17,16(r18)
 2001a0c:	88001f26 	beq	r17,zero,2001a8c <_fflush_r+0x160>
 2001a10:	90800017 	ldw	r2,0(r18)
 2001a14:	18c000cc 	andi	r3,r3,3
 2001a18:	94400015 	stw	r17,0(r18)
 2001a1c:	1461c83a 	sub	r16,r2,r17
 2001a20:	18002526 	beq	r3,zero,2001ab8 <_fflush_r+0x18c>
 2001a24:	0005883a 	mov	r2,zero
 2001a28:	90800215 	stw	r2,8(r18)
 2001a2c:	0400170e 	bge	zero,r16,2001a8c <_fflush_r+0x160>
 2001a30:	90c00917 	ldw	r3,36(r18)
 2001a34:	91400717 	ldw	r5,28(r18)
 2001a38:	880d883a 	mov	r6,r17
 2001a3c:	800f883a 	mov	r7,r16
 2001a40:	9809883a 	mov	r4,r19
 2001a44:	183ee83a 	callr	r3
 2001a48:	88a3883a 	add	r17,r17,r2
 2001a4c:	80a1c83a 	sub	r16,r16,r2
 2001a50:	00bff616 	blt	zero,r2,2001a2c <_fflush_r+0x100>
 2001a54:	9080030b 	ldhu	r2,12(r18)
 2001a58:	00ffffc4 	movi	r3,-1
 2001a5c:	10801014 	ori	r2,r2,64
 2001a60:	9080030d 	sth	r2,12(r18)
 2001a64:	1805883a 	mov	r2,r3
 2001a68:	dfc00417 	ldw	ra,16(sp)
 2001a6c:	dcc00317 	ldw	r19,12(sp)
 2001a70:	dc800217 	ldw	r18,8(sp)
 2001a74:	dc400117 	ldw	r17,4(sp)
 2001a78:	dc000017 	ldw	r16,0(sp)
 2001a7c:	dec00504 	addi	sp,sp,20
 2001a80:	f800283a 	ret
 2001a84:	90800f17 	ldw	r2,60(r18)
 2001a88:	00bfbe16 	blt	zero,r2,2001984 <_fflush_r+0x58>
 2001a8c:	0007883a 	mov	r3,zero
 2001a90:	1805883a 	mov	r2,r3
 2001a94:	dfc00417 	ldw	ra,16(sp)
 2001a98:	dcc00317 	ldw	r19,12(sp)
 2001a9c:	dc800217 	ldw	r18,8(sp)
 2001aa0:	dc400117 	ldw	r17,4(sp)
 2001aa4:	dc000017 	ldw	r16,0(sp)
 2001aa8:	dec00504 	addi	sp,sp,20
 2001aac:	f800283a 	ret
 2001ab0:	2001bc40 	call	2001bc4 <__sinit>
 2001ab4:	003fa806 	br	2001958 <_fflush_r+0x2c>
 2001ab8:	90800517 	ldw	r2,20(r18)
 2001abc:	90800215 	stw	r2,8(r18)
 2001ac0:	003fda06 	br	2001a2c <_fflush_r+0x100>
 2001ac4:	90800117 	ldw	r2,4(r18)
 2001ac8:	90c00c17 	ldw	r3,48(r18)
 2001acc:	80a1c83a 	sub	r16,r16,r2
 2001ad0:	183fb426 	beq	r3,zero,20019a4 <_fflush_r+0x78>
 2001ad4:	90800f17 	ldw	r2,60(r18)
 2001ad8:	80a1c83a 	sub	r16,r16,r2
 2001adc:	003fb106 	br	20019a4 <_fflush_r+0x78>
 2001ae0:	91400717 	ldw	r5,28(r18)
 2001ae4:	9809883a 	mov	r4,r19
 2001ae8:	000d883a 	mov	r6,zero
 2001aec:	01c00044 	movi	r7,1
 2001af0:	403ee83a 	callr	r8
 2001af4:	1021883a 	mov	r16,r2
 2001af8:	00bfffc4 	movi	r2,-1
 2001afc:	80800226 	beq	r16,r2,2001b08 <_fflush_r+0x1dc>
 2001b00:	92000a17 	ldw	r8,40(r18)
 2001b04:	003fa406 	br	2001998 <_fflush_r+0x6c>
 2001b08:	98c00017 	ldw	r3,0(r19)
 2001b0c:	00800744 	movi	r2,29
 2001b10:	18bfde26 	beq	r3,r2,2001a8c <_fflush_r+0x160>
 2001b14:	9080030b 	ldhu	r2,12(r18)
 2001b18:	8007883a 	mov	r3,r16
 2001b1c:	10801014 	ori	r2,r2,64
 2001b20:	9080030d 	sth	r2,12(r18)
 2001b24:	003fcf06 	br	2001a64 <_fflush_r+0x138>

02001b28 <fflush>:
 2001b28:	01408034 	movhi	r5,512
 2001b2c:	29464b04 	addi	r5,r5,6444
 2001b30:	2007883a 	mov	r3,r4
 2001b34:	20000526 	beq	r4,zero,2001b4c <fflush+0x24>
 2001b38:	00808034 	movhi	r2,512
 2001b3c:	109c7404 	addi	r2,r2,29136
 2001b40:	11000017 	ldw	r4,0(r2)
 2001b44:	180b883a 	mov	r5,r3
 2001b48:	200192c1 	jmpi	200192c <_fflush_r>
 2001b4c:	00808034 	movhi	r2,512
 2001b50:	109c7504 	addi	r2,r2,29140
 2001b54:	11000017 	ldw	r4,0(r2)
 2001b58:	20022901 	jmpi	2002290 <_fwalk_reent>

02001b5c <std>:
 2001b5c:	00808034 	movhi	r2,512
 2001b60:	10898f04 	addi	r2,r2,9788
 2001b64:	20800b15 	stw	r2,44(r4)
 2001b68:	00808034 	movhi	r2,512
 2001b6c:	1089ca04 	addi	r2,r2,10024
 2001b70:	20800815 	stw	r2,32(r4)
 2001b74:	00c08034 	movhi	r3,512
 2001b78:	18c9ab04 	addi	r3,r3,9900
 2001b7c:	00808034 	movhi	r2,512
 2001b80:	10899104 	addi	r2,r2,9796
 2001b84:	2140030d 	sth	r5,12(r4)
 2001b88:	2180038d 	sth	r6,14(r4)
 2001b8c:	20c00915 	stw	r3,36(r4)
 2001b90:	20800a15 	stw	r2,40(r4)
 2001b94:	20000015 	stw	zero,0(r4)
 2001b98:	20000115 	stw	zero,4(r4)
 2001b9c:	20000215 	stw	zero,8(r4)
 2001ba0:	20000415 	stw	zero,16(r4)
 2001ba4:	20000515 	stw	zero,20(r4)
 2001ba8:	20000615 	stw	zero,24(r4)
 2001bac:	21000715 	stw	r4,28(r4)
 2001bb0:	f800283a 	ret

02001bb4 <__sfp_lock_acquire>:
 2001bb4:	f800283a 	ret

02001bb8 <__sfp_lock_release>:
 2001bb8:	f800283a 	ret

02001bbc <__sinit_lock_acquire>:
 2001bbc:	f800283a 	ret

02001bc0 <__sinit_lock_release>:
 2001bc0:	f800283a 	ret

02001bc4 <__sinit>:
 2001bc4:	20800e17 	ldw	r2,56(r4)
 2001bc8:	defffd04 	addi	sp,sp,-12
 2001bcc:	dc400115 	stw	r17,4(sp)
 2001bd0:	dc000015 	stw	r16,0(sp)
 2001bd4:	dfc00215 	stw	ra,8(sp)
 2001bd8:	04400044 	movi	r17,1
 2001bdc:	01400104 	movi	r5,4
 2001be0:	000d883a 	mov	r6,zero
 2001be4:	2021883a 	mov	r16,r4
 2001be8:	2200bb04 	addi	r8,r4,748
 2001bec:	200f883a 	mov	r7,r4
 2001bf0:	10000526 	beq	r2,zero,2001c08 <__sinit+0x44>
 2001bf4:	dfc00217 	ldw	ra,8(sp)
 2001bf8:	dc400117 	ldw	r17,4(sp)
 2001bfc:	dc000017 	ldw	r16,0(sp)
 2001c00:	dec00304 	addi	sp,sp,12
 2001c04:	f800283a 	ret
 2001c08:	21000117 	ldw	r4,4(r4)
 2001c0c:	00808034 	movhi	r2,512
 2001c10:	10872a04 	addi	r2,r2,7336
 2001c14:	00c000c4 	movi	r3,3
 2001c18:	80800f15 	stw	r2,60(r16)
 2001c1c:	80c0b915 	stw	r3,740(r16)
 2001c20:	8200ba15 	stw	r8,744(r16)
 2001c24:	84400e15 	stw	r17,56(r16)
 2001c28:	8000b815 	stw	zero,736(r16)
 2001c2c:	2001b5c0 	call	2001b5c <std>
 2001c30:	81000217 	ldw	r4,8(r16)
 2001c34:	880d883a 	mov	r6,r17
 2001c38:	800f883a 	mov	r7,r16
 2001c3c:	01400284 	movi	r5,10
 2001c40:	2001b5c0 	call	2001b5c <std>
 2001c44:	81000317 	ldw	r4,12(r16)
 2001c48:	800f883a 	mov	r7,r16
 2001c4c:	01400484 	movi	r5,18
 2001c50:	01800084 	movi	r6,2
 2001c54:	dfc00217 	ldw	ra,8(sp)
 2001c58:	dc400117 	ldw	r17,4(sp)
 2001c5c:	dc000017 	ldw	r16,0(sp)
 2001c60:	dec00304 	addi	sp,sp,12
 2001c64:	2001b5c1 	jmpi	2001b5c <std>

02001c68 <__fp_lock>:
 2001c68:	0005883a 	mov	r2,zero
 2001c6c:	f800283a 	ret

02001c70 <__fp_unlock>:
 2001c70:	0005883a 	mov	r2,zero
 2001c74:	f800283a 	ret

02001c78 <__fp_unlock_all>:
 2001c78:	00808034 	movhi	r2,512
 2001c7c:	109c7404 	addi	r2,r2,29136
 2001c80:	11000017 	ldw	r4,0(r2)
 2001c84:	01408034 	movhi	r5,512
 2001c88:	29471c04 	addi	r5,r5,7280
 2001c8c:	20023581 	jmpi	2002358 <_fwalk>

02001c90 <__fp_lock_all>:
 2001c90:	00808034 	movhi	r2,512
 2001c94:	109c7404 	addi	r2,r2,29136
 2001c98:	11000017 	ldw	r4,0(r2)
 2001c9c:	01408034 	movhi	r5,512
 2001ca0:	29471a04 	addi	r5,r5,7272
 2001ca4:	20023581 	jmpi	2002358 <_fwalk>

02001ca8 <_cleanup_r>:
 2001ca8:	01408034 	movhi	r5,512
 2001cac:	294a6004 	addi	r5,r5,10624
 2001cb0:	20023581 	jmpi	2002358 <_fwalk>

02001cb4 <_cleanup>:
 2001cb4:	00808034 	movhi	r2,512
 2001cb8:	109c7504 	addi	r2,r2,29140
 2001cbc:	11000017 	ldw	r4,0(r2)
 2001cc0:	2001ca81 	jmpi	2001ca8 <_cleanup_r>

02001cc4 <__sfmoreglue>:
 2001cc4:	defffc04 	addi	sp,sp,-16
 2001cc8:	dc000015 	stw	r16,0(sp)
 2001ccc:	2821883a 	mov	r16,r5
 2001cd0:	dc400115 	stw	r17,4(sp)
 2001cd4:	01401704 	movi	r5,92
 2001cd8:	2023883a 	mov	r17,r4
 2001cdc:	8009883a 	mov	r4,r16
 2001ce0:	dfc00315 	stw	ra,12(sp)
 2001ce4:	dcc00215 	stw	r19,8(sp)
 2001ce8:	2002b680 	call	2002b68 <__mulsi3>
 2001cec:	11400304 	addi	r5,r2,12
 2001cf0:	8809883a 	mov	r4,r17
 2001cf4:	1027883a 	mov	r19,r2
 2001cf8:	20007e80 	call	20007e8 <_malloc_r>
 2001cfc:	10c00304 	addi	r3,r2,12
 2001d00:	1023883a 	mov	r17,r2
 2001d04:	1809883a 	mov	r4,r3
 2001d08:	980d883a 	mov	r6,r19
 2001d0c:	000b883a 	mov	r5,zero
 2001d10:	10000b26 	beq	r2,zero,2001d40 <__sfmoreglue+0x7c>
 2001d14:	14000115 	stw	r16,4(r2)
 2001d18:	10c00215 	stw	r3,8(r2)
 2001d1c:	10000015 	stw	zero,0(r2)
 2001d20:	20025a40 	call	20025a4 <memset>
 2001d24:	8805883a 	mov	r2,r17
 2001d28:	dfc00317 	ldw	ra,12(sp)
 2001d2c:	dcc00217 	ldw	r19,8(sp)
 2001d30:	dc400117 	ldw	r17,4(sp)
 2001d34:	dc000017 	ldw	r16,0(sp)
 2001d38:	dec00404 	addi	sp,sp,16
 2001d3c:	f800283a 	ret
 2001d40:	0023883a 	mov	r17,zero
 2001d44:	8805883a 	mov	r2,r17
 2001d48:	dfc00317 	ldw	ra,12(sp)
 2001d4c:	dcc00217 	ldw	r19,8(sp)
 2001d50:	dc400117 	ldw	r17,4(sp)
 2001d54:	dc000017 	ldw	r16,0(sp)
 2001d58:	dec00404 	addi	sp,sp,16
 2001d5c:	f800283a 	ret

02001d60 <__sfp>:
 2001d60:	defffd04 	addi	sp,sp,-12
 2001d64:	00808034 	movhi	r2,512
 2001d68:	109c7504 	addi	r2,r2,29140
 2001d6c:	dc000015 	stw	r16,0(sp)
 2001d70:	14000017 	ldw	r16,0(r2)
 2001d74:	dc400115 	stw	r17,4(sp)
 2001d78:	dfc00215 	stw	ra,8(sp)
 2001d7c:	80800e17 	ldw	r2,56(r16)
 2001d80:	2023883a 	mov	r17,r4
 2001d84:	10002626 	beq	r2,zero,2001e20 <__sfp+0xc0>
 2001d88:	8400b804 	addi	r16,r16,736
 2001d8c:	80800117 	ldw	r2,4(r16)
 2001d90:	81000217 	ldw	r4,8(r16)
 2001d94:	10ffffc4 	addi	r3,r2,-1
 2001d98:	18000916 	blt	r3,zero,2001dc0 <__sfp+0x60>
 2001d9c:	2080030f 	ldh	r2,12(r4)
 2001da0:	10000b26 	beq	r2,zero,2001dd0 <__sfp+0x70>
 2001da4:	017fffc4 	movi	r5,-1
 2001da8:	00000206 	br	2001db4 <__sfp+0x54>
 2001dac:	2080030f 	ldh	r2,12(r4)
 2001db0:	10000726 	beq	r2,zero,2001dd0 <__sfp+0x70>
 2001db4:	18ffffc4 	addi	r3,r3,-1
 2001db8:	21001704 	addi	r4,r4,92
 2001dbc:	197ffb1e 	bne	r3,r5,2001dac <__sfp+0x4c>
 2001dc0:	80800017 	ldw	r2,0(r16)
 2001dc4:	10001926 	beq	r2,zero,2001e2c <__sfp+0xcc>
 2001dc8:	1021883a 	mov	r16,r2
 2001dcc:	003fef06 	br	2001d8c <__sfp+0x2c>
 2001dd0:	00bfffc4 	movi	r2,-1
 2001dd4:	00c00044 	movi	r3,1
 2001dd8:	2080038d 	sth	r2,14(r4)
 2001ddc:	20c0030d 	sth	r3,12(r4)
 2001de0:	20000015 	stw	zero,0(r4)
 2001de4:	20000215 	stw	zero,8(r4)
 2001de8:	20000115 	stw	zero,4(r4)
 2001dec:	20000415 	stw	zero,16(r4)
 2001df0:	20000515 	stw	zero,20(r4)
 2001df4:	20000615 	stw	zero,24(r4)
 2001df8:	20000c15 	stw	zero,48(r4)
 2001dfc:	20000d15 	stw	zero,52(r4)
 2001e00:	20001115 	stw	zero,68(r4)
 2001e04:	20001215 	stw	zero,72(r4)
 2001e08:	2005883a 	mov	r2,r4
 2001e0c:	dfc00217 	ldw	ra,8(sp)
 2001e10:	dc400117 	ldw	r17,4(sp)
 2001e14:	dc000017 	ldw	r16,0(sp)
 2001e18:	dec00304 	addi	sp,sp,12
 2001e1c:	f800283a 	ret
 2001e20:	8009883a 	mov	r4,r16
 2001e24:	2001bc40 	call	2001bc4 <__sinit>
 2001e28:	003fd706 	br	2001d88 <__sfp+0x28>
 2001e2c:	8809883a 	mov	r4,r17
 2001e30:	01400104 	movi	r5,4
 2001e34:	2001cc40 	call	2001cc4 <__sfmoreglue>
 2001e38:	80800015 	stw	r2,0(r16)
 2001e3c:	103fe21e 	bne	r2,zero,2001dc8 <__sfp+0x68>
 2001e40:	00800304 	movi	r2,12
 2001e44:	0009883a 	mov	r4,zero
 2001e48:	88800015 	stw	r2,0(r17)
 2001e4c:	003fee06 	br	2001e08 <__sfp+0xa8>

02001e50 <_malloc_trim_r>:
 2001e50:	defffb04 	addi	sp,sp,-20
 2001e54:	dcc00315 	stw	r19,12(sp)
 2001e58:	04c08034 	movhi	r19,512
 2001e5c:	9cd6cf04 	addi	r19,r19,23356
 2001e60:	dc800215 	stw	r18,8(sp)
 2001e64:	dc400115 	stw	r17,4(sp)
 2001e68:	dc000015 	stw	r16,0(sp)
 2001e6c:	2823883a 	mov	r17,r5
 2001e70:	2025883a 	mov	r18,r4
 2001e74:	dfc00415 	stw	ra,16(sp)
 2001e78:	20032340 	call	2003234 <__malloc_lock>
 2001e7c:	98800217 	ldw	r2,8(r19)
 2001e80:	9009883a 	mov	r4,r18
 2001e84:	000b883a 	mov	r5,zero
 2001e88:	10c00117 	ldw	r3,4(r2)
 2001e8c:	00bfff04 	movi	r2,-4
 2001e90:	18a0703a 	and	r16,r3,r2
 2001e94:	8463c83a 	sub	r17,r16,r17
 2001e98:	8c43fbc4 	addi	r17,r17,4079
 2001e9c:	8822d33a 	srli	r17,r17,12
 2001ea0:	0083ffc4 	movi	r2,4095
 2001ea4:	8c7fffc4 	addi	r17,r17,-1
 2001ea8:	8822933a 	slli	r17,r17,12
 2001eac:	1440060e 	bge	r2,r17,2001ec8 <_malloc_trim_r+0x78>
 2001eb0:	20017800 	call	2001780 <_sbrk_r>
 2001eb4:	98c00217 	ldw	r3,8(r19)
 2001eb8:	9009883a 	mov	r4,r18
 2001ebc:	044bc83a 	sub	r5,zero,r17
 2001ec0:	80c7883a 	add	r3,r16,r3
 2001ec4:	10c00926 	beq	r2,r3,2001eec <_malloc_trim_r+0x9c>
 2001ec8:	20032540 	call	2003254 <__malloc_unlock>
 2001ecc:	0005883a 	mov	r2,zero
 2001ed0:	dfc00417 	ldw	ra,16(sp)
 2001ed4:	dcc00317 	ldw	r19,12(sp)
 2001ed8:	dc800217 	ldw	r18,8(sp)
 2001edc:	dc400117 	ldw	r17,4(sp)
 2001ee0:	dc000017 	ldw	r16,0(sp)
 2001ee4:	dec00504 	addi	sp,sp,20
 2001ee8:	f800283a 	ret
 2001eec:	9009883a 	mov	r4,r18
 2001ef0:	20017800 	call	2001780 <_sbrk_r>
 2001ef4:	844dc83a 	sub	r6,r16,r17
 2001ef8:	00ffffc4 	movi	r3,-1
 2001efc:	9009883a 	mov	r4,r18
 2001f00:	000b883a 	mov	r5,zero
 2001f04:	01c08074 	movhi	r7,513
 2001f08:	39e33f04 	addi	r7,r7,-29444
 2001f0c:	31800054 	ori	r6,r6,1
 2001f10:	10c00926 	beq	r2,r3,2001f38 <_malloc_trim_r+0xe8>
 2001f14:	38800017 	ldw	r2,0(r7)
 2001f18:	98c00217 	ldw	r3,8(r19)
 2001f1c:	9009883a 	mov	r4,r18
 2001f20:	1445c83a 	sub	r2,r2,r17
 2001f24:	38800015 	stw	r2,0(r7)
 2001f28:	19800115 	stw	r6,4(r3)
 2001f2c:	20032540 	call	2003254 <__malloc_unlock>
 2001f30:	00800044 	movi	r2,1
 2001f34:	003fe606 	br	2001ed0 <_malloc_trim_r+0x80>
 2001f38:	20017800 	call	2001780 <_sbrk_r>
 2001f3c:	99800217 	ldw	r6,8(r19)
 2001f40:	100f883a 	mov	r7,r2
 2001f44:	9009883a 	mov	r4,r18
 2001f48:	1187c83a 	sub	r3,r2,r6
 2001f4c:	008003c4 	movi	r2,15
 2001f50:	19400054 	ori	r5,r3,1
 2001f54:	10ffdc0e 	bge	r2,r3,2001ec8 <_malloc_trim_r+0x78>
 2001f58:	00808034 	movhi	r2,512
 2001f5c:	109c7704 	addi	r2,r2,29148
 2001f60:	10c00017 	ldw	r3,0(r2)
 2001f64:	00808074 	movhi	r2,513
 2001f68:	10a33f04 	addi	r2,r2,-29444
 2001f6c:	31400115 	stw	r5,4(r6)
 2001f70:	38c7c83a 	sub	r3,r7,r3
 2001f74:	10c00015 	stw	r3,0(r2)
 2001f78:	003fd306 	br	2001ec8 <_malloc_trim_r+0x78>

02001f7c <_free_r>:
 2001f7c:	defffd04 	addi	sp,sp,-12
 2001f80:	dc400115 	stw	r17,4(sp)
 2001f84:	dc000015 	stw	r16,0(sp)
 2001f88:	dfc00215 	stw	ra,8(sp)
 2001f8c:	2821883a 	mov	r16,r5
 2001f90:	2023883a 	mov	r17,r4
 2001f94:	28005a26 	beq	r5,zero,2002100 <_free_r+0x184>
 2001f98:	20032340 	call	2003234 <__malloc_lock>
 2001f9c:	823ffe04 	addi	r8,r16,-8
 2001fa0:	41400117 	ldw	r5,4(r8)
 2001fa4:	00bfff84 	movi	r2,-2
 2001fa8:	02808034 	movhi	r10,512
 2001fac:	5296cf04 	addi	r10,r10,23356
 2001fb0:	288e703a 	and	r7,r5,r2
 2001fb4:	41cd883a 	add	r6,r8,r7
 2001fb8:	30c00117 	ldw	r3,4(r6)
 2001fbc:	51000217 	ldw	r4,8(r10)
 2001fc0:	00bfff04 	movi	r2,-4
 2001fc4:	1892703a 	and	r9,r3,r2
 2001fc8:	5017883a 	mov	r11,r10
 2001fcc:	31006726 	beq	r6,r4,200216c <_free_r+0x1f0>
 2001fd0:	2880004c 	andi	r2,r5,1
 2001fd4:	1005003a 	cmpeq	r2,r2,zero
 2001fd8:	32400115 	stw	r9,4(r6)
 2001fdc:	10001a1e 	bne	r2,zero,2002048 <_free_r+0xcc>
 2001fe0:	000b883a 	mov	r5,zero
 2001fe4:	3247883a 	add	r3,r6,r9
 2001fe8:	18800117 	ldw	r2,4(r3)
 2001fec:	1080004c 	andi	r2,r2,1
 2001ff0:	1000231e 	bne	r2,zero,2002080 <_free_r+0x104>
 2001ff4:	280ac03a 	cmpne	r5,r5,zero
 2001ff8:	3a4f883a 	add	r7,r7,r9
 2001ffc:	2800451e 	bne	r5,zero,2002114 <_free_r+0x198>
 2002000:	31000217 	ldw	r4,8(r6)
 2002004:	00808034 	movhi	r2,512
 2002008:	1096d104 	addi	r2,r2,23364
 200200c:	20807b26 	beq	r4,r2,20021fc <_free_r+0x280>
 2002010:	30800317 	ldw	r2,12(r6)
 2002014:	3a07883a 	add	r3,r7,r8
 2002018:	19c00015 	stw	r7,0(r3)
 200201c:	11000215 	stw	r4,8(r2)
 2002020:	20800315 	stw	r2,12(r4)
 2002024:	38800054 	ori	r2,r7,1
 2002028:	40800115 	stw	r2,4(r8)
 200202c:	28001a26 	beq	r5,zero,2002098 <_free_r+0x11c>
 2002030:	8809883a 	mov	r4,r17
 2002034:	dfc00217 	ldw	ra,8(sp)
 2002038:	dc400117 	ldw	r17,4(sp)
 200203c:	dc000017 	ldw	r16,0(sp)
 2002040:	dec00304 	addi	sp,sp,12
 2002044:	20032541 	jmpi	2003254 <__malloc_unlock>
 2002048:	80bffe17 	ldw	r2,-8(r16)
 200204c:	50c00204 	addi	r3,r10,8
 2002050:	4091c83a 	sub	r8,r8,r2
 2002054:	41000217 	ldw	r4,8(r8)
 2002058:	388f883a 	add	r7,r7,r2
 200205c:	20c06126 	beq	r4,r3,20021e4 <_free_r+0x268>
 2002060:	40800317 	ldw	r2,12(r8)
 2002064:	3247883a 	add	r3,r6,r9
 2002068:	000b883a 	mov	r5,zero
 200206c:	11000215 	stw	r4,8(r2)
 2002070:	20800315 	stw	r2,12(r4)
 2002074:	18800117 	ldw	r2,4(r3)
 2002078:	1080004c 	andi	r2,r2,1
 200207c:	103fdd26 	beq	r2,zero,2001ff4 <_free_r+0x78>
 2002080:	38800054 	ori	r2,r7,1
 2002084:	3a07883a 	add	r3,r7,r8
 2002088:	280ac03a 	cmpne	r5,r5,zero
 200208c:	40800115 	stw	r2,4(r8)
 2002090:	19c00015 	stw	r7,0(r3)
 2002094:	283fe61e 	bne	r5,zero,2002030 <_free_r+0xb4>
 2002098:	00807fc4 	movi	r2,511
 200209c:	11c01f2e 	bgeu	r2,r7,200211c <_free_r+0x1a0>
 20020a0:	3806d27a 	srli	r3,r7,9
 20020a4:	1800481e 	bne	r3,zero,20021c8 <_free_r+0x24c>
 20020a8:	3804d0fa 	srli	r2,r7,3
 20020ac:	100690fa 	slli	r3,r2,3
 20020b0:	1acd883a 	add	r6,r3,r11
 20020b4:	31400217 	ldw	r5,8(r6)
 20020b8:	31405926 	beq	r6,r5,2002220 <_free_r+0x2a4>
 20020bc:	28800117 	ldw	r2,4(r5)
 20020c0:	00ffff04 	movi	r3,-4
 20020c4:	10c4703a 	and	r2,r2,r3
 20020c8:	3880022e 	bgeu	r7,r2,20020d4 <_free_r+0x158>
 20020cc:	29400217 	ldw	r5,8(r5)
 20020d0:	317ffa1e 	bne	r6,r5,20020bc <_free_r+0x140>
 20020d4:	29800317 	ldw	r6,12(r5)
 20020d8:	41800315 	stw	r6,12(r8)
 20020dc:	41400215 	stw	r5,8(r8)
 20020e0:	8809883a 	mov	r4,r17
 20020e4:	2a000315 	stw	r8,12(r5)
 20020e8:	32000215 	stw	r8,8(r6)
 20020ec:	dfc00217 	ldw	ra,8(sp)
 20020f0:	dc400117 	ldw	r17,4(sp)
 20020f4:	dc000017 	ldw	r16,0(sp)
 20020f8:	dec00304 	addi	sp,sp,12
 20020fc:	20032541 	jmpi	2003254 <__malloc_unlock>
 2002100:	dfc00217 	ldw	ra,8(sp)
 2002104:	dc400117 	ldw	r17,4(sp)
 2002108:	dc000017 	ldw	r16,0(sp)
 200210c:	dec00304 	addi	sp,sp,12
 2002110:	f800283a 	ret
 2002114:	31000217 	ldw	r4,8(r6)
 2002118:	003fbd06 	br	2002010 <_free_r+0x94>
 200211c:	3806d0fa 	srli	r3,r7,3
 2002120:	00800044 	movi	r2,1
 2002124:	51400117 	ldw	r5,4(r10)
 2002128:	180890fa 	slli	r4,r3,3
 200212c:	1807d0ba 	srai	r3,r3,2
 2002130:	22c9883a 	add	r4,r4,r11
 2002134:	21800217 	ldw	r6,8(r4)
 2002138:	10c4983a 	sll	r2,r2,r3
 200213c:	41000315 	stw	r4,12(r8)
 2002140:	41800215 	stw	r6,8(r8)
 2002144:	288ab03a 	or	r5,r5,r2
 2002148:	22000215 	stw	r8,8(r4)
 200214c:	8809883a 	mov	r4,r17
 2002150:	51400115 	stw	r5,4(r10)
 2002154:	32000315 	stw	r8,12(r6)
 2002158:	dfc00217 	ldw	ra,8(sp)
 200215c:	dc400117 	ldw	r17,4(sp)
 2002160:	dc000017 	ldw	r16,0(sp)
 2002164:	dec00304 	addi	sp,sp,12
 2002168:	20032541 	jmpi	2003254 <__malloc_unlock>
 200216c:	2880004c 	andi	r2,r5,1
 2002170:	3a4d883a 	add	r6,r7,r9
 2002174:	1000071e 	bne	r2,zero,2002194 <_free_r+0x218>
 2002178:	80bffe17 	ldw	r2,-8(r16)
 200217c:	4091c83a 	sub	r8,r8,r2
 2002180:	41000317 	ldw	r4,12(r8)
 2002184:	40c00217 	ldw	r3,8(r8)
 2002188:	308d883a 	add	r6,r6,r2
 200218c:	20c00215 	stw	r3,8(r4)
 2002190:	19000315 	stw	r4,12(r3)
 2002194:	00808034 	movhi	r2,512
 2002198:	109c7604 	addi	r2,r2,29144
 200219c:	11000017 	ldw	r4,0(r2)
 20021a0:	30c00054 	ori	r3,r6,1
 20021a4:	52000215 	stw	r8,8(r10)
 20021a8:	40c00115 	stw	r3,4(r8)
 20021ac:	313fa036 	bltu	r6,r4,2002030 <_free_r+0xb4>
 20021b0:	00808074 	movhi	r2,513
 20021b4:	10a33504 	addi	r2,r2,-29484
 20021b8:	11400017 	ldw	r5,0(r2)
 20021bc:	8809883a 	mov	r4,r17
 20021c0:	2001e500 	call	2001e50 <_malloc_trim_r>
 20021c4:	003f9a06 	br	2002030 <_free_r+0xb4>
 20021c8:	00800104 	movi	r2,4
 20021cc:	10c0072e 	bgeu	r2,r3,20021ec <_free_r+0x270>
 20021d0:	00800504 	movi	r2,20
 20021d4:	10c01936 	bltu	r2,r3,200223c <_free_r+0x2c0>
 20021d8:	188016c4 	addi	r2,r3,91
 20021dc:	100690fa 	slli	r3,r2,3
 20021e0:	003fb306 	br	20020b0 <_free_r+0x134>
 20021e4:	01400044 	movi	r5,1
 20021e8:	003f7e06 	br	2001fe4 <_free_r+0x68>
 20021ec:	3804d1ba 	srli	r2,r7,6
 20021f0:	10800e04 	addi	r2,r2,56
 20021f4:	100690fa 	slli	r3,r2,3
 20021f8:	003fad06 	br	20020b0 <_free_r+0x134>
 20021fc:	22000315 	stw	r8,12(r4)
 2002200:	22000215 	stw	r8,8(r4)
 2002204:	3a05883a 	add	r2,r7,r8
 2002208:	38c00054 	ori	r3,r7,1
 200220c:	11c00015 	stw	r7,0(r2)
 2002210:	41000215 	stw	r4,8(r8)
 2002214:	40c00115 	stw	r3,4(r8)
 2002218:	41000315 	stw	r4,12(r8)
 200221c:	003f8406 	br	2002030 <_free_r+0xb4>
 2002220:	1005d0ba 	srai	r2,r2,2
 2002224:	00c00044 	movi	r3,1
 2002228:	51000117 	ldw	r4,4(r10)
 200222c:	1886983a 	sll	r3,r3,r2
 2002230:	20c8b03a 	or	r4,r4,r3
 2002234:	51000115 	stw	r4,4(r10)
 2002238:	003fa706 	br	20020d8 <_free_r+0x15c>
 200223c:	00801504 	movi	r2,84
 2002240:	10c00436 	bltu	r2,r3,2002254 <_free_r+0x2d8>
 2002244:	3804d33a 	srli	r2,r7,12
 2002248:	10801b84 	addi	r2,r2,110
 200224c:	100690fa 	slli	r3,r2,3
 2002250:	003f9706 	br	20020b0 <_free_r+0x134>
 2002254:	00805504 	movi	r2,340
 2002258:	10c00436 	bltu	r2,r3,200226c <_free_r+0x2f0>
 200225c:	3804d3fa 	srli	r2,r7,15
 2002260:	10801dc4 	addi	r2,r2,119
 2002264:	100690fa 	slli	r3,r2,3
 2002268:	003f9106 	br	20020b0 <_free_r+0x134>
 200226c:	00815504 	movi	r2,1364
 2002270:	10c0032e 	bgeu	r2,r3,2002280 <_free_r+0x304>
 2002274:	00801f84 	movi	r2,126
 2002278:	00c0fc04 	movi	r3,1008
 200227c:	003f8c06 	br	20020b0 <_free_r+0x134>
 2002280:	3804d4ba 	srli	r2,r7,18
 2002284:	10801f04 	addi	r2,r2,124
 2002288:	100690fa 	slli	r3,r2,3
 200228c:	003f8806 	br	20020b0 <_free_r+0x134>

02002290 <_fwalk_reent>:
 2002290:	defff704 	addi	sp,sp,-36
 2002294:	dcc00315 	stw	r19,12(sp)
 2002298:	24c0b804 	addi	r19,r4,736
 200229c:	dd800615 	stw	r22,24(sp)
 20022a0:	dd400515 	stw	r21,20(sp)
 20022a4:	dfc00815 	stw	ra,32(sp)
 20022a8:	ddc00715 	stw	r23,28(sp)
 20022ac:	dd000415 	stw	r20,16(sp)
 20022b0:	dc800215 	stw	r18,8(sp)
 20022b4:	dc400115 	stw	r17,4(sp)
 20022b8:	dc000015 	stw	r16,0(sp)
 20022bc:	202b883a 	mov	r21,r4
 20022c0:	282d883a 	mov	r22,r5
 20022c4:	2001bb40 	call	2001bb4 <__sfp_lock_acquire>
 20022c8:	98002126 	beq	r19,zero,2002350 <_fwalk_reent+0xc0>
 20022cc:	002f883a 	mov	r23,zero
 20022d0:	9c800117 	ldw	r18,4(r19)
 20022d4:	9c000217 	ldw	r16,8(r19)
 20022d8:	90bfffc4 	addi	r2,r18,-1
 20022dc:	10000d16 	blt	r2,zero,2002314 <_fwalk_reent+0x84>
 20022e0:	0023883a 	mov	r17,zero
 20022e4:	053fffc4 	movi	r20,-1
 20022e8:	8080030f 	ldh	r2,12(r16)
 20022ec:	8c400044 	addi	r17,r17,1
 20022f0:	10000626 	beq	r2,zero,200230c <_fwalk_reent+0x7c>
 20022f4:	8080038f 	ldh	r2,14(r16)
 20022f8:	800b883a 	mov	r5,r16
 20022fc:	a809883a 	mov	r4,r21
 2002300:	15000226 	beq	r2,r20,200230c <_fwalk_reent+0x7c>
 2002304:	b03ee83a 	callr	r22
 2002308:	b8aeb03a 	or	r23,r23,r2
 200230c:	84001704 	addi	r16,r16,92
 2002310:	947ff51e 	bne	r18,r17,20022e8 <_fwalk_reent+0x58>
 2002314:	9cc00017 	ldw	r19,0(r19)
 2002318:	983fed1e 	bne	r19,zero,20022d0 <_fwalk_reent+0x40>
 200231c:	2001bb80 	call	2001bb8 <__sfp_lock_release>
 2002320:	b805883a 	mov	r2,r23
 2002324:	dfc00817 	ldw	ra,32(sp)
 2002328:	ddc00717 	ldw	r23,28(sp)
 200232c:	dd800617 	ldw	r22,24(sp)
 2002330:	dd400517 	ldw	r21,20(sp)
 2002334:	dd000417 	ldw	r20,16(sp)
 2002338:	dcc00317 	ldw	r19,12(sp)
 200233c:	dc800217 	ldw	r18,8(sp)
 2002340:	dc400117 	ldw	r17,4(sp)
 2002344:	dc000017 	ldw	r16,0(sp)
 2002348:	dec00904 	addi	sp,sp,36
 200234c:	f800283a 	ret
 2002350:	002f883a 	mov	r23,zero
 2002354:	003ff106 	br	200231c <_fwalk_reent+0x8c>

02002358 <_fwalk>:
 2002358:	defff804 	addi	sp,sp,-32
 200235c:	dcc00315 	stw	r19,12(sp)
 2002360:	24c0b804 	addi	r19,r4,736
 2002364:	dd400515 	stw	r21,20(sp)
 2002368:	dfc00715 	stw	ra,28(sp)
 200236c:	dd800615 	stw	r22,24(sp)
 2002370:	dd000415 	stw	r20,16(sp)
 2002374:	dc800215 	stw	r18,8(sp)
 2002378:	dc400115 	stw	r17,4(sp)
 200237c:	dc000015 	stw	r16,0(sp)
 2002380:	282b883a 	mov	r21,r5
 2002384:	2001bb40 	call	2001bb4 <__sfp_lock_acquire>
 2002388:	98001f26 	beq	r19,zero,2002408 <_fwalk+0xb0>
 200238c:	002d883a 	mov	r22,zero
 2002390:	9c800117 	ldw	r18,4(r19)
 2002394:	9c000217 	ldw	r16,8(r19)
 2002398:	90bfffc4 	addi	r2,r18,-1
 200239c:	10000c16 	blt	r2,zero,20023d0 <_fwalk+0x78>
 20023a0:	0023883a 	mov	r17,zero
 20023a4:	053fffc4 	movi	r20,-1
 20023a8:	8080030f 	ldh	r2,12(r16)
 20023ac:	8c400044 	addi	r17,r17,1
 20023b0:	10000526 	beq	r2,zero,20023c8 <_fwalk+0x70>
 20023b4:	8080038f 	ldh	r2,14(r16)
 20023b8:	8009883a 	mov	r4,r16
 20023bc:	15000226 	beq	r2,r20,20023c8 <_fwalk+0x70>
 20023c0:	a83ee83a 	callr	r21
 20023c4:	b0acb03a 	or	r22,r22,r2
 20023c8:	84001704 	addi	r16,r16,92
 20023cc:	947ff61e 	bne	r18,r17,20023a8 <_fwalk+0x50>
 20023d0:	9cc00017 	ldw	r19,0(r19)
 20023d4:	983fee1e 	bne	r19,zero,2002390 <_fwalk+0x38>
 20023d8:	2001bb80 	call	2001bb8 <__sfp_lock_release>
 20023dc:	b005883a 	mov	r2,r22
 20023e0:	dfc00717 	ldw	ra,28(sp)
 20023e4:	dd800617 	ldw	r22,24(sp)
 20023e8:	dd400517 	ldw	r21,20(sp)
 20023ec:	dd000417 	ldw	r20,16(sp)
 20023f0:	dcc00317 	ldw	r19,12(sp)
 20023f4:	dc800217 	ldw	r18,8(sp)
 20023f8:	dc400117 	ldw	r17,4(sp)
 20023fc:	dc000017 	ldw	r16,0(sp)
 2002400:	dec00804 	addi	sp,sp,32
 2002404:	f800283a 	ret
 2002408:	002d883a 	mov	r22,zero
 200240c:	003ff206 	br	20023d8 <_fwalk+0x80>

02002410 <__smakebuf_r>:
 2002410:	2880030b 	ldhu	r2,12(r5)
 2002414:	deffed04 	addi	sp,sp,-76
 2002418:	dc401015 	stw	r17,64(sp)
 200241c:	1080008c 	andi	r2,r2,2
 2002420:	dc000f15 	stw	r16,60(sp)
 2002424:	dfc01215 	stw	ra,72(sp)
 2002428:	dc801115 	stw	r18,68(sp)
 200242c:	2821883a 	mov	r16,r5
 2002430:	2023883a 	mov	r17,r4
 2002434:	10000b26 	beq	r2,zero,2002464 <__smakebuf_r+0x54>
 2002438:	28c010c4 	addi	r3,r5,67
 200243c:	00800044 	movi	r2,1
 2002440:	28800515 	stw	r2,20(r5)
 2002444:	28c00415 	stw	r3,16(r5)
 2002448:	28c00015 	stw	r3,0(r5)
 200244c:	dfc01217 	ldw	ra,72(sp)
 2002450:	dc801117 	ldw	r18,68(sp)
 2002454:	dc401017 	ldw	r17,64(sp)
 2002458:	dc000f17 	ldw	r16,60(sp)
 200245c:	dec01304 	addi	sp,sp,76
 2002460:	f800283a 	ret
 2002464:	2940038f 	ldh	r5,14(r5)
 2002468:	28002116 	blt	r5,zero,20024f0 <__smakebuf_r+0xe0>
 200246c:	d80d883a 	mov	r6,sp
 2002470:	20029940 	call	2002994 <_fstat_r>
 2002474:	10001e16 	blt	r2,zero,20024f0 <__smakebuf_r+0xe0>
 2002478:	d8800117 	ldw	r2,4(sp)
 200247c:	00e00014 	movui	r3,32768
 2002480:	113c000c 	andi	r4,r2,61440
 2002484:	20c03126 	beq	r4,r3,200254c <__smakebuf_r+0x13c>
 2002488:	8080030b 	ldhu	r2,12(r16)
 200248c:	00c80004 	movi	r3,8192
 2002490:	10820014 	ori	r2,r2,2048
 2002494:	8080030d 	sth	r2,12(r16)
 2002498:	20c01e26 	beq	r4,r3,2002514 <__smakebuf_r+0x104>
 200249c:	04810004 	movi	r18,1024
 20024a0:	8809883a 	mov	r4,r17
 20024a4:	900b883a 	mov	r5,r18
 20024a8:	20007e80 	call	20007e8 <_malloc_r>
 20024ac:	1009883a 	mov	r4,r2
 20024b0:	10003126 	beq	r2,zero,2002578 <__smakebuf_r+0x168>
 20024b4:	80c0030b 	ldhu	r3,12(r16)
 20024b8:	00808034 	movhi	r2,512
 20024bc:	10872a04 	addi	r2,r2,7336
 20024c0:	88800f15 	stw	r2,60(r17)
 20024c4:	18c02014 	ori	r3,r3,128
 20024c8:	84800515 	stw	r18,20(r16)
 20024cc:	80c0030d 	sth	r3,12(r16)
 20024d0:	81000415 	stw	r4,16(r16)
 20024d4:	81000015 	stw	r4,0(r16)
 20024d8:	dfc01217 	ldw	ra,72(sp)
 20024dc:	dc801117 	ldw	r18,68(sp)
 20024e0:	dc401017 	ldw	r17,64(sp)
 20024e4:	dc000f17 	ldw	r16,60(sp)
 20024e8:	dec01304 	addi	sp,sp,76
 20024ec:	f800283a 	ret
 20024f0:	80c0030b 	ldhu	r3,12(r16)
 20024f4:	1880200c 	andi	r2,r3,128
 20024f8:	10000426 	beq	r2,zero,200250c <__smakebuf_r+0xfc>
 20024fc:	04801004 	movi	r18,64
 2002500:	18820014 	ori	r2,r3,2048
 2002504:	8080030d 	sth	r2,12(r16)
 2002508:	003fe506 	br	20024a0 <__smakebuf_r+0x90>
 200250c:	04810004 	movi	r18,1024
 2002510:	003ffb06 	br	2002500 <__smakebuf_r+0xf0>
 2002514:	8140038f 	ldh	r5,14(r16)
 2002518:	8809883a 	mov	r4,r17
 200251c:	2002a080 	call	2002a08 <_isatty_r>
 2002520:	103fde26 	beq	r2,zero,200249c <__smakebuf_r+0x8c>
 2002524:	8080030b 	ldhu	r2,12(r16)
 2002528:	80c010c4 	addi	r3,r16,67
 200252c:	04810004 	movi	r18,1024
 2002530:	10800054 	ori	r2,r2,1
 2002534:	8080030d 	sth	r2,12(r16)
 2002538:	00800044 	movi	r2,1
 200253c:	80c00415 	stw	r3,16(r16)
 2002540:	80800515 	stw	r2,20(r16)
 2002544:	80c00015 	stw	r3,0(r16)
 2002548:	003fd506 	br	20024a0 <__smakebuf_r+0x90>
 200254c:	80c00a17 	ldw	r3,40(r16)
 2002550:	00808034 	movhi	r2,512
 2002554:	10899104 	addi	r2,r2,9796
 2002558:	18bfcb1e 	bne	r3,r2,2002488 <__smakebuf_r+0x78>
 200255c:	8080030b 	ldhu	r2,12(r16)
 2002560:	00c10004 	movi	r3,1024
 2002564:	1825883a 	mov	r18,r3
 2002568:	10c4b03a 	or	r2,r2,r3
 200256c:	8080030d 	sth	r2,12(r16)
 2002570:	80c01315 	stw	r3,76(r16)
 2002574:	003fca06 	br	20024a0 <__smakebuf_r+0x90>
 2002578:	8100030b 	ldhu	r4,12(r16)
 200257c:	2080800c 	andi	r2,r4,512
 2002580:	103fb21e 	bne	r2,zero,200244c <__smakebuf_r+0x3c>
 2002584:	80c010c4 	addi	r3,r16,67
 2002588:	21000094 	ori	r4,r4,2
 200258c:	00800044 	movi	r2,1
 2002590:	80800515 	stw	r2,20(r16)
 2002594:	8100030d 	sth	r4,12(r16)
 2002598:	80c00415 	stw	r3,16(r16)
 200259c:	80c00015 	stw	r3,0(r16)
 20025a0:	003faa06 	br	200244c <__smakebuf_r+0x3c>

020025a4 <memset>:
 20025a4:	008000c4 	movi	r2,3
 20025a8:	29403fcc 	andi	r5,r5,255
 20025ac:	2007883a 	mov	r3,r4
 20025b0:	1180022e 	bgeu	r2,r6,20025bc <memset+0x18>
 20025b4:	2084703a 	and	r2,r4,r2
 20025b8:	10000826 	beq	r2,zero,20025dc <memset+0x38>
 20025bc:	30000526 	beq	r6,zero,20025d4 <memset+0x30>
 20025c0:	2805883a 	mov	r2,r5
 20025c4:	30cd883a 	add	r6,r6,r3
 20025c8:	18800005 	stb	r2,0(r3)
 20025cc:	18c00044 	addi	r3,r3,1
 20025d0:	19bffd1e 	bne	r3,r6,20025c8 <memset+0x24>
 20025d4:	2005883a 	mov	r2,r4
 20025d8:	f800283a 	ret
 20025dc:	2804923a 	slli	r2,r5,8
 20025e0:	020003c4 	movi	r8,15
 20025e4:	200f883a 	mov	r7,r4
 20025e8:	2884b03a 	or	r2,r5,r2
 20025ec:	1006943a 	slli	r3,r2,16
 20025f0:	10c6b03a 	or	r3,r2,r3
 20025f4:	41800a2e 	bgeu	r8,r6,2002620 <memset+0x7c>
 20025f8:	4005883a 	mov	r2,r8
 20025fc:	31bffc04 	addi	r6,r6,-16
 2002600:	38c00015 	stw	r3,0(r7)
 2002604:	38c00115 	stw	r3,4(r7)
 2002608:	38c00215 	stw	r3,8(r7)
 200260c:	38c00315 	stw	r3,12(r7)
 2002610:	39c00404 	addi	r7,r7,16
 2002614:	11bff936 	bltu	r2,r6,20025fc <memset+0x58>
 2002618:	008000c4 	movi	r2,3
 200261c:	1180052e 	bgeu	r2,r6,2002634 <memset+0x90>
 2002620:	31bfff04 	addi	r6,r6,-4
 2002624:	008000c4 	movi	r2,3
 2002628:	38c00015 	stw	r3,0(r7)
 200262c:	39c00104 	addi	r7,r7,4
 2002630:	11bffb36 	bltu	r2,r6,2002620 <memset+0x7c>
 2002634:	3807883a 	mov	r3,r7
 2002638:	003fe006 	br	20025bc <memset+0x18>

0200263c <__sclose>:
 200263c:	2940038f 	ldh	r5,14(r5)
 2002640:	20028001 	jmpi	2002800 <_close_r>

02002644 <__sseek>:
 2002644:	defffe04 	addi	sp,sp,-8
 2002648:	dc000015 	stw	r16,0(sp)
 200264c:	2821883a 	mov	r16,r5
 2002650:	2940038f 	ldh	r5,14(r5)
 2002654:	dfc00115 	stw	ra,4(sp)
 2002658:	2002a780 	call	2002a78 <_lseek_r>
 200265c:	1007883a 	mov	r3,r2
 2002660:	00bfffc4 	movi	r2,-1
 2002664:	18800926 	beq	r3,r2,200268c <__sseek+0x48>
 2002668:	8080030b 	ldhu	r2,12(r16)
 200266c:	80c01415 	stw	r3,80(r16)
 2002670:	10840014 	ori	r2,r2,4096
 2002674:	8080030d 	sth	r2,12(r16)
 2002678:	1805883a 	mov	r2,r3
 200267c:	dfc00117 	ldw	ra,4(sp)
 2002680:	dc000017 	ldw	r16,0(sp)
 2002684:	dec00204 	addi	sp,sp,8
 2002688:	f800283a 	ret
 200268c:	8080030b 	ldhu	r2,12(r16)
 2002690:	10bbffcc 	andi	r2,r2,61439
 2002694:	8080030d 	sth	r2,12(r16)
 2002698:	1805883a 	mov	r2,r3
 200269c:	dfc00117 	ldw	ra,4(sp)
 20026a0:	dc000017 	ldw	r16,0(sp)
 20026a4:	dec00204 	addi	sp,sp,8
 20026a8:	f800283a 	ret

020026ac <__swrite>:
 20026ac:	2880030b 	ldhu	r2,12(r5)
 20026b0:	defffb04 	addi	sp,sp,-20
 20026b4:	dcc00315 	stw	r19,12(sp)
 20026b8:	1080400c 	andi	r2,r2,256
 20026bc:	dc800215 	stw	r18,8(sp)
 20026c0:	dc400115 	stw	r17,4(sp)
 20026c4:	dc000015 	stw	r16,0(sp)
 20026c8:	3027883a 	mov	r19,r6
 20026cc:	3825883a 	mov	r18,r7
 20026d0:	dfc00415 	stw	ra,16(sp)
 20026d4:	2821883a 	mov	r16,r5
 20026d8:	000d883a 	mov	r6,zero
 20026dc:	01c00084 	movi	r7,2
 20026e0:	2023883a 	mov	r17,r4
 20026e4:	10000226 	beq	r2,zero,20026f0 <__swrite+0x44>
 20026e8:	2940038f 	ldh	r5,14(r5)
 20026ec:	2002a780 	call	2002a78 <_lseek_r>
 20026f0:	8080030b 	ldhu	r2,12(r16)
 20026f4:	8140038f 	ldh	r5,14(r16)
 20026f8:	8809883a 	mov	r4,r17
 20026fc:	10bbffcc 	andi	r2,r2,61439
 2002700:	980d883a 	mov	r6,r19
 2002704:	900f883a 	mov	r7,r18
 2002708:	8080030d 	sth	r2,12(r16)
 200270c:	dfc00417 	ldw	ra,16(sp)
 2002710:	dcc00317 	ldw	r19,12(sp)
 2002714:	dc800217 	ldw	r18,8(sp)
 2002718:	dc400117 	ldw	r17,4(sp)
 200271c:	dc000017 	ldw	r16,0(sp)
 2002720:	dec00504 	addi	sp,sp,20
 2002724:	20027881 	jmpi	2002788 <_write_r>

02002728 <__sread>:
 2002728:	defffe04 	addi	sp,sp,-8
 200272c:	dc000015 	stw	r16,0(sp)
 2002730:	2821883a 	mov	r16,r5
 2002734:	2940038f 	ldh	r5,14(r5)
 2002738:	dfc00115 	stw	ra,4(sp)
 200273c:	2002af00 	call	2002af0 <_read_r>
 2002740:	1007883a 	mov	r3,r2
 2002744:	10000816 	blt	r2,zero,2002768 <__sread+0x40>
 2002748:	80801417 	ldw	r2,80(r16)
 200274c:	10c5883a 	add	r2,r2,r3
 2002750:	80801415 	stw	r2,80(r16)
 2002754:	1805883a 	mov	r2,r3
 2002758:	dfc00117 	ldw	ra,4(sp)
 200275c:	dc000017 	ldw	r16,0(sp)
 2002760:	dec00204 	addi	sp,sp,8
 2002764:	f800283a 	ret
 2002768:	8080030b 	ldhu	r2,12(r16)
 200276c:	10bbffcc 	andi	r2,r2,61439
 2002770:	8080030d 	sth	r2,12(r16)
 2002774:	1805883a 	mov	r2,r3
 2002778:	dfc00117 	ldw	ra,4(sp)
 200277c:	dc000017 	ldw	r16,0(sp)
 2002780:	dec00204 	addi	sp,sp,8
 2002784:	f800283a 	ret

02002788 <_write_r>:
 2002788:	defffd04 	addi	sp,sp,-12
 200278c:	dc000015 	stw	r16,0(sp)
 2002790:	04008074 	movhi	r16,513
 2002794:	84233804 	addi	r16,r16,-29472
 2002798:	dc400115 	stw	r17,4(sp)
 200279c:	80000015 	stw	zero,0(r16)
 20027a0:	2023883a 	mov	r17,r4
 20027a4:	2809883a 	mov	r4,r5
 20027a8:	300b883a 	mov	r5,r6
 20027ac:	380d883a 	mov	r6,r7
 20027b0:	dfc00215 	stw	ra,8(sp)
 20027b4:	200352c0 	call	200352c <write>
 20027b8:	1007883a 	mov	r3,r2
 20027bc:	00bfffc4 	movi	r2,-1
 20027c0:	18800626 	beq	r3,r2,20027dc <_write_r+0x54>
 20027c4:	1805883a 	mov	r2,r3
 20027c8:	dfc00217 	ldw	ra,8(sp)
 20027cc:	dc400117 	ldw	r17,4(sp)
 20027d0:	dc000017 	ldw	r16,0(sp)
 20027d4:	dec00304 	addi	sp,sp,12
 20027d8:	f800283a 	ret
 20027dc:	80800017 	ldw	r2,0(r16)
 20027e0:	103ff826 	beq	r2,zero,20027c4 <_write_r+0x3c>
 20027e4:	88800015 	stw	r2,0(r17)
 20027e8:	1805883a 	mov	r2,r3
 20027ec:	dfc00217 	ldw	ra,8(sp)
 20027f0:	dc400117 	ldw	r17,4(sp)
 20027f4:	dc000017 	ldw	r16,0(sp)
 20027f8:	dec00304 	addi	sp,sp,12
 20027fc:	f800283a 	ret

02002800 <_close_r>:
 2002800:	defffd04 	addi	sp,sp,-12
 2002804:	dc000015 	stw	r16,0(sp)
 2002808:	04008074 	movhi	r16,513
 200280c:	84233804 	addi	r16,r16,-29472
 2002810:	dc400115 	stw	r17,4(sp)
 2002814:	80000015 	stw	zero,0(r16)
 2002818:	2023883a 	mov	r17,r4
 200281c:	2809883a 	mov	r4,r5
 2002820:	dfc00215 	stw	ra,8(sp)
 2002824:	2002ba00 	call	2002ba0 <close>
 2002828:	1007883a 	mov	r3,r2
 200282c:	00bfffc4 	movi	r2,-1
 2002830:	18800626 	beq	r3,r2,200284c <_close_r+0x4c>
 2002834:	1805883a 	mov	r2,r3
 2002838:	dfc00217 	ldw	ra,8(sp)
 200283c:	dc400117 	ldw	r17,4(sp)
 2002840:	dc000017 	ldw	r16,0(sp)
 2002844:	dec00304 	addi	sp,sp,12
 2002848:	f800283a 	ret
 200284c:	80800017 	ldw	r2,0(r16)
 2002850:	103ff826 	beq	r2,zero,2002834 <_close_r+0x34>
 2002854:	88800015 	stw	r2,0(r17)
 2002858:	1805883a 	mov	r2,r3
 200285c:	dfc00217 	ldw	ra,8(sp)
 2002860:	dc400117 	ldw	r17,4(sp)
 2002864:	dc000017 	ldw	r16,0(sp)
 2002868:	dec00304 	addi	sp,sp,12
 200286c:	f800283a 	ret

02002870 <_fclose_r>:
 2002870:	defffc04 	addi	sp,sp,-16
 2002874:	dc400115 	stw	r17,4(sp)
 2002878:	dc000015 	stw	r16,0(sp)
 200287c:	dfc00315 	stw	ra,12(sp)
 2002880:	dc800215 	stw	r18,8(sp)
 2002884:	2821883a 	mov	r16,r5
 2002888:	2023883a 	mov	r17,r4
 200288c:	28002926 	beq	r5,zero,2002934 <_fclose_r+0xc4>
 2002890:	2001bb40 	call	2001bb4 <__sfp_lock_acquire>
 2002894:	88000226 	beq	r17,zero,20028a0 <_fclose_r+0x30>
 2002898:	88800e17 	ldw	r2,56(r17)
 200289c:	10002d26 	beq	r2,zero,2002954 <_fclose_r+0xe4>
 20028a0:	8080030f 	ldh	r2,12(r16)
 20028a4:	10002226 	beq	r2,zero,2002930 <_fclose_r+0xc0>
 20028a8:	8809883a 	mov	r4,r17
 20028ac:	800b883a 	mov	r5,r16
 20028b0:	200192c0 	call	200192c <_fflush_r>
 20028b4:	1025883a 	mov	r18,r2
 20028b8:	80800b17 	ldw	r2,44(r16)
 20028bc:	10000426 	beq	r2,zero,20028d0 <_fclose_r+0x60>
 20028c0:	81400717 	ldw	r5,28(r16)
 20028c4:	8809883a 	mov	r4,r17
 20028c8:	103ee83a 	callr	r2
 20028cc:	10002a16 	blt	r2,zero,2002978 <_fclose_r+0x108>
 20028d0:	8080030b 	ldhu	r2,12(r16)
 20028d4:	1080200c 	andi	r2,r2,128
 20028d8:	1000231e 	bne	r2,zero,2002968 <_fclose_r+0xf8>
 20028dc:	81400c17 	ldw	r5,48(r16)
 20028e0:	28000526 	beq	r5,zero,20028f8 <_fclose_r+0x88>
 20028e4:	80801004 	addi	r2,r16,64
 20028e8:	28800226 	beq	r5,r2,20028f4 <_fclose_r+0x84>
 20028ec:	8809883a 	mov	r4,r17
 20028f0:	2001f7c0 	call	2001f7c <_free_r>
 20028f4:	80000c15 	stw	zero,48(r16)
 20028f8:	81401117 	ldw	r5,68(r16)
 20028fc:	28000326 	beq	r5,zero,200290c <_fclose_r+0x9c>
 2002900:	8809883a 	mov	r4,r17
 2002904:	2001f7c0 	call	2001f7c <_free_r>
 2002908:	80001115 	stw	zero,68(r16)
 200290c:	8000030d 	sth	zero,12(r16)
 2002910:	2001bb80 	call	2001bb8 <__sfp_lock_release>
 2002914:	9005883a 	mov	r2,r18
 2002918:	dfc00317 	ldw	ra,12(sp)
 200291c:	dc800217 	ldw	r18,8(sp)
 2002920:	dc400117 	ldw	r17,4(sp)
 2002924:	dc000017 	ldw	r16,0(sp)
 2002928:	dec00404 	addi	sp,sp,16
 200292c:	f800283a 	ret
 2002930:	2001bb80 	call	2001bb8 <__sfp_lock_release>
 2002934:	0025883a 	mov	r18,zero
 2002938:	9005883a 	mov	r2,r18
 200293c:	dfc00317 	ldw	ra,12(sp)
 2002940:	dc800217 	ldw	r18,8(sp)
 2002944:	dc400117 	ldw	r17,4(sp)
 2002948:	dc000017 	ldw	r16,0(sp)
 200294c:	dec00404 	addi	sp,sp,16
 2002950:	f800283a 	ret
 2002954:	8809883a 	mov	r4,r17
 2002958:	2001bc40 	call	2001bc4 <__sinit>
 200295c:	8080030f 	ldh	r2,12(r16)
 2002960:	103fd11e 	bne	r2,zero,20028a8 <_fclose_r+0x38>
 2002964:	003ff206 	br	2002930 <_fclose_r+0xc0>
 2002968:	81400417 	ldw	r5,16(r16)
 200296c:	8809883a 	mov	r4,r17
 2002970:	2001f7c0 	call	2001f7c <_free_r>
 2002974:	003fd906 	br	20028dc <_fclose_r+0x6c>
 2002978:	04bfffc4 	movi	r18,-1
 200297c:	003fd406 	br	20028d0 <_fclose_r+0x60>

02002980 <fclose>:
 2002980:	00808034 	movhi	r2,512
 2002984:	109c7404 	addi	r2,r2,29136
 2002988:	200b883a 	mov	r5,r4
 200298c:	11000017 	ldw	r4,0(r2)
 2002990:	20028701 	jmpi	2002870 <_fclose_r>

02002994 <_fstat_r>:
 2002994:	defffd04 	addi	sp,sp,-12
 2002998:	dc000015 	stw	r16,0(sp)
 200299c:	04008074 	movhi	r16,513
 20029a0:	84233804 	addi	r16,r16,-29472
 20029a4:	dc400115 	stw	r17,4(sp)
 20029a8:	80000015 	stw	zero,0(r16)
 20029ac:	2023883a 	mov	r17,r4
 20029b0:	2809883a 	mov	r4,r5
 20029b4:	300b883a 	mov	r5,r6
 20029b8:	dfc00215 	stw	ra,8(sp)
 20029bc:	2002d2c0 	call	2002d2c <fstat>
 20029c0:	1007883a 	mov	r3,r2
 20029c4:	00bfffc4 	movi	r2,-1
 20029c8:	18800626 	beq	r3,r2,20029e4 <_fstat_r+0x50>
 20029cc:	1805883a 	mov	r2,r3
 20029d0:	dfc00217 	ldw	ra,8(sp)
 20029d4:	dc400117 	ldw	r17,4(sp)
 20029d8:	dc000017 	ldw	r16,0(sp)
 20029dc:	dec00304 	addi	sp,sp,12
 20029e0:	f800283a 	ret
 20029e4:	80800017 	ldw	r2,0(r16)
 20029e8:	103ff826 	beq	r2,zero,20029cc <_fstat_r+0x38>
 20029ec:	88800015 	stw	r2,0(r17)
 20029f0:	1805883a 	mov	r2,r3
 20029f4:	dfc00217 	ldw	ra,8(sp)
 20029f8:	dc400117 	ldw	r17,4(sp)
 20029fc:	dc000017 	ldw	r16,0(sp)
 2002a00:	dec00304 	addi	sp,sp,12
 2002a04:	f800283a 	ret

02002a08 <_isatty_r>:
 2002a08:	defffd04 	addi	sp,sp,-12
 2002a0c:	dc000015 	stw	r16,0(sp)
 2002a10:	04008074 	movhi	r16,513
 2002a14:	84233804 	addi	r16,r16,-29472
 2002a18:	dc400115 	stw	r17,4(sp)
 2002a1c:	80000015 	stw	zero,0(r16)
 2002a20:	2023883a 	mov	r17,r4
 2002a24:	2809883a 	mov	r4,r5
 2002a28:	dfc00215 	stw	ra,8(sp)
 2002a2c:	2002e640 	call	2002e64 <isatty>
 2002a30:	1007883a 	mov	r3,r2
 2002a34:	00bfffc4 	movi	r2,-1
 2002a38:	18800626 	beq	r3,r2,2002a54 <_isatty_r+0x4c>
 2002a3c:	1805883a 	mov	r2,r3
 2002a40:	dfc00217 	ldw	ra,8(sp)
 2002a44:	dc400117 	ldw	r17,4(sp)
 2002a48:	dc000017 	ldw	r16,0(sp)
 2002a4c:	dec00304 	addi	sp,sp,12
 2002a50:	f800283a 	ret
 2002a54:	80800017 	ldw	r2,0(r16)
 2002a58:	103ff826 	beq	r2,zero,2002a3c <_isatty_r+0x34>
 2002a5c:	88800015 	stw	r2,0(r17)
 2002a60:	1805883a 	mov	r2,r3
 2002a64:	dfc00217 	ldw	ra,8(sp)
 2002a68:	dc400117 	ldw	r17,4(sp)
 2002a6c:	dc000017 	ldw	r16,0(sp)
 2002a70:	dec00304 	addi	sp,sp,12
 2002a74:	f800283a 	ret

02002a78 <_lseek_r>:
 2002a78:	defffd04 	addi	sp,sp,-12
 2002a7c:	dc000015 	stw	r16,0(sp)
 2002a80:	04008074 	movhi	r16,513
 2002a84:	84233804 	addi	r16,r16,-29472
 2002a88:	dc400115 	stw	r17,4(sp)
 2002a8c:	80000015 	stw	zero,0(r16)
 2002a90:	2023883a 	mov	r17,r4
 2002a94:	2809883a 	mov	r4,r5
 2002a98:	300b883a 	mov	r5,r6
 2002a9c:	380d883a 	mov	r6,r7
 2002aa0:	dfc00215 	stw	ra,8(sp)
 2002aa4:	20030740 	call	2003074 <lseek>
 2002aa8:	1007883a 	mov	r3,r2
 2002aac:	00bfffc4 	movi	r2,-1
 2002ab0:	18800626 	beq	r3,r2,2002acc <_lseek_r+0x54>
 2002ab4:	1805883a 	mov	r2,r3
 2002ab8:	dfc00217 	ldw	ra,8(sp)
 2002abc:	dc400117 	ldw	r17,4(sp)
 2002ac0:	dc000017 	ldw	r16,0(sp)
 2002ac4:	dec00304 	addi	sp,sp,12
 2002ac8:	f800283a 	ret
 2002acc:	80800017 	ldw	r2,0(r16)
 2002ad0:	103ff826 	beq	r2,zero,2002ab4 <_lseek_r+0x3c>
 2002ad4:	88800015 	stw	r2,0(r17)
 2002ad8:	1805883a 	mov	r2,r3
 2002adc:	dfc00217 	ldw	ra,8(sp)
 2002ae0:	dc400117 	ldw	r17,4(sp)
 2002ae4:	dc000017 	ldw	r16,0(sp)
 2002ae8:	dec00304 	addi	sp,sp,12
 2002aec:	f800283a 	ret

02002af0 <_read_r>:
 2002af0:	defffd04 	addi	sp,sp,-12
 2002af4:	dc000015 	stw	r16,0(sp)
 2002af8:	04008074 	movhi	r16,513
 2002afc:	84233804 	addi	r16,r16,-29472
 2002b00:	dc400115 	stw	r17,4(sp)
 2002b04:	80000015 	stw	zero,0(r16)
 2002b08:	2023883a 	mov	r17,r4
 2002b0c:	2809883a 	mov	r4,r5
 2002b10:	300b883a 	mov	r5,r6
 2002b14:	380d883a 	mov	r6,r7
 2002b18:	dfc00215 	stw	ra,8(sp)
 2002b1c:	20032740 	call	2003274 <read>
 2002b20:	1007883a 	mov	r3,r2
 2002b24:	00bfffc4 	movi	r2,-1
 2002b28:	18800626 	beq	r3,r2,2002b44 <_read_r+0x54>
 2002b2c:	1805883a 	mov	r2,r3
 2002b30:	dfc00217 	ldw	ra,8(sp)
 2002b34:	dc400117 	ldw	r17,4(sp)
 2002b38:	dc000017 	ldw	r16,0(sp)
 2002b3c:	dec00304 	addi	sp,sp,12
 2002b40:	f800283a 	ret
 2002b44:	80800017 	ldw	r2,0(r16)
 2002b48:	103ff826 	beq	r2,zero,2002b2c <_read_r+0x3c>
 2002b4c:	88800015 	stw	r2,0(r17)
 2002b50:	1805883a 	mov	r2,r3
 2002b54:	dfc00217 	ldw	ra,8(sp)
 2002b58:	dc400117 	ldw	r17,4(sp)
 2002b5c:	dc000017 	ldw	r16,0(sp)
 2002b60:	dec00304 	addi	sp,sp,12
 2002b64:	f800283a 	ret

02002b68 <__mulsi3>:
 2002b68:	20000a26 	beq	r4,zero,2002b94 <__mulsi3+0x2c>
 2002b6c:	0007883a 	mov	r3,zero
 2002b70:	2080004c 	andi	r2,r4,1
 2002b74:	1005003a 	cmpeq	r2,r2,zero
 2002b78:	2008d07a 	srli	r4,r4,1
 2002b7c:	1000011e 	bne	r2,zero,2002b84 <__mulsi3+0x1c>
 2002b80:	1947883a 	add	r3,r3,r5
 2002b84:	294b883a 	add	r5,r5,r5
 2002b88:	203ff91e 	bne	r4,zero,2002b70 <__mulsi3+0x8>
 2002b8c:	1805883a 	mov	r2,r3
 2002b90:	f800283a 	ret
 2002b94:	0007883a 	mov	r3,zero
 2002b98:	1805883a 	mov	r2,r3
 2002b9c:	f800283a 	ret

02002ba0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2002ba0:	defff804 	addi	sp,sp,-32
 2002ba4:	dfc00715 	stw	ra,28(sp)
 2002ba8:	df000615 	stw	fp,24(sp)
 2002bac:	df000604 	addi	fp,sp,24
 2002bb0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2002bb4:	e0bffc17 	ldw	r2,-16(fp)
 2002bb8:	1004803a 	cmplt	r2,r2,zero
 2002bbc:	1000091e 	bne	r2,zero,2002be4 <close+0x44>
 2002bc0:	e13ffc17 	ldw	r4,-16(fp)
 2002bc4:	01400304 	movi	r5,12
 2002bc8:	2002b680 	call	2002b68 <__mulsi3>
 2002bcc:	1007883a 	mov	r3,r2
 2002bd0:	00808034 	movhi	r2,512
 2002bd4:	1097db04 	addi	r2,r2,24428
 2002bd8:	1887883a 	add	r3,r3,r2
 2002bdc:	e0ffff15 	stw	r3,-4(fp)
 2002be0:	00000106 	br	2002be8 <close+0x48>
 2002be4:	e03fff15 	stw	zero,-4(fp)
 2002be8:	e0bfff17 	ldw	r2,-4(fp)
 2002bec:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 2002bf0:	e0bffb17 	ldw	r2,-20(fp)
 2002bf4:	1005003a 	cmpeq	r2,r2,zero
 2002bf8:	10001d1e 	bne	r2,zero,2002c70 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2002bfc:	e0bffb17 	ldw	r2,-20(fp)
 2002c00:	10800017 	ldw	r2,0(r2)
 2002c04:	10800417 	ldw	r2,16(r2)
 2002c08:	1005003a 	cmpeq	r2,r2,zero
 2002c0c:	1000071e 	bne	r2,zero,2002c2c <close+0x8c>
 2002c10:	e0bffb17 	ldw	r2,-20(fp)
 2002c14:	10800017 	ldw	r2,0(r2)
 2002c18:	10800417 	ldw	r2,16(r2)
 2002c1c:	e13ffb17 	ldw	r4,-20(fp)
 2002c20:	103ee83a 	callr	r2
 2002c24:	e0bffe15 	stw	r2,-8(fp)
 2002c28:	00000106 	br	2002c30 <close+0x90>
 2002c2c:	e03ffe15 	stw	zero,-8(fp)
 2002c30:	e0bffe17 	ldw	r2,-8(fp)
 2002c34:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2002c38:	e13ffc17 	ldw	r4,-16(fp)
 2002c3c:	20033f80 	call	20033f8 <alt_release_fd>
    if (rval < 0)
 2002c40:	e0bffa17 	ldw	r2,-24(fp)
 2002c44:	1004403a 	cmpge	r2,r2,zero
 2002c48:	1000071e 	bne	r2,zero,2002c68 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 2002c4c:	2002ca00 	call	2002ca0 <alt_get_errno>
 2002c50:	e0fffa17 	ldw	r3,-24(fp)
 2002c54:	00c7c83a 	sub	r3,zero,r3
 2002c58:	10c00015 	stw	r3,0(r2)
      return -1;
 2002c5c:	00bfffc4 	movi	r2,-1
 2002c60:	e0bffd15 	stw	r2,-12(fp)
 2002c64:	00000806 	br	2002c88 <close+0xe8>
    }
    return 0;
 2002c68:	e03ffd15 	stw	zero,-12(fp)
 2002c6c:	00000606 	br	2002c88 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2002c70:	2002ca00 	call	2002ca0 <alt_get_errno>
 2002c74:	1007883a 	mov	r3,r2
 2002c78:	00801444 	movi	r2,81
 2002c7c:	18800015 	stw	r2,0(r3)
    return -1;
 2002c80:	00bfffc4 	movi	r2,-1
 2002c84:	e0bffd15 	stw	r2,-12(fp)
 2002c88:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 2002c8c:	e037883a 	mov	sp,fp
 2002c90:	dfc00117 	ldw	ra,4(sp)
 2002c94:	df000017 	ldw	fp,0(sp)
 2002c98:	dec00204 	addi	sp,sp,8
 2002c9c:	f800283a 	ret

02002ca0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002ca0:	defffd04 	addi	sp,sp,-12
 2002ca4:	dfc00215 	stw	ra,8(sp)
 2002ca8:	df000115 	stw	fp,4(sp)
 2002cac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2002cb0:	00808034 	movhi	r2,512
 2002cb4:	109c7d04 	addi	r2,r2,29172
 2002cb8:	10800017 	ldw	r2,0(r2)
 2002cbc:	1005003a 	cmpeq	r2,r2,zero
 2002cc0:	1000061e 	bne	r2,zero,2002cdc <alt_get_errno+0x3c>
 2002cc4:	00808034 	movhi	r2,512
 2002cc8:	109c7d04 	addi	r2,r2,29172
 2002ccc:	10800017 	ldw	r2,0(r2)
 2002cd0:	103ee83a 	callr	r2
 2002cd4:	e0bfff15 	stw	r2,-4(fp)
 2002cd8:	00000306 	br	2002ce8 <alt_get_errno+0x48>
 2002cdc:	00808074 	movhi	r2,513
 2002ce0:	10a33804 	addi	r2,r2,-29472
 2002ce4:	e0bfff15 	stw	r2,-4(fp)
 2002ce8:	e0bfff17 	ldw	r2,-4(fp)
}
 2002cec:	e037883a 	mov	sp,fp
 2002cf0:	dfc00117 	ldw	ra,4(sp)
 2002cf4:	df000017 	ldw	fp,0(sp)
 2002cf8:	dec00204 	addi	sp,sp,8
 2002cfc:	f800283a 	ret

02002d00 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2002d00:	defffc04 	addi	sp,sp,-16
 2002d04:	df000315 	stw	fp,12(sp)
 2002d08:	df000304 	addi	fp,sp,12
 2002d0c:	e13ffd15 	stw	r4,-12(fp)
 2002d10:	e17ffe15 	stw	r5,-8(fp)
 2002d14:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2002d18:	e0bfff17 	ldw	r2,-4(fp)
}
 2002d1c:	e037883a 	mov	sp,fp
 2002d20:	df000017 	ldw	fp,0(sp)
 2002d24:	dec00104 	addi	sp,sp,4
 2002d28:	f800283a 	ret

02002d2c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2002d2c:	defff904 	addi	sp,sp,-28
 2002d30:	dfc00615 	stw	ra,24(sp)
 2002d34:	df000515 	stw	fp,20(sp)
 2002d38:	df000504 	addi	fp,sp,20
 2002d3c:	e13ffc15 	stw	r4,-16(fp)
 2002d40:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2002d44:	e0bffc17 	ldw	r2,-16(fp)
 2002d48:	1004803a 	cmplt	r2,r2,zero
 2002d4c:	1000091e 	bne	r2,zero,2002d74 <fstat+0x48>
 2002d50:	e13ffc17 	ldw	r4,-16(fp)
 2002d54:	01400304 	movi	r5,12
 2002d58:	2002b680 	call	2002b68 <__mulsi3>
 2002d5c:	1007883a 	mov	r3,r2
 2002d60:	00808034 	movhi	r2,512
 2002d64:	1097db04 	addi	r2,r2,24428
 2002d68:	1887883a 	add	r3,r3,r2
 2002d6c:	e0ffff15 	stw	r3,-4(fp)
 2002d70:	00000106 	br	2002d78 <fstat+0x4c>
 2002d74:	e03fff15 	stw	zero,-4(fp)
 2002d78:	e0bfff17 	ldw	r2,-4(fp)
 2002d7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2002d80:	e0bffb17 	ldw	r2,-20(fp)
 2002d84:	1005003a 	cmpeq	r2,r2,zero
 2002d88:	1000121e 	bne	r2,zero,2002dd4 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 2002d8c:	e0bffb17 	ldw	r2,-20(fp)
 2002d90:	10800017 	ldw	r2,0(r2)
 2002d94:	10800817 	ldw	r2,32(r2)
 2002d98:	1005003a 	cmpeq	r2,r2,zero
 2002d9c:	1000081e 	bne	r2,zero,2002dc0 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 2002da0:	e0bffb17 	ldw	r2,-20(fp)
 2002da4:	10800017 	ldw	r2,0(r2)
 2002da8:	10800817 	ldw	r2,32(r2)
 2002dac:	e13ffb17 	ldw	r4,-20(fp)
 2002db0:	e17ffd17 	ldw	r5,-12(fp)
 2002db4:	103ee83a 	callr	r2
 2002db8:	e0bffe15 	stw	r2,-8(fp)
 2002dbc:	00000b06 	br	2002dec <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2002dc0:	e0fffd17 	ldw	r3,-12(fp)
 2002dc4:	00880004 	movi	r2,8192
 2002dc8:	18800115 	stw	r2,4(r3)
      return 0;
 2002dcc:	e03ffe15 	stw	zero,-8(fp)
 2002dd0:	00000606 	br	2002dec <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2002dd4:	2002e040 	call	2002e04 <alt_get_errno>
 2002dd8:	1007883a 	mov	r3,r2
 2002ddc:	00801444 	movi	r2,81
 2002de0:	18800015 	stw	r2,0(r3)
    return -1;
 2002de4:	00bfffc4 	movi	r2,-1
 2002de8:	e0bffe15 	stw	r2,-8(fp)
 2002dec:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 2002df0:	e037883a 	mov	sp,fp
 2002df4:	dfc00117 	ldw	ra,4(sp)
 2002df8:	df000017 	ldw	fp,0(sp)
 2002dfc:	dec00204 	addi	sp,sp,8
 2002e00:	f800283a 	ret

02002e04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002e04:	defffd04 	addi	sp,sp,-12
 2002e08:	dfc00215 	stw	ra,8(sp)
 2002e0c:	df000115 	stw	fp,4(sp)
 2002e10:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2002e14:	00808034 	movhi	r2,512
 2002e18:	109c7d04 	addi	r2,r2,29172
 2002e1c:	10800017 	ldw	r2,0(r2)
 2002e20:	1005003a 	cmpeq	r2,r2,zero
 2002e24:	1000061e 	bne	r2,zero,2002e40 <alt_get_errno+0x3c>
 2002e28:	00808034 	movhi	r2,512
 2002e2c:	109c7d04 	addi	r2,r2,29172
 2002e30:	10800017 	ldw	r2,0(r2)
 2002e34:	103ee83a 	callr	r2
 2002e38:	e0bfff15 	stw	r2,-4(fp)
 2002e3c:	00000306 	br	2002e4c <alt_get_errno+0x48>
 2002e40:	00808074 	movhi	r2,513
 2002e44:	10a33804 	addi	r2,r2,-29472
 2002e48:	e0bfff15 	stw	r2,-4(fp)
 2002e4c:	e0bfff17 	ldw	r2,-4(fp)
}
 2002e50:	e037883a 	mov	sp,fp
 2002e54:	dfc00117 	ldw	ra,4(sp)
 2002e58:	df000017 	ldw	fp,0(sp)
 2002e5c:	dec00204 	addi	sp,sp,8
 2002e60:	f800283a 	ret

02002e64 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2002e64:	deffeb04 	addi	sp,sp,-84
 2002e68:	dfc01415 	stw	ra,80(sp)
 2002e6c:	df001315 	stw	fp,76(sp)
 2002e70:	df001304 	addi	fp,sp,76
 2002e74:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2002e78:	e0bffd17 	ldw	r2,-12(fp)
 2002e7c:	1004803a 	cmplt	r2,r2,zero
 2002e80:	1000091e 	bne	r2,zero,2002ea8 <isatty+0x44>
 2002e84:	e13ffd17 	ldw	r4,-12(fp)
 2002e88:	01400304 	movi	r5,12
 2002e8c:	2002b680 	call	2002b68 <__mulsi3>
 2002e90:	1007883a 	mov	r3,r2
 2002e94:	00808034 	movhi	r2,512
 2002e98:	1097db04 	addi	r2,r2,24428
 2002e9c:	1887883a 	add	r3,r3,r2
 2002ea0:	e0ffff15 	stw	r3,-4(fp)
 2002ea4:	00000106 	br	2002eac <isatty+0x48>
 2002ea8:	e03fff15 	stw	zero,-4(fp)
 2002eac:	e0bfff17 	ldw	r2,-4(fp)
 2002eb0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 2002eb4:	e0bfed17 	ldw	r2,-76(fp)
 2002eb8:	1005003a 	cmpeq	r2,r2,zero
 2002ebc:	10000f1e 	bne	r2,zero,2002efc <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2002ec0:	e0bfed17 	ldw	r2,-76(fp)
 2002ec4:	10800017 	ldw	r2,0(r2)
 2002ec8:	10800817 	ldw	r2,32(r2)
 2002ecc:	1004c03a 	cmpne	r2,r2,zero
 2002ed0:	1000031e 	bne	r2,zero,2002ee0 <isatty+0x7c>
    {
      return 1;
 2002ed4:	00800044 	movi	r2,1
 2002ed8:	e0bffe15 	stw	r2,-8(fp)
 2002edc:	00000c06 	br	2002f10 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 2002ee0:	e17fee04 	addi	r5,fp,-72
 2002ee4:	e13ffd17 	ldw	r4,-12(fp)
 2002ee8:	2002d2c0 	call	2002d2c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 2002eec:	e0bfef17 	ldw	r2,-68(fp)
 2002ef0:	10880020 	cmpeqi	r2,r2,8192
 2002ef4:	e0bffe15 	stw	r2,-8(fp)
 2002ef8:	00000506 	br	2002f10 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2002efc:	2002f280 	call	2002f28 <alt_get_errno>
 2002f00:	1007883a 	mov	r3,r2
 2002f04:	00801444 	movi	r2,81
 2002f08:	18800015 	stw	r2,0(r3)
    return 0;
 2002f0c:	e03ffe15 	stw	zero,-8(fp)
 2002f10:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 2002f14:	e037883a 	mov	sp,fp
 2002f18:	dfc00117 	ldw	ra,4(sp)
 2002f1c:	df000017 	ldw	fp,0(sp)
 2002f20:	dec00204 	addi	sp,sp,8
 2002f24:	f800283a 	ret

02002f28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002f28:	defffd04 	addi	sp,sp,-12
 2002f2c:	dfc00215 	stw	ra,8(sp)
 2002f30:	df000115 	stw	fp,4(sp)
 2002f34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2002f38:	00808034 	movhi	r2,512
 2002f3c:	109c7d04 	addi	r2,r2,29172
 2002f40:	10800017 	ldw	r2,0(r2)
 2002f44:	1005003a 	cmpeq	r2,r2,zero
 2002f48:	1000061e 	bne	r2,zero,2002f64 <alt_get_errno+0x3c>
 2002f4c:	00808034 	movhi	r2,512
 2002f50:	109c7d04 	addi	r2,r2,29172
 2002f54:	10800017 	ldw	r2,0(r2)
 2002f58:	103ee83a 	callr	r2
 2002f5c:	e0bfff15 	stw	r2,-4(fp)
 2002f60:	00000306 	br	2002f70 <alt_get_errno+0x48>
 2002f64:	00808074 	movhi	r2,513
 2002f68:	10a33804 	addi	r2,r2,-29472
 2002f6c:	e0bfff15 	stw	r2,-4(fp)
 2002f70:	e0bfff17 	ldw	r2,-4(fp)
}
 2002f74:	e037883a 	mov	sp,fp
 2002f78:	dfc00117 	ldw	ra,4(sp)
 2002f7c:	df000017 	ldw	fp,0(sp)
 2002f80:	dec00204 	addi	sp,sp,8
 2002f84:	f800283a 	ret

02002f88 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2002f88:	defffe04 	addi	sp,sp,-8
 2002f8c:	dfc00115 	stw	ra,4(sp)
 2002f90:	df000015 	stw	fp,0(sp)
 2002f94:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2002f98:	01008034 	movhi	r4,512
 2002f9c:	211c8204 	addi	r4,r4,29192
 2002fa0:	01408034 	movhi	r5,512
 2002fa4:	2955cf04 	addi	r5,r5,22332
 2002fa8:	01808034 	movhi	r6,512
 2002fac:	319c8204 	addi	r6,r6,29192
 2002fb0:	20030080 	call	2003008 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2002fb4:	01008034 	movhi	r4,512
 2002fb8:	21000804 	addi	r4,r4,32
 2002fbc:	01408034 	movhi	r5,512
 2002fc0:	29400804 	addi	r5,r5,32
 2002fc4:	01808034 	movhi	r6,512
 2002fc8:	31806d04 	addi	r6,r6,436
 2002fcc:	20030080 	call	2003008 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2002fd0:	01008034 	movhi	r4,512
 2002fd4:	2115b304 	addi	r4,r4,22220
 2002fd8:	01408034 	movhi	r5,512
 2002fdc:	2955b304 	addi	r5,r5,22220
 2002fe0:	01808034 	movhi	r6,512
 2002fe4:	3195cf04 	addi	r6,r6,22332
 2002fe8:	20030080 	call	2003008 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2002fec:	20045640 	call	2004564 <alt_dcache_flush_all>
  alt_icache_flush_all();
 2002ff0:	200475c0 	call	200475c <alt_icache_flush_all>
}
 2002ff4:	e037883a 	mov	sp,fp
 2002ff8:	dfc00117 	ldw	ra,4(sp)
 2002ffc:	df000017 	ldw	fp,0(sp)
 2003000:	dec00204 	addi	sp,sp,8
 2003004:	f800283a 	ret

02003008 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 2003008:	defffc04 	addi	sp,sp,-16
 200300c:	df000315 	stw	fp,12(sp)
 2003010:	df000304 	addi	fp,sp,12
 2003014:	e13ffd15 	stw	r4,-12(fp)
 2003018:	e17ffe15 	stw	r5,-8(fp)
 200301c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2003020:	e0fffe17 	ldw	r3,-8(fp)
 2003024:	e0bffd17 	ldw	r2,-12(fp)
 2003028:	18800e26 	beq	r3,r2,2003064 <alt_load_section+0x5c>
  {
    while( to != end )
 200302c:	00000a06 	br	2003058 <alt_load_section+0x50>
    {
      *to++ = *from++;
 2003030:	e0bffd17 	ldw	r2,-12(fp)
 2003034:	10c00017 	ldw	r3,0(r2)
 2003038:	e0bffe17 	ldw	r2,-8(fp)
 200303c:	10c00015 	stw	r3,0(r2)
 2003040:	e0bffe17 	ldw	r2,-8(fp)
 2003044:	10800104 	addi	r2,r2,4
 2003048:	e0bffe15 	stw	r2,-8(fp)
 200304c:	e0bffd17 	ldw	r2,-12(fp)
 2003050:	10800104 	addi	r2,r2,4
 2003054:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2003058:	e0fffe17 	ldw	r3,-8(fp)
 200305c:	e0bfff17 	ldw	r2,-4(fp)
 2003060:	18bff31e 	bne	r3,r2,2003030 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2003064:	e037883a 	mov	sp,fp
 2003068:	df000017 	ldw	fp,0(sp)
 200306c:	dec00104 	addi	sp,sp,4
 2003070:	f800283a 	ret

02003074 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2003074:	defff804 	addi	sp,sp,-32
 2003078:	dfc00715 	stw	ra,28(sp)
 200307c:	df000615 	stw	fp,24(sp)
 2003080:	df000604 	addi	fp,sp,24
 2003084:	e13ffc15 	stw	r4,-16(fp)
 2003088:	e17ffd15 	stw	r5,-12(fp)
 200308c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2003090:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003094:	e0bffc17 	ldw	r2,-16(fp)
 2003098:	1004803a 	cmplt	r2,r2,zero
 200309c:	1000091e 	bne	r2,zero,20030c4 <lseek+0x50>
 20030a0:	e13ffc17 	ldw	r4,-16(fp)
 20030a4:	01400304 	movi	r5,12
 20030a8:	2002b680 	call	2002b68 <__mulsi3>
 20030ac:	1007883a 	mov	r3,r2
 20030b0:	00808034 	movhi	r2,512
 20030b4:	1097db04 	addi	r2,r2,24428
 20030b8:	1887883a 	add	r3,r3,r2
 20030bc:	e0ffff15 	stw	r3,-4(fp)
 20030c0:	00000106 	br	20030c8 <lseek+0x54>
 20030c4:	e03fff15 	stw	zero,-4(fp)
 20030c8:	e0bfff17 	ldw	r2,-4(fp)
 20030cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 20030d0:	e0bffb17 	ldw	r2,-20(fp)
 20030d4:	1005003a 	cmpeq	r2,r2,zero
 20030d8:	1000111e 	bne	r2,zero,2003120 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 20030dc:	e0bffb17 	ldw	r2,-20(fp)
 20030e0:	10800017 	ldw	r2,0(r2)
 20030e4:	10800717 	ldw	r2,28(r2)
 20030e8:	1005003a 	cmpeq	r2,r2,zero
 20030ec:	1000091e 	bne	r2,zero,2003114 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 20030f0:	e0bffb17 	ldw	r2,-20(fp)
 20030f4:	10800017 	ldw	r2,0(r2)
 20030f8:	10800717 	ldw	r2,28(r2)
 20030fc:	e13ffb17 	ldw	r4,-20(fp)
 2003100:	e17ffd17 	ldw	r5,-12(fp)
 2003104:	e1bffe17 	ldw	r6,-8(fp)
 2003108:	103ee83a 	callr	r2
 200310c:	e0bffa15 	stw	r2,-24(fp)
 2003110:	00000506 	br	2003128 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2003114:	00bfde84 	movi	r2,-134
 2003118:	e0bffa15 	stw	r2,-24(fp)
 200311c:	00000206 	br	2003128 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 2003120:	00bfebc4 	movi	r2,-81
 2003124:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 2003128:	e0bffa17 	ldw	r2,-24(fp)
 200312c:	1004403a 	cmpge	r2,r2,zero
 2003130:	1000071e 	bne	r2,zero,2003150 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 2003134:	20031680 	call	2003168 <alt_get_errno>
 2003138:	1007883a 	mov	r3,r2
 200313c:	e0bffa17 	ldw	r2,-24(fp)
 2003140:	0085c83a 	sub	r2,zero,r2
 2003144:	18800015 	stw	r2,0(r3)
    rc = -1;
 2003148:	00bfffc4 	movi	r2,-1
 200314c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 2003150:	e0bffa17 	ldw	r2,-24(fp)
}
 2003154:	e037883a 	mov	sp,fp
 2003158:	dfc00117 	ldw	ra,4(sp)
 200315c:	df000017 	ldw	fp,0(sp)
 2003160:	dec00204 	addi	sp,sp,8
 2003164:	f800283a 	ret

02003168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003168:	defffd04 	addi	sp,sp,-12
 200316c:	dfc00215 	stw	ra,8(sp)
 2003170:	df000115 	stw	fp,4(sp)
 2003174:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2003178:	00808034 	movhi	r2,512
 200317c:	109c7d04 	addi	r2,r2,29172
 2003180:	10800017 	ldw	r2,0(r2)
 2003184:	1005003a 	cmpeq	r2,r2,zero
 2003188:	1000061e 	bne	r2,zero,20031a4 <alt_get_errno+0x3c>
 200318c:	00808034 	movhi	r2,512
 2003190:	109c7d04 	addi	r2,r2,29172
 2003194:	10800017 	ldw	r2,0(r2)
 2003198:	103ee83a 	callr	r2
 200319c:	e0bfff15 	stw	r2,-4(fp)
 20031a0:	00000306 	br	20031b0 <alt_get_errno+0x48>
 20031a4:	00808074 	movhi	r2,513
 20031a8:	10a33804 	addi	r2,r2,-29472
 20031ac:	e0bfff15 	stw	r2,-4(fp)
 20031b0:	e0bfff17 	ldw	r2,-4(fp)
}
 20031b4:	e037883a 	mov	sp,fp
 20031b8:	dfc00117 	ldw	ra,4(sp)
 20031bc:	df000017 	ldw	fp,0(sp)
 20031c0:	dec00204 	addi	sp,sp,8
 20031c4:	f800283a 	ret

020031c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 20031c8:	defffd04 	addi	sp,sp,-12
 20031cc:	dfc00215 	stw	ra,8(sp)
 20031d0:	df000115 	stw	fp,4(sp)
 20031d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 20031d8:	0009883a 	mov	r4,zero
 20031dc:	20036b00 	call	20036b0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 20031e0:	20036e40 	call	20036e4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 20031e4:	01008034 	movhi	r4,512
 20031e8:	2115bd04 	addi	r4,r4,22260
 20031ec:	01408034 	movhi	r5,512
 20031f0:	2955bd04 	addi	r5,r5,22260
 20031f4:	01808034 	movhi	r6,512
 20031f8:	3195bd04 	addi	r6,r6,22260
 20031fc:	2004b1c0 	call	2004b1c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2003200:	20046940 	call	2004694 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2003204:	01008034 	movhi	r4,512
 2003208:	2111be04 	addi	r4,r4,18168
 200320c:	20052c00 	call	20052c0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2003210:	d126c517 	ldw	r4,-25836(gp)
 2003214:	d166c617 	ldw	r5,-25832(gp)
 2003218:	d1a6c717 	ldw	r6,-25828(gp)
 200321c:	20001f00 	call	20001f0 <main>
 2003220:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2003224:	01000044 	movi	r4,1
 2003228:	2002ba00 	call	2002ba0 <close>
  exit (result);
 200322c:	e13fff17 	ldw	r4,-4(fp)
 2003230:	20052d40 	call	20052d4 <exit>

02003234 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 2003234:	defffe04 	addi	sp,sp,-8
 2003238:	df000115 	stw	fp,4(sp)
 200323c:	df000104 	addi	fp,sp,4
 2003240:	e13fff15 	stw	r4,-4(fp)
}
 2003244:	e037883a 	mov	sp,fp
 2003248:	df000017 	ldw	fp,0(sp)
 200324c:	dec00104 	addi	sp,sp,4
 2003250:	f800283a 	ret

02003254 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2003254:	defffe04 	addi	sp,sp,-8
 2003258:	df000115 	stw	fp,4(sp)
 200325c:	df000104 	addi	fp,sp,4
 2003260:	e13fff15 	stw	r4,-4(fp)
}
 2003264:	e037883a 	mov	sp,fp
 2003268:	df000017 	ldw	fp,0(sp)
 200326c:	dec00104 	addi	sp,sp,4
 2003270:	f800283a 	ret

02003274 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 2003274:	defff704 	addi	sp,sp,-36
 2003278:	dfc00815 	stw	ra,32(sp)
 200327c:	df000715 	stw	fp,28(sp)
 2003280:	df000704 	addi	fp,sp,28
 2003284:	e13ffb15 	stw	r4,-20(fp)
 2003288:	e17ffc15 	stw	r5,-16(fp)
 200328c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003290:	e0bffb17 	ldw	r2,-20(fp)
 2003294:	1004803a 	cmplt	r2,r2,zero
 2003298:	1000091e 	bne	r2,zero,20032c0 <read+0x4c>
 200329c:	e13ffb17 	ldw	r4,-20(fp)
 20032a0:	01400304 	movi	r5,12
 20032a4:	2002b680 	call	2002b68 <__mulsi3>
 20032a8:	1007883a 	mov	r3,r2
 20032ac:	00808034 	movhi	r2,512
 20032b0:	1097db04 	addi	r2,r2,24428
 20032b4:	1887883a 	add	r3,r3,r2
 20032b8:	e0ffff15 	stw	r3,-4(fp)
 20032bc:	00000106 	br	20032c4 <read+0x50>
 20032c0:	e03fff15 	stw	zero,-4(fp)
 20032c4:	e0bfff17 	ldw	r2,-4(fp)
 20032c8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 20032cc:	e0bffa17 	ldw	r2,-24(fp)
 20032d0:	1005003a 	cmpeq	r2,r2,zero
 20032d4:	1000241e 	bne	r2,zero,2003368 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 20032d8:	e0bffa17 	ldw	r2,-24(fp)
 20032dc:	10800217 	ldw	r2,8(r2)
 20032e0:	108000cc 	andi	r2,r2,3
 20032e4:	10800060 	cmpeqi	r2,r2,1
 20032e8:	10001a1e 	bne	r2,zero,2003354 <read+0xe0>
 20032ec:	e0bffa17 	ldw	r2,-24(fp)
 20032f0:	10800017 	ldw	r2,0(r2)
 20032f4:	10800517 	ldw	r2,20(r2)
 20032f8:	1005003a 	cmpeq	r2,r2,zero
 20032fc:	1000151e 	bne	r2,zero,2003354 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2003300:	e0bffa17 	ldw	r2,-24(fp)
 2003304:	10800017 	ldw	r2,0(r2)
 2003308:	10800517 	ldw	r2,20(r2)
 200330c:	e17ffc17 	ldw	r5,-16(fp)
 2003310:	e1bffd17 	ldw	r6,-12(fp)
 2003314:	e13ffa17 	ldw	r4,-24(fp)
 2003318:	103ee83a 	callr	r2
 200331c:	e0bff915 	stw	r2,-28(fp)
 2003320:	e0bff917 	ldw	r2,-28(fp)
 2003324:	1004403a 	cmpge	r2,r2,zero
 2003328:	1000071e 	bne	r2,zero,2003348 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 200332c:	20033980 	call	2003398 <alt_get_errno>
 2003330:	e0fff917 	ldw	r3,-28(fp)
 2003334:	00c7c83a 	sub	r3,zero,r3
 2003338:	10c00015 	stw	r3,0(r2)
          return -1;
 200333c:	00bfffc4 	movi	r2,-1
 2003340:	e0bffe15 	stw	r2,-8(fp)
 2003344:	00000e06 	br	2003380 <read+0x10c>
        }
        return rval;
 2003348:	e0bff917 	ldw	r2,-28(fp)
 200334c:	e0bffe15 	stw	r2,-8(fp)
 2003350:	00000b06 	br	2003380 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2003354:	20033980 	call	2003398 <alt_get_errno>
 2003358:	1007883a 	mov	r3,r2
 200335c:	00800344 	movi	r2,13
 2003360:	18800015 	stw	r2,0(r3)
 2003364:	00000406 	br	2003378 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 2003368:	20033980 	call	2003398 <alt_get_errno>
 200336c:	1007883a 	mov	r3,r2
 2003370:	00801444 	movi	r2,81
 2003374:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2003378:	00bfffc4 	movi	r2,-1
 200337c:	e0bffe15 	stw	r2,-8(fp)
 2003380:	e0bffe17 	ldw	r2,-8(fp)
}
 2003384:	e037883a 	mov	sp,fp
 2003388:	dfc00117 	ldw	ra,4(sp)
 200338c:	df000017 	ldw	fp,0(sp)
 2003390:	dec00204 	addi	sp,sp,8
 2003394:	f800283a 	ret

02003398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003398:	defffd04 	addi	sp,sp,-12
 200339c:	dfc00215 	stw	ra,8(sp)
 20033a0:	df000115 	stw	fp,4(sp)
 20033a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 20033a8:	00808034 	movhi	r2,512
 20033ac:	109c7d04 	addi	r2,r2,29172
 20033b0:	10800017 	ldw	r2,0(r2)
 20033b4:	1005003a 	cmpeq	r2,r2,zero
 20033b8:	1000061e 	bne	r2,zero,20033d4 <alt_get_errno+0x3c>
 20033bc:	00808034 	movhi	r2,512
 20033c0:	109c7d04 	addi	r2,r2,29172
 20033c4:	10800017 	ldw	r2,0(r2)
 20033c8:	103ee83a 	callr	r2
 20033cc:	e0bfff15 	stw	r2,-4(fp)
 20033d0:	00000306 	br	20033e0 <alt_get_errno+0x48>
 20033d4:	00808074 	movhi	r2,513
 20033d8:	10a33804 	addi	r2,r2,-29472
 20033dc:	e0bfff15 	stw	r2,-4(fp)
 20033e0:	e0bfff17 	ldw	r2,-4(fp)
}
 20033e4:	e037883a 	mov	sp,fp
 20033e8:	dfc00117 	ldw	ra,4(sp)
 20033ec:	df000017 	ldw	fp,0(sp)
 20033f0:	dec00204 	addi	sp,sp,8
 20033f4:	f800283a 	ret

020033f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 20033f8:	defffc04 	addi	sp,sp,-16
 20033fc:	dfc00315 	stw	ra,12(sp)
 2003400:	df000215 	stw	fp,8(sp)
 2003404:	dc000115 	stw	r16,4(sp)
 2003408:	df000104 	addi	fp,sp,4
 200340c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2003410:	e0bfff17 	ldw	r2,-4(fp)
 2003414:	108000d0 	cmplti	r2,r2,3
 2003418:	10000f1e 	bne	r2,zero,2003458 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 200341c:	e13fff17 	ldw	r4,-4(fp)
 2003420:	04008034 	movhi	r16,512
 2003424:	8417db04 	addi	r16,r16,24428
 2003428:	01400304 	movi	r5,12
 200342c:	2002b680 	call	2002b68 <__mulsi3>
 2003430:	1405883a 	add	r2,r2,r16
 2003434:	10800204 	addi	r2,r2,8
 2003438:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 200343c:	e13fff17 	ldw	r4,-4(fp)
 2003440:	04008034 	movhi	r16,512
 2003444:	8417db04 	addi	r16,r16,24428
 2003448:	01400304 	movi	r5,12
 200344c:	2002b680 	call	2002b68 <__mulsi3>
 2003450:	1405883a 	add	r2,r2,r16
 2003454:	10000015 	stw	zero,0(r2)
  }
}
 2003458:	e037883a 	mov	sp,fp
 200345c:	dfc00217 	ldw	ra,8(sp)
 2003460:	df000117 	ldw	fp,4(sp)
 2003464:	dc000017 	ldw	r16,0(sp)
 2003468:	dec00304 	addi	sp,sp,12
 200346c:	f800283a 	ret

02003470 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2003470:	defff804 	addi	sp,sp,-32
 2003474:	df000715 	stw	fp,28(sp)
 2003478:	df000704 	addi	fp,sp,28
 200347c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003480:	0005303a 	rdctl	r2,status
 2003484:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003488:	e0fffb17 	ldw	r3,-20(fp)
 200348c:	00bfff84 	movi	r2,-2
 2003490:	1884703a 	and	r2,r3,r2
 2003494:	1001703a 	wrctl	status,r2
  
  return context;
 2003498:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 200349c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 20034a0:	d0a00a17 	ldw	r2,-32728(gp)
 20034a4:	10c000c4 	addi	r3,r2,3
 20034a8:	00bfff04 	movi	r2,-4
 20034ac:	1884703a 	and	r2,r3,r2
 20034b0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 20034b4:	d0e00a17 	ldw	r3,-32728(gp)
 20034b8:	e0bffe17 	ldw	r2,-8(fp)
 20034bc:	1887883a 	add	r3,r3,r2
 20034c0:	00810034 	movhi	r2,1024
 20034c4:	10800004 	addi	r2,r2,0
 20034c8:	10c0072e 	bgeu	r2,r3,20034e8 <sbrk+0x78>
 20034cc:	e0bffd17 	ldw	r2,-12(fp)
 20034d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20034d4:	e0bffa17 	ldw	r2,-24(fp)
 20034d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 20034dc:	00bfffc4 	movi	r2,-1
 20034e0:	e0bfff15 	stw	r2,-4(fp)
 20034e4:	00000c06 	br	2003518 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 20034e8:	d0a00a17 	ldw	r2,-32728(gp)
 20034ec:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 20034f0:	d0e00a17 	ldw	r3,-32728(gp)
 20034f4:	e0bffe17 	ldw	r2,-8(fp)
 20034f8:	1885883a 	add	r2,r3,r2
 20034fc:	d0a00a15 	stw	r2,-32728(gp)
 2003500:	e0bffd17 	ldw	r2,-12(fp)
 2003504:	e0bff915 	stw	r2,-28(fp)
 2003508:	e0bff917 	ldw	r2,-28(fp)
 200350c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 2003510:	e0bffc17 	ldw	r2,-16(fp)
 2003514:	e0bfff15 	stw	r2,-4(fp)
 2003518:	e0bfff17 	ldw	r2,-4(fp)
} 
 200351c:	e037883a 	mov	sp,fp
 2003520:	df000017 	ldw	fp,0(sp)
 2003524:	dec00104 	addi	sp,sp,4
 2003528:	f800283a 	ret

0200352c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 200352c:	defff704 	addi	sp,sp,-36
 2003530:	dfc00815 	stw	ra,32(sp)
 2003534:	df000715 	stw	fp,28(sp)
 2003538:	df000704 	addi	fp,sp,28
 200353c:	e13ffb15 	stw	r4,-20(fp)
 2003540:	e17ffc15 	stw	r5,-16(fp)
 2003544:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003548:	e0bffb17 	ldw	r2,-20(fp)
 200354c:	1004803a 	cmplt	r2,r2,zero
 2003550:	1000091e 	bne	r2,zero,2003578 <write+0x4c>
 2003554:	e13ffb17 	ldw	r4,-20(fp)
 2003558:	01400304 	movi	r5,12
 200355c:	2002b680 	call	2002b68 <__mulsi3>
 2003560:	1007883a 	mov	r3,r2
 2003564:	00808034 	movhi	r2,512
 2003568:	1097db04 	addi	r2,r2,24428
 200356c:	1887883a 	add	r3,r3,r2
 2003570:	e0ffff15 	stw	r3,-4(fp)
 2003574:	00000106 	br	200357c <write+0x50>
 2003578:	e03fff15 	stw	zero,-4(fp)
 200357c:	e0bfff17 	ldw	r2,-4(fp)
 2003580:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 2003584:	e0bffa17 	ldw	r2,-24(fp)
 2003588:	1005003a 	cmpeq	r2,r2,zero
 200358c:	1000241e 	bne	r2,zero,2003620 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 2003590:	e0bffa17 	ldw	r2,-24(fp)
 2003594:	10800217 	ldw	r2,8(r2)
 2003598:	108000cc 	andi	r2,r2,3
 200359c:	1005003a 	cmpeq	r2,r2,zero
 20035a0:	10001a1e 	bne	r2,zero,200360c <write+0xe0>
 20035a4:	e0bffa17 	ldw	r2,-24(fp)
 20035a8:	10800017 	ldw	r2,0(r2)
 20035ac:	10800617 	ldw	r2,24(r2)
 20035b0:	1005003a 	cmpeq	r2,r2,zero
 20035b4:	1000151e 	bne	r2,zero,200360c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 20035b8:	e0bffa17 	ldw	r2,-24(fp)
 20035bc:	10800017 	ldw	r2,0(r2)
 20035c0:	10800617 	ldw	r2,24(r2)
 20035c4:	e17ffc17 	ldw	r5,-16(fp)
 20035c8:	e1bffd17 	ldw	r6,-12(fp)
 20035cc:	e13ffa17 	ldw	r4,-24(fp)
 20035d0:	103ee83a 	callr	r2
 20035d4:	e0bff915 	stw	r2,-28(fp)
 20035d8:	e0bff917 	ldw	r2,-28(fp)
 20035dc:	1004403a 	cmpge	r2,r2,zero
 20035e0:	1000071e 	bne	r2,zero,2003600 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 20035e4:	20036500 	call	2003650 <alt_get_errno>
 20035e8:	e0fff917 	ldw	r3,-28(fp)
 20035ec:	00c7c83a 	sub	r3,zero,r3
 20035f0:	10c00015 	stw	r3,0(r2)
        return -1;
 20035f4:	00bfffc4 	movi	r2,-1
 20035f8:	e0bffe15 	stw	r2,-8(fp)
 20035fc:	00000e06 	br	2003638 <write+0x10c>
      }
      return rval;
 2003600:	e0bff917 	ldw	r2,-28(fp)
 2003604:	e0bffe15 	stw	r2,-8(fp)
 2003608:	00000b06 	br	2003638 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 200360c:	20036500 	call	2003650 <alt_get_errno>
 2003610:	1007883a 	mov	r3,r2
 2003614:	00800344 	movi	r2,13
 2003618:	18800015 	stw	r2,0(r3)
 200361c:	00000406 	br	2003630 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2003620:	20036500 	call	2003650 <alt_get_errno>
 2003624:	1007883a 	mov	r3,r2
 2003628:	00801444 	movi	r2,81
 200362c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2003630:	00bfffc4 	movi	r2,-1
 2003634:	e0bffe15 	stw	r2,-8(fp)
 2003638:	e0bffe17 	ldw	r2,-8(fp)
}
 200363c:	e037883a 	mov	sp,fp
 2003640:	dfc00117 	ldw	ra,4(sp)
 2003644:	df000017 	ldw	fp,0(sp)
 2003648:	dec00204 	addi	sp,sp,8
 200364c:	f800283a 	ret

02003650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003650:	defffd04 	addi	sp,sp,-12
 2003654:	dfc00215 	stw	ra,8(sp)
 2003658:	df000115 	stw	fp,4(sp)
 200365c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2003660:	00808034 	movhi	r2,512
 2003664:	109c7d04 	addi	r2,r2,29172
 2003668:	10800017 	ldw	r2,0(r2)
 200366c:	1005003a 	cmpeq	r2,r2,zero
 2003670:	1000061e 	bne	r2,zero,200368c <alt_get_errno+0x3c>
 2003674:	00808034 	movhi	r2,512
 2003678:	109c7d04 	addi	r2,r2,29172
 200367c:	10800017 	ldw	r2,0(r2)
 2003680:	103ee83a 	callr	r2
 2003684:	e0bfff15 	stw	r2,-4(fp)
 2003688:	00000306 	br	2003698 <alt_get_errno+0x48>
 200368c:	00808074 	movhi	r2,513
 2003690:	10a33804 	addi	r2,r2,-29472
 2003694:	e0bfff15 	stw	r2,-4(fp)
 2003698:	e0bfff17 	ldw	r2,-4(fp)
}
 200369c:	e037883a 	mov	sp,fp
 20036a0:	dfc00117 	ldw	ra,4(sp)
 20036a4:	df000017 	ldw	fp,0(sp)
 20036a8:	dec00204 	addi	sp,sp,8
 20036ac:	f800283a 	ret

020036b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 20036b0:	defffd04 	addi	sp,sp,-12
 20036b4:	dfc00215 	stw	ra,8(sp)
 20036b8:	df000115 	stw	fp,4(sp)
 20036bc:	df000104 	addi	fp,sp,4
 20036c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
 20036c4:	200501c0 	call	200501c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 20036c8:	00800044 	movi	r2,1
 20036cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 20036d0:	e037883a 	mov	sp,fp
 20036d4:	dfc00117 	ldw	ra,4(sp)
 20036d8:	df000017 	ldw	fp,0(sp)
 20036dc:	dec00204 	addi	sp,sp,8
 20036e0:	f800283a 	ret

020036e4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 20036e4:	defffd04 	addi	sp,sp,-12
 20036e8:	dfc00215 	stw	ra,8(sp)
 20036ec:	df000115 	stw	fp,4(sp)
 20036f0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
 20036f4:	01008034 	movhi	r4,512
 20036f8:	21184504 	addi	r4,r4,24852
 20036fc:	000b883a 	mov	r5,zero
 2003700:	01800144 	movi	r6,5
 2003704:	2003aac0 	call	2003aac <altera_avalon_jtag_uart_init>
 2003708:	01008034 	movhi	r4,512
 200370c:	21183b04 	addi	r4,r4,24812
 2003710:	200392c0 	call	200392c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
 2003714:	01008034 	movhi	r4,512
 2003718:	211c5304 	addi	r4,r4,29004
 200371c:	200392c0 	call	200392c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, Pixel_Buffer_DMA);
 2003720:	00808034 	movhi	r2,512
 2003724:	109c5f04 	addi	r2,r2,29052
 2003728:	10800a17 	ldw	r2,40(r2)
 200372c:	10800017 	ldw	r2,0(r2)
 2003730:	1007883a 	mov	r3,r2
 2003734:	00808034 	movhi	r2,512
 2003738:	109c5f04 	addi	r2,r2,29052
 200373c:	10c00b15 	stw	r3,44(r2)
 2003740:	00808034 	movhi	r2,512
 2003744:	109c5f04 	addi	r2,r2,29052
 2003748:	10800a17 	ldw	r2,40(r2)
 200374c:	10800104 	addi	r2,r2,4
 2003750:	10800017 	ldw	r2,0(r2)
 2003754:	1007883a 	mov	r3,r2
 2003758:	00808034 	movhi	r2,512
 200375c:	109c5f04 	addi	r2,r2,29052
 2003760:	10c00c15 	stw	r3,48(r2)
 2003764:	00808034 	movhi	r2,512
 2003768:	109c5f04 	addi	r2,r2,29052
 200376c:	10800a17 	ldw	r2,40(r2)
 2003770:	10800204 	addi	r2,r2,8
 2003774:	10800017 	ldw	r2,0(r2)
 2003778:	10ffffcc 	andi	r3,r2,65535
 200377c:	00808034 	movhi	r2,512
 2003780:	109c5f04 	addi	r2,r2,29052
 2003784:	10c00f15 	stw	r3,60(r2)
 2003788:	00808034 	movhi	r2,512
 200378c:	109c5f04 	addi	r2,r2,29052
 2003790:	10800a17 	ldw	r2,40(r2)
 2003794:	10800204 	addi	r2,r2,8
 2003798:	10800017 	ldw	r2,0(r2)
 200379c:	1005d43a 	srai	r2,r2,16
 20037a0:	10ffffcc 	andi	r3,r2,65535
 20037a4:	00808034 	movhi	r2,512
 20037a8:	109c5f04 	addi	r2,r2,29052
 20037ac:	10c01015 	stw	r3,64(r2)
 20037b0:	00808034 	movhi	r2,512
 20037b4:	109c5f04 	addi	r2,r2,29052
 20037b8:	10800a17 	ldw	r2,40(r2)
 20037bc:	10800304 	addi	r2,r2,12
 20037c0:	10800017 	ldw	r2,0(r2)
 20037c4:	1005d07a 	srai	r2,r2,1
 20037c8:	10c0004c 	andi	r3,r2,1
 20037cc:	00808034 	movhi	r2,512
 20037d0:	109c5f04 	addi	r2,r2,29052
 20037d4:	10c00d15 	stw	r3,52(r2)
 20037d8:	00808034 	movhi	r2,512
 20037dc:	109c5f04 	addi	r2,r2,29052
 20037e0:	10800a17 	ldw	r2,40(r2)
 20037e4:	10800304 	addi	r2,r2,12
 20037e8:	10800017 	ldw	r2,0(r2)
 20037ec:	1005d13a 	srai	r2,r2,4
 20037f0:	10c003cc 	andi	r3,r2,15
 20037f4:	00808034 	movhi	r2,512
 20037f8:	109c5f04 	addi	r2,r2,29052
 20037fc:	10c00e15 	stw	r3,56(r2)
 2003800:	00808034 	movhi	r2,512
 2003804:	109c5f04 	addi	r2,r2,29052
 2003808:	10800a17 	ldw	r2,40(r2)
 200380c:	10800304 	addi	r2,r2,12
 2003810:	10800017 	ldw	r2,0(r2)
 2003814:	1005d43a 	srai	r2,r2,16
 2003818:	1007883a 	mov	r3,r2
 200381c:	00bfffc4 	movi	r2,-1
 2003820:	1884703a 	and	r2,r3,r2
 2003824:	e0bfff45 	stb	r2,-3(fp)
 2003828:	00808034 	movhi	r2,512
 200382c:	109c5f04 	addi	r2,r2,29052
 2003830:	10800a17 	ldw	r2,40(r2)
 2003834:	10800304 	addi	r2,r2,12
 2003838:	10800017 	ldw	r2,0(r2)
 200383c:	1005d63a 	srai	r2,r2,24
 2003840:	1007883a 	mov	r3,r2
 2003844:	00bfffc4 	movi	r2,-1
 2003848:	1884703a 	and	r2,r3,r2
 200384c:	e0bfff05 	stb	r2,-4(fp)
 2003850:	00808034 	movhi	r2,512
 2003854:	109c5f04 	addi	r2,r2,29052
 2003858:	10800e17 	ldw	r2,56(r2)
 200385c:	10800058 	cmpnei	r2,r2,1
 2003860:	1000041e 	bne	r2,zero,2003874 <alt_sys_init+0x190>
 2003864:	00808034 	movhi	r2,512
 2003868:	109c5f04 	addi	r2,r2,29052
 200386c:	10001115 	stw	zero,68(r2)
 2003870:	00000e06 	br	20038ac <alt_sys_init+0x1c8>
 2003874:	00808034 	movhi	r2,512
 2003878:	109c5f04 	addi	r2,r2,29052
 200387c:	10800e17 	ldw	r2,56(r2)
 2003880:	10800098 	cmpnei	r2,r2,2
 2003884:	1000051e 	bne	r2,zero,200389c <alt_sys_init+0x1b8>
 2003888:	00c08034 	movhi	r3,512
 200388c:	18dc5f04 	addi	r3,r3,29052
 2003890:	00800044 	movi	r2,1
 2003894:	18801115 	stw	r2,68(r3)
 2003898:	00000406 	br	20038ac <alt_sys_init+0x1c8>
 200389c:	00c08034 	movhi	r3,512
 20038a0:	18dc5f04 	addi	r3,r3,29052
 20038a4:	00800084 	movi	r2,2
 20038a8:	18801115 	stw	r2,68(r3)
 20038ac:	e0ffff43 	ldbu	r3,-3(fp)
 20038b0:	00800804 	movi	r2,32
 20038b4:	10c7c83a 	sub	r3,r2,r3
 20038b8:	00bfffc4 	movi	r2,-1
 20038bc:	10c6d83a 	srl	r3,r2,r3
 20038c0:	00808034 	movhi	r2,512
 20038c4:	109c5f04 	addi	r2,r2,29052
 20038c8:	10c01215 	stw	r3,72(r2)
 20038cc:	e0ffff43 	ldbu	r3,-3(fp)
 20038d0:	00808034 	movhi	r2,512
 20038d4:	109c5f04 	addi	r2,r2,29052
 20038d8:	10801117 	ldw	r2,68(r2)
 20038dc:	1887883a 	add	r3,r3,r2
 20038e0:	00808034 	movhi	r2,512
 20038e4:	109c5f04 	addi	r2,r2,29052
 20038e8:	10c01315 	stw	r3,76(r2)
 20038ec:	e0ffff03 	ldbu	r3,-4(fp)
 20038f0:	00800804 	movi	r2,32
 20038f4:	10c7c83a 	sub	r3,r2,r3
 20038f8:	00bfffc4 	movi	r2,-1
 20038fc:	10c6d83a 	srl	r3,r2,r3
 2003900:	00808034 	movhi	r2,512
 2003904:	109c5f04 	addi	r2,r2,29052
 2003908:	10c01415 	stw	r3,80(r2)
 200390c:	01008034 	movhi	r4,512
 2003910:	211c5f04 	addi	r4,r4,29052
 2003914:	200392c0 	call	200392c <alt_dev_reg>
}
 2003918:	e037883a 	mov	sp,fp
 200391c:	dfc00117 	ldw	ra,4(sp)
 2003920:	df000017 	ldw	fp,0(sp)
 2003924:	dec00204 	addi	sp,sp,8
 2003928:	f800283a 	ret

0200392c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 200392c:	defffd04 	addi	sp,sp,-12
 2003930:	dfc00215 	stw	ra,8(sp)
 2003934:	df000115 	stw	fp,4(sp)
 2003938:	df000104 	addi	fp,sp,4
 200393c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2003940:	e13fff17 	ldw	r4,-4(fp)
 2003944:	01408034 	movhi	r5,512
 2003948:	295c7a04 	addi	r5,r5,29160
 200394c:	20045800 	call	2004580 <alt_dev_llist_insert>
}
 2003950:	e037883a 	mov	sp,fp
 2003954:	dfc00117 	ldw	ra,4(sp)
 2003958:	df000017 	ldw	fp,0(sp)
 200395c:	dec00204 	addi	sp,sp,8
 2003960:	f800283a 	ret

02003964 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2003964:	defffa04 	addi	sp,sp,-24
 2003968:	dfc00515 	stw	ra,20(sp)
 200396c:	df000415 	stw	fp,16(sp)
 2003970:	df000404 	addi	fp,sp,16
 2003974:	e13ffd15 	stw	r4,-12(fp)
 2003978:	e17ffe15 	stw	r5,-8(fp)
 200397c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2003980:	e0bffd17 	ldw	r2,-12(fp)
 2003984:	10800017 	ldw	r2,0(r2)
 2003988:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 200398c:	e0bffc17 	ldw	r2,-16(fp)
 2003990:	11000a04 	addi	r4,r2,40
 2003994:	e0bffd17 	ldw	r2,-12(fp)
 2003998:	11c00217 	ldw	r7,8(r2)
 200399c:	e17ffe17 	ldw	r5,-8(fp)
 20039a0:	e1bfff17 	ldw	r6,-4(fp)
 20039a4:	2003fac0 	call	2003fac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 20039a8:	e037883a 	mov	sp,fp
 20039ac:	dfc00117 	ldw	ra,4(sp)
 20039b0:	df000017 	ldw	fp,0(sp)
 20039b4:	dec00204 	addi	sp,sp,8
 20039b8:	f800283a 	ret

020039bc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 20039bc:	defffa04 	addi	sp,sp,-24
 20039c0:	dfc00515 	stw	ra,20(sp)
 20039c4:	df000415 	stw	fp,16(sp)
 20039c8:	df000404 	addi	fp,sp,16
 20039cc:	e13ffd15 	stw	r4,-12(fp)
 20039d0:	e17ffe15 	stw	r5,-8(fp)
 20039d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20039d8:	e0bffd17 	ldw	r2,-12(fp)
 20039dc:	10800017 	ldw	r2,0(r2)
 20039e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 20039e4:	e0bffc17 	ldw	r2,-16(fp)
 20039e8:	11000a04 	addi	r4,r2,40
 20039ec:	e0bffd17 	ldw	r2,-12(fp)
 20039f0:	11c00217 	ldw	r7,8(r2)
 20039f4:	e17ffe17 	ldw	r5,-8(fp)
 20039f8:	e1bfff17 	ldw	r6,-4(fp)
 20039fc:	20041d00 	call	20041d0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2003a00:	e037883a 	mov	sp,fp
 2003a04:	dfc00117 	ldw	ra,4(sp)
 2003a08:	df000017 	ldw	fp,0(sp)
 2003a0c:	dec00204 	addi	sp,sp,8
 2003a10:	f800283a 	ret

02003a14 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2003a14:	defffc04 	addi	sp,sp,-16
 2003a18:	dfc00315 	stw	ra,12(sp)
 2003a1c:	df000215 	stw	fp,8(sp)
 2003a20:	df000204 	addi	fp,sp,8
 2003a24:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2003a28:	e0bfff17 	ldw	r2,-4(fp)
 2003a2c:	10800017 	ldw	r2,0(r2)
 2003a30:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2003a34:	e0bffe17 	ldw	r2,-8(fp)
 2003a38:	11000a04 	addi	r4,r2,40
 2003a3c:	e0bfff17 	ldw	r2,-4(fp)
 2003a40:	11400217 	ldw	r5,8(r2)
 2003a44:	2003e440 	call	2003e44 <altera_avalon_jtag_uart_close>
}
 2003a48:	e037883a 	mov	sp,fp
 2003a4c:	dfc00117 	ldw	ra,4(sp)
 2003a50:	df000017 	ldw	fp,0(sp)
 2003a54:	dec00204 	addi	sp,sp,8
 2003a58:	f800283a 	ret

02003a5c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2003a5c:	defffa04 	addi	sp,sp,-24
 2003a60:	dfc00515 	stw	ra,20(sp)
 2003a64:	df000415 	stw	fp,16(sp)
 2003a68:	df000404 	addi	fp,sp,16
 2003a6c:	e13ffd15 	stw	r4,-12(fp)
 2003a70:	e17ffe15 	stw	r5,-8(fp)
 2003a74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2003a78:	e0bffd17 	ldw	r2,-12(fp)
 2003a7c:	10800017 	ldw	r2,0(r2)
 2003a80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2003a84:	e0bffc17 	ldw	r2,-16(fp)
 2003a88:	11000a04 	addi	r4,r2,40
 2003a8c:	e17ffe17 	ldw	r5,-8(fp)
 2003a90:	e1bfff17 	ldw	r6,-4(fp)
 2003a94:	2003eb80 	call	2003eb8 <altera_avalon_jtag_uart_ioctl>
}
 2003a98:	e037883a 	mov	sp,fp
 2003a9c:	dfc00117 	ldw	ra,4(sp)
 2003aa0:	df000017 	ldw	fp,0(sp)
 2003aa4:	dec00204 	addi	sp,sp,8
 2003aa8:	f800283a 	ret

02003aac <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2003aac:	defffa04 	addi	sp,sp,-24
 2003ab0:	dfc00515 	stw	ra,20(sp)
 2003ab4:	df000415 	stw	fp,16(sp)
 2003ab8:	df000404 	addi	fp,sp,16
 2003abc:	e13ffd15 	stw	r4,-12(fp)
 2003ac0:	e17ffe15 	stw	r5,-8(fp)
 2003ac4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2003ac8:	e0fffd17 	ldw	r3,-12(fp)
 2003acc:	00800044 	movi	r2,1
 2003ad0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2003ad4:	e0bffd17 	ldw	r2,-12(fp)
 2003ad8:	10800017 	ldw	r2,0(r2)
 2003adc:	11000104 	addi	r4,r2,4
 2003ae0:	e0bffd17 	ldw	r2,-12(fp)
 2003ae4:	10800817 	ldw	r2,32(r2)
 2003ae8:	1007883a 	mov	r3,r2
 2003aec:	2005883a 	mov	r2,r4
 2003af0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2003af4:	e13ffe17 	ldw	r4,-8(fp)
 2003af8:	e17fff17 	ldw	r5,-4(fp)
 2003afc:	d8000015 	stw	zero,0(sp)
 2003b00:	01808034 	movhi	r6,512
 2003b04:	318edb04 	addi	r6,r6,15212
 2003b08:	e1fffd17 	ldw	r7,-12(fp)
 2003b0c:	20047780 	call	2004778 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2003b10:	e0bffd17 	ldw	r2,-12(fp)
 2003b14:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2003b18:	e0bffd17 	ldw	r2,-12(fp)
 2003b1c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2003b20:	00808074 	movhi	r2,513
 2003b24:	10a33d04 	addi	r2,r2,-29452
 2003b28:	10800017 	ldw	r2,0(r2)
 2003b2c:	100b883a 	mov	r5,r2
 2003b30:	01808034 	movhi	r6,512
 2003b34:	318f6504 	addi	r6,r6,15764
 2003b38:	e1fffd17 	ldw	r7,-12(fp)
 2003b3c:	20044100 	call	2004410 <alt_alarm_start>
 2003b40:	1004403a 	cmpge	r2,r2,zero
 2003b44:	1000041e 	bne	r2,zero,2003b58 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2003b48:	e0fffd17 	ldw	r3,-12(fp)
 2003b4c:	00a00034 	movhi	r2,32768
 2003b50:	10bfffc4 	addi	r2,r2,-1
 2003b54:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2003b58:	e037883a 	mov	sp,fp
 2003b5c:	dfc00117 	ldw	ra,4(sp)
 2003b60:	df000017 	ldw	fp,0(sp)
 2003b64:	dec00204 	addi	sp,sp,8
 2003b68:	f800283a 	ret

02003b6c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2003b6c:	defff804 	addi	sp,sp,-32
 2003b70:	df000715 	stw	fp,28(sp)
 2003b74:	df000704 	addi	fp,sp,28
 2003b78:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2003b7c:	e0bfff17 	ldw	r2,-4(fp)
 2003b80:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 2003b84:	e0bffe17 	ldw	r2,-8(fp)
 2003b88:	10800017 	ldw	r2,0(r2)
 2003b8c:	e0bffd15 	stw	r2,-12(fp)
 2003b90:	00000006 	br	2003b94 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2003b94:	e0bffd17 	ldw	r2,-12(fp)
 2003b98:	10800104 	addi	r2,r2,4
 2003b9c:	10800037 	ldwio	r2,0(r2)
 2003ba0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2003ba4:	e0bffc17 	ldw	r2,-16(fp)
 2003ba8:	1080c00c 	andi	r2,r2,768
 2003bac:	1005003a 	cmpeq	r2,r2,zero
 2003bb0:	1000741e 	bne	r2,zero,2003d84 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2003bb4:	e0bffc17 	ldw	r2,-16(fp)
 2003bb8:	1080400c 	andi	r2,r2,256
 2003bbc:	1005003a 	cmpeq	r2,r2,zero
 2003bc0:	1000351e 	bne	r2,zero,2003c98 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2003bc4:	00800074 	movhi	r2,1
 2003bc8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2003bcc:	e0bffe17 	ldw	r2,-8(fp)
 2003bd0:	10800a17 	ldw	r2,40(r2)
 2003bd4:	10800044 	addi	r2,r2,1
 2003bd8:	1081ffcc 	andi	r2,r2,2047
 2003bdc:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 2003be0:	e0bffe17 	ldw	r2,-8(fp)
 2003be4:	10c00b17 	ldw	r3,44(r2)
 2003be8:	e0bffa17 	ldw	r2,-24(fp)
 2003bec:	18801626 	beq	r3,r2,2003c48 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2003bf0:	e0bffd17 	ldw	r2,-12(fp)
 2003bf4:	10800037 	ldwio	r2,0(r2)
 2003bf8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2003bfc:	e0bffb17 	ldw	r2,-20(fp)
 2003c00:	10a0000c 	andi	r2,r2,32768
 2003c04:	1005003a 	cmpeq	r2,r2,zero
 2003c08:	10000f1e 	bne	r2,zero,2003c48 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2003c0c:	e0bffe17 	ldw	r2,-8(fp)
 2003c10:	10c00a17 	ldw	r3,40(r2)
 2003c14:	e0bffb17 	ldw	r2,-20(fp)
 2003c18:	1009883a 	mov	r4,r2
 2003c1c:	e0bffe17 	ldw	r2,-8(fp)
 2003c20:	1885883a 	add	r2,r3,r2
 2003c24:	10800e04 	addi	r2,r2,56
 2003c28:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2003c2c:	e0bffe17 	ldw	r2,-8(fp)
 2003c30:	10800a17 	ldw	r2,40(r2)
 2003c34:	10800044 	addi	r2,r2,1
 2003c38:	10c1ffcc 	andi	r3,r2,2047
 2003c3c:	e0bffe17 	ldw	r2,-8(fp)
 2003c40:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2003c44:	003fe106 	br	2003bcc <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2003c48:	e0bffb17 	ldw	r2,-20(fp)
 2003c4c:	10bfffec 	andhi	r2,r2,65535
 2003c50:	1005003a 	cmpeq	r2,r2,zero
 2003c54:	1000101e 	bne	r2,zero,2003c98 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2003c58:	e0bffe17 	ldw	r2,-8(fp)
 2003c5c:	10c00817 	ldw	r3,32(r2)
 2003c60:	00bfff84 	movi	r2,-2
 2003c64:	1886703a 	and	r3,r3,r2
 2003c68:	e0bffe17 	ldw	r2,-8(fp)
 2003c6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2003c70:	e0bffd17 	ldw	r2,-12(fp)
 2003c74:	11000104 	addi	r4,r2,4
 2003c78:	e0bffe17 	ldw	r2,-8(fp)
 2003c7c:	10800817 	ldw	r2,32(r2)
 2003c80:	1007883a 	mov	r3,r2
 2003c84:	2005883a 	mov	r2,r4
 2003c88:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2003c8c:	e0bffd17 	ldw	r2,-12(fp)
 2003c90:	10800104 	addi	r2,r2,4
 2003c94:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2003c98:	e0bffc17 	ldw	r2,-16(fp)
 2003c9c:	1080800c 	andi	r2,r2,512
 2003ca0:	1005003a 	cmpeq	r2,r2,zero
 2003ca4:	103fbb1e 	bne	r2,zero,2003b94 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2003ca8:	e0bffc17 	ldw	r2,-16(fp)
 2003cac:	10bfffec 	andhi	r2,r2,65535
 2003cb0:	1004d43a 	srli	r2,r2,16
 2003cb4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2003cb8:	00001506 	br	2003d10 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2003cbc:	e13ffd17 	ldw	r4,-12(fp)
 2003cc0:	e0bffe17 	ldw	r2,-8(fp)
 2003cc4:	10c00d17 	ldw	r3,52(r2)
 2003cc8:	e0bffe17 	ldw	r2,-8(fp)
 2003ccc:	1885883a 	add	r2,r3,r2
 2003cd0:	10820e04 	addi	r2,r2,2104
 2003cd4:	10800003 	ldbu	r2,0(r2)
 2003cd8:	10c03fcc 	andi	r3,r2,255
 2003cdc:	18c0201c 	xori	r3,r3,128
 2003ce0:	18ffe004 	addi	r3,r3,-128
 2003ce4:	2005883a 	mov	r2,r4
 2003ce8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2003cec:	e0bffe17 	ldw	r2,-8(fp)
 2003cf0:	10800d17 	ldw	r2,52(r2)
 2003cf4:	10800044 	addi	r2,r2,1
 2003cf8:	10c1ffcc 	andi	r3,r2,2047
 2003cfc:	e0bffe17 	ldw	r2,-8(fp)
 2003d00:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2003d04:	e0bff917 	ldw	r2,-28(fp)
 2003d08:	10bfffc4 	addi	r2,r2,-1
 2003d0c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2003d10:	e0bff917 	ldw	r2,-28(fp)
 2003d14:	1005003a 	cmpeq	r2,r2,zero
 2003d18:	1000051e 	bne	r2,zero,2003d30 <altera_avalon_jtag_uart_irq+0x1c4>
 2003d1c:	e0bffe17 	ldw	r2,-8(fp)
 2003d20:	10c00d17 	ldw	r3,52(r2)
 2003d24:	e0bffe17 	ldw	r2,-8(fp)
 2003d28:	10800c17 	ldw	r2,48(r2)
 2003d2c:	18bfe31e 	bne	r3,r2,2003cbc <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2003d30:	e0bff917 	ldw	r2,-28(fp)
 2003d34:	1005003a 	cmpeq	r2,r2,zero
 2003d38:	103f961e 	bne	r2,zero,2003b94 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2003d3c:	e0bffe17 	ldw	r2,-8(fp)
 2003d40:	10c00817 	ldw	r3,32(r2)
 2003d44:	00bfff44 	movi	r2,-3
 2003d48:	1886703a 	and	r3,r3,r2
 2003d4c:	e0bffe17 	ldw	r2,-8(fp)
 2003d50:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2003d54:	e0bffe17 	ldw	r2,-8(fp)
 2003d58:	10800017 	ldw	r2,0(r2)
 2003d5c:	11000104 	addi	r4,r2,4
 2003d60:	e0bffe17 	ldw	r2,-8(fp)
 2003d64:	10800817 	ldw	r2,32(r2)
 2003d68:	1007883a 	mov	r3,r2
 2003d6c:	2005883a 	mov	r2,r4
 2003d70:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2003d74:	e0bffd17 	ldw	r2,-12(fp)
 2003d78:	10800104 	addi	r2,r2,4
 2003d7c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2003d80:	003f8406 	br	2003b94 <altera_avalon_jtag_uart_irq+0x28>
}
 2003d84:	e037883a 	mov	sp,fp
 2003d88:	df000017 	ldw	fp,0(sp)
 2003d8c:	dec00104 	addi	sp,sp,4
 2003d90:	f800283a 	ret

02003d94 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2003d94:	defffc04 	addi	sp,sp,-16
 2003d98:	df000315 	stw	fp,12(sp)
 2003d9c:	df000304 	addi	fp,sp,12
 2003da0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2003da4:	e0bfff17 	ldw	r2,-4(fp)
 2003da8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2003dac:	e0bffe17 	ldw	r2,-8(fp)
 2003db0:	10800017 	ldw	r2,0(r2)
 2003db4:	10800104 	addi	r2,r2,4
 2003db8:	10800037 	ldwio	r2,0(r2)
 2003dbc:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2003dc0:	e0bffd17 	ldw	r2,-12(fp)
 2003dc4:	1081000c 	andi	r2,r2,1024
 2003dc8:	1005003a 	cmpeq	r2,r2,zero
 2003dcc:	10000c1e 	bne	r2,zero,2003e00 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2003dd0:	e0bffe17 	ldw	r2,-8(fp)
 2003dd4:	10800017 	ldw	r2,0(r2)
 2003dd8:	11000104 	addi	r4,r2,4
 2003ddc:	e0bffe17 	ldw	r2,-8(fp)
 2003de0:	10800817 	ldw	r2,32(r2)
 2003de4:	10810014 	ori	r2,r2,1024
 2003de8:	1007883a 	mov	r3,r2
 2003dec:	2005883a 	mov	r2,r4
 2003df0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 2003df4:	e0bffe17 	ldw	r2,-8(fp)
 2003df8:	10000915 	stw	zero,36(r2)
 2003dfc:	00000a06 	br	2003e28 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2003e00:	e0bffe17 	ldw	r2,-8(fp)
 2003e04:	10c00917 	ldw	r3,36(r2)
 2003e08:	00a00034 	movhi	r2,32768
 2003e0c:	10bfff04 	addi	r2,r2,-4
 2003e10:	10c00536 	bltu	r2,r3,2003e28 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 2003e14:	e0bffe17 	ldw	r2,-8(fp)
 2003e18:	10800917 	ldw	r2,36(r2)
 2003e1c:	10c00044 	addi	r3,r2,1
 2003e20:	e0bffe17 	ldw	r2,-8(fp)
 2003e24:	10c00915 	stw	r3,36(r2)
 2003e28:	00808074 	movhi	r2,513
 2003e2c:	10a33d04 	addi	r2,r2,-29452
 2003e30:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2003e34:	e037883a 	mov	sp,fp
 2003e38:	df000017 	ldw	fp,0(sp)
 2003e3c:	dec00104 	addi	sp,sp,4
 2003e40:	f800283a 	ret

02003e44 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2003e44:	defffc04 	addi	sp,sp,-16
 2003e48:	df000315 	stw	fp,12(sp)
 2003e4c:	df000304 	addi	fp,sp,12
 2003e50:	e13ffd15 	stw	r4,-12(fp)
 2003e54:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2003e58:	00000706 	br	2003e78 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 2003e5c:	e0bffe17 	ldw	r2,-8(fp)
 2003e60:	1090000c 	andi	r2,r2,16384
 2003e64:	1005003a 	cmpeq	r2,r2,zero
 2003e68:	1000031e 	bne	r2,zero,2003e78 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 2003e6c:	00bffd44 	movi	r2,-11
 2003e70:	e0bfff15 	stw	r2,-4(fp)
 2003e74:	00000b06 	br	2003ea4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2003e78:	e0bffd17 	ldw	r2,-12(fp)
 2003e7c:	10c00d17 	ldw	r3,52(r2)
 2003e80:	e0bffd17 	ldw	r2,-12(fp)
 2003e84:	10800c17 	ldw	r2,48(r2)
 2003e88:	18800526 	beq	r3,r2,2003ea0 <altera_avalon_jtag_uart_close+0x5c>
 2003e8c:	e0bffd17 	ldw	r2,-12(fp)
 2003e90:	10c00917 	ldw	r3,36(r2)
 2003e94:	e0bffd17 	ldw	r2,-12(fp)
 2003e98:	10800117 	ldw	r2,4(r2)
 2003e9c:	18bfef36 	bltu	r3,r2,2003e5c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2003ea0:	e03fff15 	stw	zero,-4(fp)
 2003ea4:	e0bfff17 	ldw	r2,-4(fp)
}
 2003ea8:	e037883a 	mov	sp,fp
 2003eac:	df000017 	ldw	fp,0(sp)
 2003eb0:	dec00104 	addi	sp,sp,4
 2003eb4:	f800283a 	ret

02003eb8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2003eb8:	defff804 	addi	sp,sp,-32
 2003ebc:	df000715 	stw	fp,28(sp)
 2003ec0:	df000704 	addi	fp,sp,28
 2003ec4:	e13ffb15 	stw	r4,-20(fp)
 2003ec8:	e17ffc15 	stw	r5,-16(fp)
 2003ecc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 2003ed0:	00bff9c4 	movi	r2,-25
 2003ed4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 2003ed8:	e0bffc17 	ldw	r2,-16(fp)
 2003edc:	e0bfff15 	stw	r2,-4(fp)
 2003ee0:	e0ffff17 	ldw	r3,-4(fp)
 2003ee4:	189a8060 	cmpeqi	r2,r3,27137
 2003ee8:	1000041e 	bne	r2,zero,2003efc <altera_avalon_jtag_uart_ioctl+0x44>
 2003eec:	e0ffff17 	ldw	r3,-4(fp)
 2003ef0:	189a80a0 	cmpeqi	r2,r3,27138
 2003ef4:	10001b1e 	bne	r2,zero,2003f64 <altera_avalon_jtag_uart_ioctl+0xac>
 2003ef8:	00002706 	br	2003f98 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2003efc:	e0bffb17 	ldw	r2,-20(fp)
 2003f00:	10c00117 	ldw	r3,4(r2)
 2003f04:	00a00034 	movhi	r2,32768
 2003f08:	10bfffc4 	addi	r2,r2,-1
 2003f0c:	18802226 	beq	r3,r2,2003f98 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 2003f10:	e0bffd17 	ldw	r2,-12(fp)
 2003f14:	10800017 	ldw	r2,0(r2)
 2003f18:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2003f1c:	e0bff917 	ldw	r2,-28(fp)
 2003f20:	10800090 	cmplti	r2,r2,2
 2003f24:	1000071e 	bne	r2,zero,2003f44 <altera_avalon_jtag_uart_ioctl+0x8c>
 2003f28:	e0fff917 	ldw	r3,-28(fp)
 2003f2c:	00a00034 	movhi	r2,32768
 2003f30:	10bfffc4 	addi	r2,r2,-1
 2003f34:	18800326 	beq	r3,r2,2003f44 <altera_avalon_jtag_uart_ioctl+0x8c>
 2003f38:	e0bff917 	ldw	r2,-28(fp)
 2003f3c:	e0bffe15 	stw	r2,-8(fp)
 2003f40:	00000306 	br	2003f50 <altera_avalon_jtag_uart_ioctl+0x98>
 2003f44:	00e00034 	movhi	r3,32768
 2003f48:	18ffff84 	addi	r3,r3,-2
 2003f4c:	e0fffe15 	stw	r3,-8(fp)
 2003f50:	e0bffb17 	ldw	r2,-20(fp)
 2003f54:	e0fffe17 	ldw	r3,-8(fp)
 2003f58:	10c00115 	stw	r3,4(r2)
      rc = 0;
 2003f5c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 2003f60:	00000d06 	br	2003f98 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2003f64:	e0bffb17 	ldw	r2,-20(fp)
 2003f68:	10c00117 	ldw	r3,4(r2)
 2003f6c:	00a00034 	movhi	r2,32768
 2003f70:	10bfffc4 	addi	r2,r2,-1
 2003f74:	18800826 	beq	r3,r2,2003f98 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2003f78:	e13ffd17 	ldw	r4,-12(fp)
 2003f7c:	e0bffb17 	ldw	r2,-20(fp)
 2003f80:	10c00917 	ldw	r3,36(r2)
 2003f84:	e0bffb17 	ldw	r2,-20(fp)
 2003f88:	10800117 	ldw	r2,4(r2)
 2003f8c:	1885803a 	cmpltu	r2,r3,r2
 2003f90:	20800015 	stw	r2,0(r4)
      rc = 0;
 2003f94:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 2003f98:	e0bffa17 	ldw	r2,-24(fp)
}
 2003f9c:	e037883a 	mov	sp,fp
 2003fa0:	df000017 	ldw	fp,0(sp)
 2003fa4:	dec00104 	addi	sp,sp,4
 2003fa8:	f800283a 	ret

02003fac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2003fac:	defff204 	addi	sp,sp,-56
 2003fb0:	dfc00d15 	stw	ra,52(sp)
 2003fb4:	df000c15 	stw	fp,48(sp)
 2003fb8:	df000c04 	addi	fp,sp,48
 2003fbc:	e13ffb15 	stw	r4,-20(fp)
 2003fc0:	e17ffc15 	stw	r5,-16(fp)
 2003fc4:	e1bffd15 	stw	r6,-12(fp)
 2003fc8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 2003fcc:	e0bffc17 	ldw	r2,-16(fp)
 2003fd0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2003fd4:	00004806 	br	20040f8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2003fd8:	e0bffb17 	ldw	r2,-20(fp)
 2003fdc:	10800a17 	ldw	r2,40(r2)
 2003fe0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 2003fe4:	e0bffb17 	ldw	r2,-20(fp)
 2003fe8:	10800b17 	ldw	r2,44(r2)
 2003fec:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 2003ff0:	e0fff717 	ldw	r3,-36(fp)
 2003ff4:	e0bff617 	ldw	r2,-40(fp)
 2003ff8:	18800536 	bltu	r3,r2,2004010 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2003ffc:	e0bff717 	ldw	r2,-36(fp)
 2004000:	e0fff617 	ldw	r3,-40(fp)
 2004004:	10c5c83a 	sub	r2,r2,r3
 2004008:	e0bff815 	stw	r2,-32(fp)
 200400c:	00000406 	br	2004020 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2004010:	00820004 	movi	r2,2048
 2004014:	e0fff617 	ldw	r3,-40(fp)
 2004018:	10c5c83a 	sub	r2,r2,r3
 200401c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2004020:	e0bff817 	ldw	r2,-32(fp)
 2004024:	1005003a 	cmpeq	r2,r2,zero
 2004028:	10001f1e 	bne	r2,zero,20040a8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 200402c:	e0fffd17 	ldw	r3,-12(fp)
 2004030:	e0bff817 	ldw	r2,-32(fp)
 2004034:	1880022e 	bgeu	r3,r2,2004040 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 2004038:	e0bffd17 	ldw	r2,-12(fp)
 200403c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2004040:	e0bffb17 	ldw	r2,-20(fp)
 2004044:	10c00e04 	addi	r3,r2,56
 2004048:	e0bff617 	ldw	r2,-40(fp)
 200404c:	1887883a 	add	r3,r3,r2
 2004050:	e0bffa17 	ldw	r2,-24(fp)
 2004054:	1009883a 	mov	r4,r2
 2004058:	180b883a 	mov	r5,r3
 200405c:	e1bff817 	ldw	r6,-32(fp)
 2004060:	200100c0 	call	200100c <memcpy>
      ptr   += n;
 2004064:	e0fff817 	ldw	r3,-32(fp)
 2004068:	e0bffa17 	ldw	r2,-24(fp)
 200406c:	10c5883a 	add	r2,r2,r3
 2004070:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 2004074:	e0fffd17 	ldw	r3,-12(fp)
 2004078:	e0bff817 	ldw	r2,-32(fp)
 200407c:	1885c83a 	sub	r2,r3,r2
 2004080:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2004084:	e0fff617 	ldw	r3,-40(fp)
 2004088:	e0bff817 	ldw	r2,-32(fp)
 200408c:	1885883a 	add	r2,r3,r2
 2004090:	10c1ffcc 	andi	r3,r2,2047
 2004094:	e0bffb17 	ldw	r2,-20(fp)
 2004098:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 200409c:	e0bffd17 	ldw	r2,-12(fp)
 20040a0:	10800048 	cmpgei	r2,r2,1
 20040a4:	103fcc1e 	bne	r2,zero,2003fd8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 20040a8:	e0fffa17 	ldw	r3,-24(fp)
 20040ac:	e0bffc17 	ldw	r2,-16(fp)
 20040b0:	1880141e 	bne	r3,r2,2004104 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 20040b4:	e0bffe17 	ldw	r2,-8(fp)
 20040b8:	1090000c 	andi	r2,r2,16384
 20040bc:	1004c03a 	cmpne	r2,r2,zero
 20040c0:	1000101e 	bne	r2,zero,2004104 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 20040c4:	e0bffb17 	ldw	r2,-20(fp)
 20040c8:	10c00a17 	ldw	r3,40(r2)
 20040cc:	e0bff717 	ldw	r2,-36(fp)
 20040d0:	1880051e 	bne	r3,r2,20040e8 <altera_avalon_jtag_uart_read+0x13c>
 20040d4:	e0bffb17 	ldw	r2,-20(fp)
 20040d8:	10c00917 	ldw	r3,36(r2)
 20040dc:	e0bffb17 	ldw	r2,-20(fp)
 20040e0:	10800117 	ldw	r2,4(r2)
 20040e4:	18bff736 	bltu	r3,r2,20040c4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 20040e8:	e0bffb17 	ldw	r2,-20(fp)
 20040ec:	10c00a17 	ldw	r3,40(r2)
 20040f0:	e0bff717 	ldw	r2,-36(fp)
 20040f4:	18800326 	beq	r3,r2,2004104 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20040f8:	e0bffd17 	ldw	r2,-12(fp)
 20040fc:	10800048 	cmpgei	r2,r2,1
 2004100:	103fb51e 	bne	r2,zero,2003fd8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2004104:	e0fffa17 	ldw	r3,-24(fp)
 2004108:	e0bffc17 	ldw	r2,-16(fp)
 200410c:	18801926 	beq	r3,r2,2004174 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004110:	0005303a 	rdctl	r2,status
 2004114:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004118:	e0fff517 	ldw	r3,-44(fp)
 200411c:	00bfff84 	movi	r2,-2
 2004120:	1884703a 	and	r2,r3,r2
 2004124:	1001703a 	wrctl	status,r2
  
  return context;
 2004128:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 200412c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2004130:	e0bffb17 	ldw	r2,-20(fp)
 2004134:	10800817 	ldw	r2,32(r2)
 2004138:	10c00054 	ori	r3,r2,1
 200413c:	e0bffb17 	ldw	r2,-20(fp)
 2004140:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2004144:	e0bffb17 	ldw	r2,-20(fp)
 2004148:	10800017 	ldw	r2,0(r2)
 200414c:	11000104 	addi	r4,r2,4
 2004150:	e0bffb17 	ldw	r2,-20(fp)
 2004154:	10800817 	ldw	r2,32(r2)
 2004158:	1007883a 	mov	r3,r2
 200415c:	2005883a 	mov	r2,r4
 2004160:	10c00035 	stwio	r3,0(r2)
 2004164:	e0bff917 	ldw	r2,-28(fp)
 2004168:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200416c:	e0bff417 	ldw	r2,-48(fp)
 2004170:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2004174:	e0fffa17 	ldw	r3,-24(fp)
 2004178:	e0bffc17 	ldw	r2,-16(fp)
 200417c:	18800526 	beq	r3,r2,2004194 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 2004180:	e0fffa17 	ldw	r3,-24(fp)
 2004184:	e0bffc17 	ldw	r2,-16(fp)
 2004188:	1887c83a 	sub	r3,r3,r2
 200418c:	e0ffff15 	stw	r3,-4(fp)
 2004190:	00000906 	br	20041b8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 2004194:	e0bffe17 	ldw	r2,-8(fp)
 2004198:	1090000c 	andi	r2,r2,16384
 200419c:	1005003a 	cmpeq	r2,r2,zero
 20041a0:	1000031e 	bne	r2,zero,20041b0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 20041a4:	00bffd44 	movi	r2,-11
 20041a8:	e0bfff15 	stw	r2,-4(fp)
 20041ac:	00000206 	br	20041b8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 20041b0:	00bffec4 	movi	r2,-5
 20041b4:	e0bfff15 	stw	r2,-4(fp)
 20041b8:	e0bfff17 	ldw	r2,-4(fp)
}
 20041bc:	e037883a 	mov	sp,fp
 20041c0:	dfc00117 	ldw	ra,4(sp)
 20041c4:	df000017 	ldw	fp,0(sp)
 20041c8:	dec00204 	addi	sp,sp,8
 20041cc:	f800283a 	ret

020041d0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 20041d0:	defff204 	addi	sp,sp,-56
 20041d4:	dfc00d15 	stw	ra,52(sp)
 20041d8:	df000c15 	stw	fp,48(sp)
 20041dc:	df000c04 	addi	fp,sp,48
 20041e0:	e13ffb15 	stw	r4,-20(fp)
 20041e4:	e17ffc15 	stw	r5,-16(fp)
 20041e8:	e1bffd15 	stw	r6,-12(fp)
 20041ec:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 20041f0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 20041f4:	e0bffc17 	ldw	r2,-16(fp)
 20041f8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20041fc:	00003a06 	br	20042e8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2004200:	e0bffb17 	ldw	r2,-20(fp)
 2004204:	10800c17 	ldw	r2,48(r2)
 2004208:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 200420c:	e0bffb17 	ldw	r2,-20(fp)
 2004210:	10800d17 	ldw	r2,52(r2)
 2004214:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 2004218:	e0fffa17 	ldw	r3,-24(fp)
 200421c:	e0bff917 	ldw	r2,-28(fp)
 2004220:	1880062e 	bgeu	r3,r2,200423c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2004224:	e0fff917 	ldw	r3,-28(fp)
 2004228:	e0bffa17 	ldw	r2,-24(fp)
 200422c:	1885c83a 	sub	r2,r3,r2
 2004230:	10bfffc4 	addi	r2,r2,-1
 2004234:	e0bff815 	stw	r2,-32(fp)
 2004238:	00000c06 	br	200426c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 200423c:	e0bff917 	ldw	r2,-28(fp)
 2004240:	1005003a 	cmpeq	r2,r2,zero
 2004244:	1000051e 	bne	r2,zero,200425c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2004248:	00820004 	movi	r2,2048
 200424c:	e0fffa17 	ldw	r3,-24(fp)
 2004250:	10c5c83a 	sub	r2,r2,r3
 2004254:	e0bff815 	stw	r2,-32(fp)
 2004258:	00000406 	br	200426c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 200425c:	0081ffc4 	movi	r2,2047
 2004260:	e0fffa17 	ldw	r3,-24(fp)
 2004264:	10c5c83a 	sub	r2,r2,r3
 2004268:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 200426c:	e0bff817 	ldw	r2,-32(fp)
 2004270:	1005003a 	cmpeq	r2,r2,zero
 2004274:	10001f1e 	bne	r2,zero,20042f4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 2004278:	e0fffd17 	ldw	r3,-12(fp)
 200427c:	e0bff817 	ldw	r2,-32(fp)
 2004280:	1880022e 	bgeu	r3,r2,200428c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 2004284:	e0bffd17 	ldw	r2,-12(fp)
 2004288:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 200428c:	e0bffb17 	ldw	r2,-20(fp)
 2004290:	10c20e04 	addi	r3,r2,2104
 2004294:	e0bffa17 	ldw	r2,-24(fp)
 2004298:	1885883a 	add	r2,r3,r2
 200429c:	e0fffc17 	ldw	r3,-16(fp)
 20042a0:	1009883a 	mov	r4,r2
 20042a4:	180b883a 	mov	r5,r3
 20042a8:	e1bff817 	ldw	r6,-32(fp)
 20042ac:	200100c0 	call	200100c <memcpy>
      ptr   += n;
 20042b0:	e0fff817 	ldw	r3,-32(fp)
 20042b4:	e0bffc17 	ldw	r2,-16(fp)
 20042b8:	10c5883a 	add	r2,r2,r3
 20042bc:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 20042c0:	e0fffd17 	ldw	r3,-12(fp)
 20042c4:	e0bff817 	ldw	r2,-32(fp)
 20042c8:	1885c83a 	sub	r2,r3,r2
 20042cc:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20042d0:	e0fffa17 	ldw	r3,-24(fp)
 20042d4:	e0bff817 	ldw	r2,-32(fp)
 20042d8:	1885883a 	add	r2,r3,r2
 20042dc:	10c1ffcc 	andi	r3,r2,2047
 20042e0:	e0bffb17 	ldw	r2,-20(fp)
 20042e4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20042e8:	e0bffd17 	ldw	r2,-12(fp)
 20042ec:	10800048 	cmpgei	r2,r2,1
 20042f0:	103fc31e 	bne	r2,zero,2004200 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20042f4:	0005303a 	rdctl	r2,status
 20042f8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20042fc:	e0fff517 	ldw	r3,-44(fp)
 2004300:	00bfff84 	movi	r2,-2
 2004304:	1884703a 	and	r2,r3,r2
 2004308:	1001703a 	wrctl	status,r2
  
  return context;
 200430c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2004310:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2004314:	e0bffb17 	ldw	r2,-20(fp)
 2004318:	10800817 	ldw	r2,32(r2)
 200431c:	10c00094 	ori	r3,r2,2
 2004320:	e0bffb17 	ldw	r2,-20(fp)
 2004324:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2004328:	e0bffb17 	ldw	r2,-20(fp)
 200432c:	10800017 	ldw	r2,0(r2)
 2004330:	11000104 	addi	r4,r2,4
 2004334:	e0bffb17 	ldw	r2,-20(fp)
 2004338:	10800817 	ldw	r2,32(r2)
 200433c:	1007883a 	mov	r3,r2
 2004340:	2005883a 	mov	r2,r4
 2004344:	10c00035 	stwio	r3,0(r2)
 2004348:	e0bff717 	ldw	r2,-36(fp)
 200434c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004350:	e0bff417 	ldw	r2,-48(fp)
 2004354:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2004358:	e0bffd17 	ldw	r2,-12(fp)
 200435c:	10800050 	cmplti	r2,r2,1
 2004360:	1000111e 	bne	r2,zero,20043a8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 2004364:	e0bffe17 	ldw	r2,-8(fp)
 2004368:	1090000c 	andi	r2,r2,16384
 200436c:	1004c03a 	cmpne	r2,r2,zero
 2004370:	1000101e 	bne	r2,zero,20043b4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2004374:	e0bffb17 	ldw	r2,-20(fp)
 2004378:	10c00d17 	ldw	r3,52(r2)
 200437c:	e0bff917 	ldw	r2,-28(fp)
 2004380:	1880051e 	bne	r3,r2,2004398 <altera_avalon_jtag_uart_write+0x1c8>
 2004384:	e0bffb17 	ldw	r2,-20(fp)
 2004388:	10c00917 	ldw	r3,36(r2)
 200438c:	e0bffb17 	ldw	r2,-20(fp)
 2004390:	10800117 	ldw	r2,4(r2)
 2004394:	18bff736 	bltu	r3,r2,2004374 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 2004398:	e0bffb17 	ldw	r2,-20(fp)
 200439c:	10c00d17 	ldw	r3,52(r2)
 20043a0:	e0bff917 	ldw	r2,-28(fp)
 20043a4:	18800326 	beq	r3,r2,20043b4 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 20043a8:	e0bffd17 	ldw	r2,-12(fp)
 20043ac:	10800048 	cmpgei	r2,r2,1
 20043b0:	103fcd1e 	bne	r2,zero,20042e8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 20043b4:	e0fffc17 	ldw	r3,-16(fp)
 20043b8:	e0bff617 	ldw	r2,-40(fp)
 20043bc:	18800526 	beq	r3,r2,20043d4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 20043c0:	e0fffc17 	ldw	r3,-16(fp)
 20043c4:	e0bff617 	ldw	r2,-40(fp)
 20043c8:	1887c83a 	sub	r3,r3,r2
 20043cc:	e0ffff15 	stw	r3,-4(fp)
 20043d0:	00000906 	br	20043f8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 20043d4:	e0bffe17 	ldw	r2,-8(fp)
 20043d8:	1090000c 	andi	r2,r2,16384
 20043dc:	1005003a 	cmpeq	r2,r2,zero
 20043e0:	1000031e 	bne	r2,zero,20043f0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 20043e4:	00bffd44 	movi	r2,-11
 20043e8:	e0bfff15 	stw	r2,-4(fp)
 20043ec:	00000206 	br	20043f8 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 20043f0:	00bffec4 	movi	r2,-5
 20043f4:	e0bfff15 	stw	r2,-4(fp)
 20043f8:	e0bfff17 	ldw	r2,-4(fp)
}
 20043fc:	e037883a 	mov	sp,fp
 2004400:	dfc00117 	ldw	ra,4(sp)
 2004404:	df000017 	ldw	fp,0(sp)
 2004408:	dec00204 	addi	sp,sp,8
 200440c:	f800283a 	ret

02004410 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2004410:	defff404 	addi	sp,sp,-48
 2004414:	df000b15 	stw	fp,44(sp)
 2004418:	df000b04 	addi	fp,sp,44
 200441c:	e13ffb15 	stw	r4,-20(fp)
 2004420:	e17ffc15 	stw	r5,-16(fp)
 2004424:	e1bffd15 	stw	r6,-12(fp)
 2004428:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 200442c:	e03ff915 	stw	zero,-28(fp)
 2004430:	00808074 	movhi	r2,513
 2004434:	10a33d04 	addi	r2,r2,-29452
 2004438:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 200443c:	1005003a 	cmpeq	r2,r2,zero
 2004440:	1000411e 	bne	r2,zero,2004548 <alt_alarm_start+0x138>
  {
    if (alarm)
 2004444:	e0bffb17 	ldw	r2,-20(fp)
 2004448:	1005003a 	cmpeq	r2,r2,zero
 200444c:	10003b1e 	bne	r2,zero,200453c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 2004450:	e0fffb17 	ldw	r3,-20(fp)
 2004454:	e0bffd17 	ldw	r2,-12(fp)
 2004458:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 200445c:	e0fffb17 	ldw	r3,-20(fp)
 2004460:	e0bffe17 	ldw	r2,-8(fp)
 2004464:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004468:	0005303a 	rdctl	r2,status
 200446c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004470:	e0fff817 	ldw	r3,-32(fp)
 2004474:	00bfff84 	movi	r2,-2
 2004478:	1884703a 	and	r2,r3,r2
 200447c:	1001703a 	wrctl	status,r2
  
  return context;
 2004480:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 2004484:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2004488:	00808074 	movhi	r2,513
 200448c:	10a33e04 	addi	r2,r2,-29448
 2004490:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 2004494:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2004498:	e0fffc17 	ldw	r3,-16(fp)
 200449c:	e0bff917 	ldw	r2,-28(fp)
 20044a0:	1885883a 	add	r2,r3,r2
 20044a4:	10c00044 	addi	r3,r2,1
 20044a8:	e0bffb17 	ldw	r2,-20(fp)
 20044ac:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 20044b0:	e0bffb17 	ldw	r2,-20(fp)
 20044b4:	10c00217 	ldw	r3,8(r2)
 20044b8:	e0bff917 	ldw	r2,-28(fp)
 20044bc:	1880042e 	bgeu	r3,r2,20044d0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 20044c0:	e0fffb17 	ldw	r3,-20(fp)
 20044c4:	00800044 	movi	r2,1
 20044c8:	18800405 	stb	r2,16(r3)
 20044cc:	00000206 	br	20044d8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 20044d0:	e0bffb17 	ldw	r2,-20(fp)
 20044d4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 20044d8:	e0fffb17 	ldw	r3,-20(fp)
 20044dc:	00808034 	movhi	r2,512
 20044e0:	109c8004 	addi	r2,r2,29184
 20044e4:	e0bff615 	stw	r2,-40(fp)
 20044e8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 20044ec:	e0fff717 	ldw	r3,-36(fp)
 20044f0:	e0bff617 	ldw	r2,-40(fp)
 20044f4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 20044f8:	e0bff617 	ldw	r2,-40(fp)
 20044fc:	10c00017 	ldw	r3,0(r2)
 2004500:	e0bff717 	ldw	r2,-36(fp)
 2004504:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2004508:	e0bff617 	ldw	r2,-40(fp)
 200450c:	10c00017 	ldw	r3,0(r2)
 2004510:	e0bff717 	ldw	r2,-36(fp)
 2004514:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 2004518:	e0fff617 	ldw	r3,-40(fp)
 200451c:	e0bff717 	ldw	r2,-36(fp)
 2004520:	18800015 	stw	r2,0(r3)
 2004524:	e0bffa17 	ldw	r2,-24(fp)
 2004528:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200452c:	e0bff517 	ldw	r2,-44(fp)
 2004530:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2004534:	e03fff15 	stw	zero,-4(fp)
 2004538:	00000506 	br	2004550 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 200453c:	00bffa84 	movi	r2,-22
 2004540:	e0bfff15 	stw	r2,-4(fp)
 2004544:	00000206 	br	2004550 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 2004548:	00bfde84 	movi	r2,-134
 200454c:	e0bfff15 	stw	r2,-4(fp)
 2004550:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 2004554:	e037883a 	mov	sp,fp
 2004558:	df000017 	ldw	fp,0(sp)
 200455c:	dec00104 	addi	sp,sp,4
 2004560:	f800283a 	ret

02004564 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2004564:	deffff04 	addi	sp,sp,-4
 2004568:	df000015 	stw	fp,0(sp)
 200456c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 2004570:	e037883a 	mov	sp,fp
 2004574:	df000017 	ldw	fp,0(sp)
 2004578:	dec00104 	addi	sp,sp,4
 200457c:	f800283a 	ret

02004580 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2004580:	defff904 	addi	sp,sp,-28
 2004584:	dfc00615 	stw	ra,24(sp)
 2004588:	df000515 	stw	fp,20(sp)
 200458c:	df000504 	addi	fp,sp,20
 2004590:	e13ffd15 	stw	r4,-12(fp)
 2004594:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2004598:	e0bffd17 	ldw	r2,-12(fp)
 200459c:	1005003a 	cmpeq	r2,r2,zero
 20045a0:	1000041e 	bne	r2,zero,20045b4 <alt_dev_llist_insert+0x34>
 20045a4:	e0bffd17 	ldw	r2,-12(fp)
 20045a8:	10800217 	ldw	r2,8(r2)
 20045ac:	1004c03a 	cmpne	r2,r2,zero
 20045b0:	1000071e 	bne	r2,zero,20045d0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 20045b4:	20046340 	call	2004634 <alt_get_errno>
 20045b8:	1007883a 	mov	r3,r2
 20045bc:	00800584 	movi	r2,22
 20045c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 20045c4:	00bffa84 	movi	r2,-22
 20045c8:	e0bfff15 	stw	r2,-4(fp)
 20045cc:	00001306 	br	200461c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 20045d0:	e0fffd17 	ldw	r3,-12(fp)
 20045d4:	e0bffe17 	ldw	r2,-8(fp)
 20045d8:	e0bffb15 	stw	r2,-20(fp)
 20045dc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 20045e0:	e0fffc17 	ldw	r3,-16(fp)
 20045e4:	e0bffb17 	ldw	r2,-20(fp)
 20045e8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 20045ec:	e0bffb17 	ldw	r2,-20(fp)
 20045f0:	10c00017 	ldw	r3,0(r2)
 20045f4:	e0bffc17 	ldw	r2,-16(fp)
 20045f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 20045fc:	e0bffb17 	ldw	r2,-20(fp)
 2004600:	10c00017 	ldw	r3,0(r2)
 2004604:	e0bffc17 	ldw	r2,-16(fp)
 2004608:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 200460c:	e0fffb17 	ldw	r3,-20(fp)
 2004610:	e0bffc17 	ldw	r2,-16(fp)
 2004614:	18800015 	stw	r2,0(r3)

  return 0;  
 2004618:	e03fff15 	stw	zero,-4(fp)
 200461c:	e0bfff17 	ldw	r2,-4(fp)
}
 2004620:	e037883a 	mov	sp,fp
 2004624:	dfc00117 	ldw	ra,4(sp)
 2004628:	df000017 	ldw	fp,0(sp)
 200462c:	dec00204 	addi	sp,sp,8
 2004630:	f800283a 	ret

02004634 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2004634:	defffd04 	addi	sp,sp,-12
 2004638:	dfc00215 	stw	ra,8(sp)
 200463c:	df000115 	stw	fp,4(sp)
 2004640:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2004644:	00808034 	movhi	r2,512
 2004648:	109c7d04 	addi	r2,r2,29172
 200464c:	10800017 	ldw	r2,0(r2)
 2004650:	1005003a 	cmpeq	r2,r2,zero
 2004654:	1000061e 	bne	r2,zero,2004670 <alt_get_errno+0x3c>
 2004658:	00808034 	movhi	r2,512
 200465c:	109c7d04 	addi	r2,r2,29172
 2004660:	10800017 	ldw	r2,0(r2)
 2004664:	103ee83a 	callr	r2
 2004668:	e0bfff15 	stw	r2,-4(fp)
 200466c:	00000306 	br	200467c <alt_get_errno+0x48>
 2004670:	00808074 	movhi	r2,513
 2004674:	10a33804 	addi	r2,r2,-29472
 2004678:	e0bfff15 	stw	r2,-4(fp)
 200467c:	e0bfff17 	ldw	r2,-4(fp)
}
 2004680:	e037883a 	mov	sp,fp
 2004684:	dfc00117 	ldw	ra,4(sp)
 2004688:	df000017 	ldw	fp,0(sp)
 200468c:	dec00204 	addi	sp,sp,8
 2004690:	f800283a 	ret

02004694 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2004694:	defffd04 	addi	sp,sp,-12
 2004698:	dfc00215 	stw	ra,8(sp)
 200469c:	df000115 	stw	fp,4(sp)
 20046a0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20046a4:	00bfff04 	movi	r2,-4
 20046a8:	00c08034 	movhi	r3,512
 20046ac:	18d5b304 	addi	r3,r3,22220
 20046b0:	1885883a 	add	r2,r3,r2
 20046b4:	e0bfff15 	stw	r2,-4(fp)
 20046b8:	00000606 	br	20046d4 <_do_ctors+0x40>
        (*ctor) (); 
 20046bc:	e0bfff17 	ldw	r2,-4(fp)
 20046c0:	10800017 	ldw	r2,0(r2)
 20046c4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20046c8:	e0bfff17 	ldw	r2,-4(fp)
 20046cc:	10bfff04 	addi	r2,r2,-4
 20046d0:	e0bfff15 	stw	r2,-4(fp)
 20046d4:	e0ffff17 	ldw	r3,-4(fp)
 20046d8:	00808034 	movhi	r2,512
 20046dc:	1095b204 	addi	r2,r2,22216
 20046e0:	18bff62e 	bgeu	r3,r2,20046bc <_do_ctors+0x28>
        (*ctor) (); 
}
 20046e4:	e037883a 	mov	sp,fp
 20046e8:	dfc00117 	ldw	ra,4(sp)
 20046ec:	df000017 	ldw	fp,0(sp)
 20046f0:	dec00204 	addi	sp,sp,8
 20046f4:	f800283a 	ret

020046f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 20046f8:	defffd04 	addi	sp,sp,-12
 20046fc:	dfc00215 	stw	ra,8(sp)
 2004700:	df000115 	stw	fp,4(sp)
 2004704:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2004708:	00bfff04 	movi	r2,-4
 200470c:	00c08034 	movhi	r3,512
 2004710:	18d5b304 	addi	r3,r3,22220
 2004714:	1885883a 	add	r2,r3,r2
 2004718:	e0bfff15 	stw	r2,-4(fp)
 200471c:	00000606 	br	2004738 <_do_dtors+0x40>
        (*dtor) (); 
 2004720:	e0bfff17 	ldw	r2,-4(fp)
 2004724:	10800017 	ldw	r2,0(r2)
 2004728:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200472c:	e0bfff17 	ldw	r2,-4(fp)
 2004730:	10bfff04 	addi	r2,r2,-4
 2004734:	e0bfff15 	stw	r2,-4(fp)
 2004738:	e0ffff17 	ldw	r3,-4(fp)
 200473c:	00808034 	movhi	r2,512
 2004740:	1095b304 	addi	r2,r2,22220
 2004744:	18bff62e 	bgeu	r3,r2,2004720 <_do_dtors+0x28>
        (*dtor) (); 
}
 2004748:	e037883a 	mov	sp,fp
 200474c:	dfc00117 	ldw	ra,4(sp)
 2004750:	df000017 	ldw	fp,0(sp)
 2004754:	dec00204 	addi	sp,sp,8
 2004758:	f800283a 	ret

0200475c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 200475c:	deffff04 	addi	sp,sp,-4
 2004760:	df000015 	stw	fp,0(sp)
 2004764:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 2004768:	e037883a 	mov	sp,fp
 200476c:	df000017 	ldw	fp,0(sp)
 2004770:	dec00104 	addi	sp,sp,4
 2004774:	f800283a 	ret

02004778 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2004778:	defff904 	addi	sp,sp,-28
 200477c:	dfc00615 	stw	ra,24(sp)
 2004780:	df000515 	stw	fp,20(sp)
 2004784:	df000504 	addi	fp,sp,20
 2004788:	e13ffc15 	stw	r4,-16(fp)
 200478c:	e17ffd15 	stw	r5,-12(fp)
 2004790:	e1bffe15 	stw	r6,-8(fp)
 2004794:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2004798:	e0800217 	ldw	r2,8(fp)
 200479c:	d8800015 	stw	r2,0(sp)
 20047a0:	e13ffc17 	ldw	r4,-16(fp)
 20047a4:	e17ffd17 	ldw	r5,-12(fp)
 20047a8:	e1bffe17 	ldw	r6,-8(fp)
 20047ac:	e1ffff17 	ldw	r7,-4(fp)
 20047b0:	200494c0 	call	200494c <alt_iic_isr_register>
}  
 20047b4:	e037883a 	mov	sp,fp
 20047b8:	dfc00117 	ldw	ra,4(sp)
 20047bc:	df000017 	ldw	fp,0(sp)
 20047c0:	dec00204 	addi	sp,sp,8
 20047c4:	f800283a 	ret

020047c8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 20047c8:	defff904 	addi	sp,sp,-28
 20047cc:	df000615 	stw	fp,24(sp)
 20047d0:	df000604 	addi	fp,sp,24
 20047d4:	e13ffe15 	stw	r4,-8(fp)
 20047d8:	e17fff15 	stw	r5,-4(fp)
 20047dc:	e0bfff17 	ldw	r2,-4(fp)
 20047e0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20047e4:	0005303a 	rdctl	r2,status
 20047e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20047ec:	e0fffb17 	ldw	r3,-20(fp)
 20047f0:	00bfff84 	movi	r2,-2
 20047f4:	1884703a 	and	r2,r3,r2
 20047f8:	1001703a 	wrctl	status,r2
  
  return context;
 20047fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2004800:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 2004804:	e0fffc17 	ldw	r3,-16(fp)
 2004808:	00800044 	movi	r2,1
 200480c:	10c4983a 	sll	r2,r2,r3
 2004810:	1007883a 	mov	r3,r2
 2004814:	00808074 	movhi	r2,513
 2004818:	10a33c04 	addi	r2,r2,-29456
 200481c:	10800017 	ldw	r2,0(r2)
 2004820:	1886b03a 	or	r3,r3,r2
 2004824:	00808074 	movhi	r2,513
 2004828:	10a33c04 	addi	r2,r2,-29456
 200482c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2004830:	00808074 	movhi	r2,513
 2004834:	10a33c04 	addi	r2,r2,-29456
 2004838:	10800017 	ldw	r2,0(r2)
 200483c:	100170fa 	wrctl	ienable,r2
 2004840:	e0bffd17 	ldw	r2,-12(fp)
 2004844:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004848:	e0bffa17 	ldw	r2,-24(fp)
 200484c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2004850:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 2004854:	e037883a 	mov	sp,fp
 2004858:	df000017 	ldw	fp,0(sp)
 200485c:	dec00104 	addi	sp,sp,4
 2004860:	f800283a 	ret

02004864 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2004864:	defff904 	addi	sp,sp,-28
 2004868:	df000615 	stw	fp,24(sp)
 200486c:	df000604 	addi	fp,sp,24
 2004870:	e13ffe15 	stw	r4,-8(fp)
 2004874:	e17fff15 	stw	r5,-4(fp)
 2004878:	e0bfff17 	ldw	r2,-4(fp)
 200487c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004880:	0005303a 	rdctl	r2,status
 2004884:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004888:	e0fffb17 	ldw	r3,-20(fp)
 200488c:	00bfff84 	movi	r2,-2
 2004890:	1884703a 	and	r2,r3,r2
 2004894:	1001703a 	wrctl	status,r2
  
  return context;
 2004898:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200489c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 20048a0:	e0fffc17 	ldw	r3,-16(fp)
 20048a4:	00800044 	movi	r2,1
 20048a8:	10c4983a 	sll	r2,r2,r3
 20048ac:	0084303a 	nor	r2,zero,r2
 20048b0:	1007883a 	mov	r3,r2
 20048b4:	00808074 	movhi	r2,513
 20048b8:	10a33c04 	addi	r2,r2,-29456
 20048bc:	10800017 	ldw	r2,0(r2)
 20048c0:	1886703a 	and	r3,r3,r2
 20048c4:	00808074 	movhi	r2,513
 20048c8:	10a33c04 	addi	r2,r2,-29456
 20048cc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20048d0:	00808074 	movhi	r2,513
 20048d4:	10a33c04 	addi	r2,r2,-29456
 20048d8:	10800017 	ldw	r2,0(r2)
 20048dc:	100170fa 	wrctl	ienable,r2
 20048e0:	e0bffd17 	ldw	r2,-12(fp)
 20048e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20048e8:	e0bffa17 	ldw	r2,-24(fp)
 20048ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20048f0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 20048f4:	e037883a 	mov	sp,fp
 20048f8:	df000017 	ldw	fp,0(sp)
 20048fc:	dec00104 	addi	sp,sp,4
 2004900:	f800283a 	ret

02004904 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2004904:	defffc04 	addi	sp,sp,-16
 2004908:	df000315 	stw	fp,12(sp)
 200490c:	df000304 	addi	fp,sp,12
 2004910:	e13ffe15 	stw	r4,-8(fp)
 2004914:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2004918:	000530fa 	rdctl	r2,ienable
 200491c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2004920:	e0ffff17 	ldw	r3,-4(fp)
 2004924:	00800044 	movi	r2,1
 2004928:	10c4983a 	sll	r2,r2,r3
 200492c:	1007883a 	mov	r3,r2
 2004930:	e0bffd17 	ldw	r2,-12(fp)
 2004934:	1884703a 	and	r2,r3,r2
 2004938:	1004c03a 	cmpne	r2,r2,zero
}
 200493c:	e037883a 	mov	sp,fp
 2004940:	df000017 	ldw	fp,0(sp)
 2004944:	dec00104 	addi	sp,sp,4
 2004948:	f800283a 	ret

0200494c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 200494c:	defff404 	addi	sp,sp,-48
 2004950:	dfc00b15 	stw	ra,44(sp)
 2004954:	df000a15 	stw	fp,40(sp)
 2004958:	df000a04 	addi	fp,sp,40
 200495c:	e13ffb15 	stw	r4,-20(fp)
 2004960:	e17ffc15 	stw	r5,-16(fp)
 2004964:	e1bffd15 	stw	r6,-12(fp)
 2004968:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 200496c:	00bffa84 	movi	r2,-22
 2004970:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2004974:	e0bffc17 	ldw	r2,-16(fp)
 2004978:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 200497c:	e0bff917 	ldw	r2,-28(fp)
 2004980:	10800808 	cmpgei	r2,r2,32
 2004984:	1000291e 	bne	r2,zero,2004a2c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004988:	0005303a 	rdctl	r2,status
 200498c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004990:	e0fff717 	ldw	r3,-36(fp)
 2004994:	00bfff84 	movi	r2,-2
 2004998:	1884703a 	and	r2,r3,r2
 200499c:	1001703a 	wrctl	status,r2
  
  return context;
 20049a0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 20049a4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 20049a8:	e0bff917 	ldw	r2,-28(fp)
 20049ac:	00c08074 	movhi	r3,513
 20049b0:	18e34904 	addi	r3,r3,-29404
 20049b4:	100490fa 	slli	r2,r2,3
 20049b8:	10c7883a 	add	r3,r2,r3
 20049bc:	e0bffd17 	ldw	r2,-12(fp)
 20049c0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 20049c4:	e0bff917 	ldw	r2,-28(fp)
 20049c8:	00c08074 	movhi	r3,513
 20049cc:	18e34904 	addi	r3,r3,-29404
 20049d0:	100490fa 	slli	r2,r2,3
 20049d4:	10c5883a 	add	r2,r2,r3
 20049d8:	10c00104 	addi	r3,r2,4
 20049dc:	e0bffe17 	ldw	r2,-8(fp)
 20049e0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 20049e4:	e0bffd17 	ldw	r2,-12(fp)
 20049e8:	1005003a 	cmpeq	r2,r2,zero
 20049ec:	1000051e 	bne	r2,zero,2004a04 <alt_iic_isr_register+0xb8>
 20049f0:	e17ff917 	ldw	r5,-28(fp)
 20049f4:	e13ffb17 	ldw	r4,-20(fp)
 20049f8:	20047c80 	call	20047c8 <alt_ic_irq_enable>
 20049fc:	e0bfff15 	stw	r2,-4(fp)
 2004a00:	00000406 	br	2004a14 <alt_iic_isr_register+0xc8>
 2004a04:	e17ff917 	ldw	r5,-28(fp)
 2004a08:	e13ffb17 	ldw	r4,-20(fp)
 2004a0c:	20048640 	call	2004864 <alt_ic_irq_disable>
 2004a10:	e0bfff15 	stw	r2,-4(fp)
 2004a14:	e0bfff17 	ldw	r2,-4(fp)
 2004a18:	e0bffa15 	stw	r2,-24(fp)
 2004a1c:	e0bff817 	ldw	r2,-32(fp)
 2004a20:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004a24:	e0bff617 	ldw	r2,-40(fp)
 2004a28:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2004a2c:	e0bffa17 	ldw	r2,-24(fp)
}
 2004a30:	e037883a 	mov	sp,fp
 2004a34:	dfc00117 	ldw	ra,4(sp)
 2004a38:	df000017 	ldw	fp,0(sp)
 2004a3c:	dec00204 	addi	sp,sp,8
 2004a40:	f800283a 	ret

02004a44 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2004a44:	defff804 	addi	sp,sp,-32
 2004a48:	dfc00715 	stw	ra,28(sp)
 2004a4c:	df000615 	stw	fp,24(sp)
 2004a50:	dc000515 	stw	r16,20(sp)
 2004a54:	df000504 	addi	fp,sp,20
 2004a58:	e13ffc15 	stw	r4,-16(fp)
 2004a5c:	e17ffd15 	stw	r5,-12(fp)
 2004a60:	e1bffe15 	stw	r6,-8(fp)
 2004a64:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2004a68:	e13ffd17 	ldw	r4,-12(fp)
 2004a6c:	e17ffe17 	ldw	r5,-8(fp)
 2004a70:	e1bfff17 	ldw	r6,-4(fp)
 2004a74:	2004c8c0 	call	2004c8c <open>
 2004a78:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 2004a7c:	e0bffb17 	ldw	r2,-20(fp)
 2004a80:	1004803a 	cmplt	r2,r2,zero
 2004a84:	10001f1e 	bne	r2,zero,2004b04 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 2004a88:	e13ffb17 	ldw	r4,-20(fp)
 2004a8c:	04008034 	movhi	r16,512
 2004a90:	8417db04 	addi	r16,r16,24428
 2004a94:	01400304 	movi	r5,12
 2004a98:	2002b680 	call	2002b68 <__mulsi3>
 2004a9c:	1405883a 	add	r2,r2,r16
 2004aa0:	10c00017 	ldw	r3,0(r2)
 2004aa4:	e0bffc17 	ldw	r2,-16(fp)
 2004aa8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2004aac:	e13ffb17 	ldw	r4,-20(fp)
 2004ab0:	04008034 	movhi	r16,512
 2004ab4:	8417db04 	addi	r16,r16,24428
 2004ab8:	01400304 	movi	r5,12
 2004abc:	2002b680 	call	2002b68 <__mulsi3>
 2004ac0:	1405883a 	add	r2,r2,r16
 2004ac4:	10800104 	addi	r2,r2,4
 2004ac8:	10c00017 	ldw	r3,0(r2)
 2004acc:	e0bffc17 	ldw	r2,-16(fp)
 2004ad0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2004ad4:	e13ffb17 	ldw	r4,-20(fp)
 2004ad8:	04008034 	movhi	r16,512
 2004adc:	8417db04 	addi	r16,r16,24428
 2004ae0:	01400304 	movi	r5,12
 2004ae4:	2002b680 	call	2002b68 <__mulsi3>
 2004ae8:	1405883a 	add	r2,r2,r16
 2004aec:	10800204 	addi	r2,r2,8
 2004af0:	10c00017 	ldw	r3,0(r2)
 2004af4:	e0bffc17 	ldw	r2,-16(fp)
 2004af8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2004afc:	e13ffb17 	ldw	r4,-20(fp)
 2004b00:	20033f80 	call	20033f8 <alt_release_fd>
  }
} 
 2004b04:	e037883a 	mov	sp,fp
 2004b08:	dfc00217 	ldw	ra,8(sp)
 2004b0c:	df000117 	ldw	fp,4(sp)
 2004b10:	dc000017 	ldw	r16,0(sp)
 2004b14:	dec00304 	addi	sp,sp,12
 2004b18:	f800283a 	ret

02004b1c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2004b1c:	defffb04 	addi	sp,sp,-20
 2004b20:	dfc00415 	stw	ra,16(sp)
 2004b24:	df000315 	stw	fp,12(sp)
 2004b28:	df000304 	addi	fp,sp,12
 2004b2c:	e13ffd15 	stw	r4,-12(fp)
 2004b30:	e17ffe15 	stw	r5,-8(fp)
 2004b34:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2004b38:	01008034 	movhi	r4,512
 2004b3c:	2117de04 	addi	r4,r4,24440
 2004b40:	e17ffd17 	ldw	r5,-12(fp)
 2004b44:	01800044 	movi	r6,1
 2004b48:	01c07fc4 	movi	r7,511
 2004b4c:	2004a440 	call	2004a44 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2004b50:	01008034 	movhi	r4,512
 2004b54:	2117db04 	addi	r4,r4,24428
 2004b58:	e17ffe17 	ldw	r5,-8(fp)
 2004b5c:	000d883a 	mov	r6,zero
 2004b60:	01c07fc4 	movi	r7,511
 2004b64:	2004a440 	call	2004a44 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2004b68:	01008034 	movhi	r4,512
 2004b6c:	2117e104 	addi	r4,r4,24452
 2004b70:	e17fff17 	ldw	r5,-4(fp)
 2004b74:	01800044 	movi	r6,1
 2004b78:	01c07fc4 	movi	r7,511
 2004b7c:	2004a440 	call	2004a44 <alt_open_fd>
}  
 2004b80:	e037883a 	mov	sp,fp
 2004b84:	dfc00117 	ldw	ra,4(sp)
 2004b88:	df000017 	ldw	fp,0(sp)
 2004b8c:	dec00204 	addi	sp,sp,8
 2004b90:	f800283a 	ret

02004b94 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2004b94:	defffa04 	addi	sp,sp,-24
 2004b98:	dfc00515 	stw	ra,20(sp)
 2004b9c:	df000415 	stw	fp,16(sp)
 2004ba0:	dc000315 	stw	r16,12(sp)
 2004ba4:	df000304 	addi	fp,sp,12
 2004ba8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2004bac:	e0bffe17 	ldw	r2,-8(fp)
 2004bb0:	10800217 	ldw	r2,8(r2)
 2004bb4:	10d00034 	orhi	r3,r2,16384
 2004bb8:	e0bffe17 	ldw	r2,-8(fp)
 2004bbc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2004bc0:	e03ffd15 	stw	zero,-12(fp)
 2004bc4:	00002306 	br	2004c54 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2004bc8:	e13ffd17 	ldw	r4,-12(fp)
 2004bcc:	04008034 	movhi	r16,512
 2004bd0:	8417db04 	addi	r16,r16,24428
 2004bd4:	01400304 	movi	r5,12
 2004bd8:	2002b680 	call	2002b68 <__mulsi3>
 2004bdc:	1405883a 	add	r2,r2,r16
 2004be0:	10c00017 	ldw	r3,0(r2)
 2004be4:	e0bffe17 	ldw	r2,-8(fp)
 2004be8:	10800017 	ldw	r2,0(r2)
 2004bec:	1880161e 	bne	r3,r2,2004c48 <alt_file_locked+0xb4>
 2004bf0:	e13ffd17 	ldw	r4,-12(fp)
 2004bf4:	04008034 	movhi	r16,512
 2004bf8:	8417db04 	addi	r16,r16,24428
 2004bfc:	01400304 	movi	r5,12
 2004c00:	2002b680 	call	2002b68 <__mulsi3>
 2004c04:	1405883a 	add	r2,r2,r16
 2004c08:	10800204 	addi	r2,r2,8
 2004c0c:	10800017 	ldw	r2,0(r2)
 2004c10:	1004403a 	cmpge	r2,r2,zero
 2004c14:	10000c1e 	bne	r2,zero,2004c48 <alt_file_locked+0xb4>
 2004c18:	e13ffd17 	ldw	r4,-12(fp)
 2004c1c:	01400304 	movi	r5,12
 2004c20:	2002b680 	call	2002b68 <__mulsi3>
 2004c24:	1007883a 	mov	r3,r2
 2004c28:	00808034 	movhi	r2,512
 2004c2c:	1097db04 	addi	r2,r2,24428
 2004c30:	1887883a 	add	r3,r3,r2
 2004c34:	e0bffe17 	ldw	r2,-8(fp)
 2004c38:	18800326 	beq	r3,r2,2004c48 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2004c3c:	00bffcc4 	movi	r2,-13
 2004c40:	e0bfff15 	stw	r2,-4(fp)
 2004c44:	00000a06 	br	2004c70 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2004c48:	e0bffd17 	ldw	r2,-12(fp)
 2004c4c:	10800044 	addi	r2,r2,1
 2004c50:	e0bffd15 	stw	r2,-12(fp)
 2004c54:	00808034 	movhi	r2,512
 2004c58:	109c7c04 	addi	r2,r2,29168
 2004c5c:	10800017 	ldw	r2,0(r2)
 2004c60:	1007883a 	mov	r3,r2
 2004c64:	e0bffd17 	ldw	r2,-12(fp)
 2004c68:	18bfd72e 	bgeu	r3,r2,2004bc8 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2004c6c:	e03fff15 	stw	zero,-4(fp)
 2004c70:	e0bfff17 	ldw	r2,-4(fp)
}
 2004c74:	e037883a 	mov	sp,fp
 2004c78:	dfc00217 	ldw	ra,8(sp)
 2004c7c:	df000117 	ldw	fp,4(sp)
 2004c80:	dc000017 	ldw	r16,0(sp)
 2004c84:	dec00304 	addi	sp,sp,12
 2004c88:	f800283a 	ret

02004c8c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2004c8c:	defff404 	addi	sp,sp,-48
 2004c90:	dfc00b15 	stw	ra,44(sp)
 2004c94:	df000a15 	stw	fp,40(sp)
 2004c98:	df000a04 	addi	fp,sp,40
 2004c9c:	e13ffb15 	stw	r4,-20(fp)
 2004ca0:	e17ffc15 	stw	r5,-16(fp)
 2004ca4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2004ca8:	00bfffc4 	movi	r2,-1
 2004cac:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 2004cb0:	00bffb44 	movi	r2,-19
 2004cb4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 2004cb8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2004cbc:	e13ffb17 	ldw	r4,-20(fp)
 2004cc0:	01408034 	movhi	r5,512
 2004cc4:	295c7a04 	addi	r5,r5,29160
 2004cc8:	200503c0 	call	200503c <alt_find_dev>
 2004ccc:	e0bffa15 	stw	r2,-24(fp)
 2004cd0:	e0bffa17 	ldw	r2,-24(fp)
 2004cd4:	1004c03a 	cmpne	r2,r2,zero
 2004cd8:	1000051e 	bne	r2,zero,2004cf0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2004cdc:	e13ffb17 	ldw	r4,-20(fp)
 2004ce0:	20050d00 	call	20050d0 <alt_find_file>
 2004ce4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 2004ce8:	00800044 	movi	r2,1
 2004cec:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2004cf0:	e0bffa17 	ldw	r2,-24(fp)
 2004cf4:	1005003a 	cmpeq	r2,r2,zero
 2004cf8:	1000311e 	bne	r2,zero,2004dc0 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2004cfc:	e13ffa17 	ldw	r4,-24(fp)
 2004d00:	20051f00 	call	20051f0 <alt_get_fd>
 2004d04:	e0bff815 	stw	r2,-32(fp)
 2004d08:	e0bff817 	ldw	r2,-32(fp)
 2004d0c:	1004403a 	cmpge	r2,r2,zero
 2004d10:	1000031e 	bne	r2,zero,2004d20 <open+0x94>
    {
      status = index;
 2004d14:	e0bff817 	ldw	r2,-32(fp)
 2004d18:	e0bff715 	stw	r2,-36(fp)
 2004d1c:	00002a06 	br	2004dc8 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 2004d20:	e13ff817 	ldw	r4,-32(fp)
 2004d24:	01400304 	movi	r5,12
 2004d28:	2002b680 	call	2002b68 <__mulsi3>
 2004d2c:	1007883a 	mov	r3,r2
 2004d30:	00808034 	movhi	r2,512
 2004d34:	1097db04 	addi	r2,r2,24428
 2004d38:	1885883a 	add	r2,r3,r2
 2004d3c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2004d40:	e0fffc17 	ldw	r3,-16(fp)
 2004d44:	00900034 	movhi	r2,16384
 2004d48:	10bfffc4 	addi	r2,r2,-1
 2004d4c:	1886703a 	and	r3,r3,r2
 2004d50:	e0bff917 	ldw	r2,-28(fp)
 2004d54:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2004d58:	e0bff617 	ldw	r2,-40(fp)
 2004d5c:	1004c03a 	cmpne	r2,r2,zero
 2004d60:	1000061e 	bne	r2,zero,2004d7c <open+0xf0>
 2004d64:	e13ff917 	ldw	r4,-28(fp)
 2004d68:	2004b940 	call	2004b94 <alt_file_locked>
 2004d6c:	e0bff715 	stw	r2,-36(fp)
 2004d70:	e0bff717 	ldw	r2,-36(fp)
 2004d74:	1004803a 	cmplt	r2,r2,zero
 2004d78:	1000131e 	bne	r2,zero,2004dc8 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2004d7c:	e0bffa17 	ldw	r2,-24(fp)
 2004d80:	10800317 	ldw	r2,12(r2)
 2004d84:	1005003a 	cmpeq	r2,r2,zero
 2004d88:	1000091e 	bne	r2,zero,2004db0 <open+0x124>
 2004d8c:	e0bffa17 	ldw	r2,-24(fp)
 2004d90:	10800317 	ldw	r2,12(r2)
 2004d94:	e13ff917 	ldw	r4,-28(fp)
 2004d98:	e17ffb17 	ldw	r5,-20(fp)
 2004d9c:	e1bffc17 	ldw	r6,-16(fp)
 2004da0:	e1fffd17 	ldw	r7,-12(fp)
 2004da4:	103ee83a 	callr	r2
 2004da8:	e0bfff15 	stw	r2,-4(fp)
 2004dac:	00000106 	br	2004db4 <open+0x128>
 2004db0:	e03fff15 	stw	zero,-4(fp)
 2004db4:	e0bfff17 	ldw	r2,-4(fp)
 2004db8:	e0bff715 	stw	r2,-36(fp)
 2004dbc:	00000206 	br	2004dc8 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2004dc0:	00bffb44 	movi	r2,-19
 2004dc4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2004dc8:	e0bff717 	ldw	r2,-36(fp)
 2004dcc:	1004403a 	cmpge	r2,r2,zero
 2004dd0:	1000091e 	bne	r2,zero,2004df8 <open+0x16c>
  {
    alt_release_fd (index);  
 2004dd4:	e13ff817 	ldw	r4,-32(fp)
 2004dd8:	20033f80 	call	20033f8 <alt_release_fd>
    ALT_ERRNO = -status;
 2004ddc:	2004e180 	call	2004e18 <alt_get_errno>
 2004de0:	e0fff717 	ldw	r3,-36(fp)
 2004de4:	00c7c83a 	sub	r3,zero,r3
 2004de8:	10c00015 	stw	r3,0(r2)
    return -1;
 2004dec:	00bfffc4 	movi	r2,-1
 2004df0:	e0bffe15 	stw	r2,-8(fp)
 2004df4:	00000206 	br	2004e00 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 2004df8:	e0bff817 	ldw	r2,-32(fp)
 2004dfc:	e0bffe15 	stw	r2,-8(fp)
 2004e00:	e0bffe17 	ldw	r2,-8(fp)
}
 2004e04:	e037883a 	mov	sp,fp
 2004e08:	dfc00117 	ldw	ra,4(sp)
 2004e0c:	df000017 	ldw	fp,0(sp)
 2004e10:	dec00204 	addi	sp,sp,8
 2004e14:	f800283a 	ret

02004e18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2004e18:	defffd04 	addi	sp,sp,-12
 2004e1c:	dfc00215 	stw	ra,8(sp)
 2004e20:	df000115 	stw	fp,4(sp)
 2004e24:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2004e28:	00808034 	movhi	r2,512
 2004e2c:	109c7d04 	addi	r2,r2,29172
 2004e30:	10800017 	ldw	r2,0(r2)
 2004e34:	1005003a 	cmpeq	r2,r2,zero
 2004e38:	1000061e 	bne	r2,zero,2004e54 <alt_get_errno+0x3c>
 2004e3c:	00808034 	movhi	r2,512
 2004e40:	109c7d04 	addi	r2,r2,29172
 2004e44:	10800017 	ldw	r2,0(r2)
 2004e48:	103ee83a 	callr	r2
 2004e4c:	e0bfff15 	stw	r2,-4(fp)
 2004e50:	00000306 	br	2004e60 <alt_get_errno+0x48>
 2004e54:	00808074 	movhi	r2,513
 2004e58:	10a33804 	addi	r2,r2,-29472
 2004e5c:	e0bfff15 	stw	r2,-4(fp)
 2004e60:	e0bfff17 	ldw	r2,-4(fp)
}
 2004e64:	e037883a 	mov	sp,fp
 2004e68:	dfc00117 	ldw	ra,4(sp)
 2004e6c:	df000017 	ldw	fp,0(sp)
 2004e70:	dec00204 	addi	sp,sp,8
 2004e74:	f800283a 	ret

02004e78 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2004e78:	defffa04 	addi	sp,sp,-24
 2004e7c:	df000515 	stw	fp,20(sp)
 2004e80:	df000504 	addi	fp,sp,20
 2004e84:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004e88:	0005303a 	rdctl	r2,status
 2004e8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004e90:	e0fffd17 	ldw	r3,-12(fp)
 2004e94:	00bfff84 	movi	r2,-2
 2004e98:	1884703a 	and	r2,r3,r2
 2004e9c:	1001703a 	wrctl	status,r2
  
  return context;
 2004ea0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2004ea4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 2004ea8:	e0bfff17 	ldw	r2,-4(fp)
 2004eac:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2004eb0:	e0bffc17 	ldw	r2,-16(fp)
 2004eb4:	10c00017 	ldw	r3,0(r2)
 2004eb8:	e0bffc17 	ldw	r2,-16(fp)
 2004ebc:	10800117 	ldw	r2,4(r2)
 2004ec0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 2004ec4:	e0bffc17 	ldw	r2,-16(fp)
 2004ec8:	10c00117 	ldw	r3,4(r2)
 2004ecc:	e0bffc17 	ldw	r2,-16(fp)
 2004ed0:	10800017 	ldw	r2,0(r2)
 2004ed4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2004ed8:	e0fffc17 	ldw	r3,-16(fp)
 2004edc:	e0bffc17 	ldw	r2,-16(fp)
 2004ee0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 2004ee4:	e0fffc17 	ldw	r3,-16(fp)
 2004ee8:	e0bffc17 	ldw	r2,-16(fp)
 2004eec:	18800015 	stw	r2,0(r3)
 2004ef0:	e0bffe17 	ldw	r2,-8(fp)
 2004ef4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004ef8:	e0bffb17 	ldw	r2,-20(fp)
 2004efc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2004f00:	e037883a 	mov	sp,fp
 2004f04:	df000017 	ldw	fp,0(sp)
 2004f08:	dec00104 	addi	sp,sp,4
 2004f0c:	f800283a 	ret

02004f10 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2004f10:	defffb04 	addi	sp,sp,-20
 2004f14:	dfc00415 	stw	ra,16(sp)
 2004f18:	df000315 	stw	fp,12(sp)
 2004f1c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2004f20:	d0a00c17 	ldw	r2,-32720(gp)
 2004f24:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2004f28:	d0a6ca17 	ldw	r2,-25816(gp)
 2004f2c:	10800044 	addi	r2,r2,1
 2004f30:	d0a6ca15 	stw	r2,-25816(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2004f34:	00003106 	br	2004ffc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 2004f38:	e0bffe17 	ldw	r2,-8(fp)
 2004f3c:	10800017 	ldw	r2,0(r2)
 2004f40:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2004f44:	e0bffe17 	ldw	r2,-8(fp)
 2004f48:	10800403 	ldbu	r2,16(r2)
 2004f4c:	10803fcc 	andi	r2,r2,255
 2004f50:	1005003a 	cmpeq	r2,r2,zero
 2004f54:	1000051e 	bne	r2,zero,2004f6c <alt_tick+0x5c>
 2004f58:	d0a6ca17 	ldw	r2,-25816(gp)
 2004f5c:	1004c03a 	cmpne	r2,r2,zero
 2004f60:	1000021e 	bne	r2,zero,2004f6c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 2004f64:	e0bffe17 	ldw	r2,-8(fp)
 2004f68:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2004f6c:	e0bffe17 	ldw	r2,-8(fp)
 2004f70:	10c00217 	ldw	r3,8(r2)
 2004f74:	d0a6ca17 	ldw	r2,-25816(gp)
 2004f78:	10c01e36 	bltu	r2,r3,2004ff4 <alt_tick+0xe4>
 2004f7c:	e0bffe17 	ldw	r2,-8(fp)
 2004f80:	10800403 	ldbu	r2,16(r2)
 2004f84:	10803fcc 	andi	r2,r2,255
 2004f88:	1004c03a 	cmpne	r2,r2,zero
 2004f8c:	1000191e 	bne	r2,zero,2004ff4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 2004f90:	e0bffe17 	ldw	r2,-8(fp)
 2004f94:	10c00317 	ldw	r3,12(r2)
 2004f98:	e0bffe17 	ldw	r2,-8(fp)
 2004f9c:	11000517 	ldw	r4,20(r2)
 2004fa0:	183ee83a 	callr	r3
 2004fa4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2004fa8:	e0bffd17 	ldw	r2,-12(fp)
 2004fac:	1004c03a 	cmpne	r2,r2,zero
 2004fb0:	1000031e 	bne	r2,zero,2004fc0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 2004fb4:	e13ffe17 	ldw	r4,-8(fp)
 2004fb8:	2004e780 	call	2004e78 <alt_alarm_stop>
 2004fbc:	00000d06 	br	2004ff4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 2004fc0:	e0bffe17 	ldw	r2,-8(fp)
 2004fc4:	10c00217 	ldw	r3,8(r2)
 2004fc8:	e0bffd17 	ldw	r2,-12(fp)
 2004fcc:	1887883a 	add	r3,r3,r2
 2004fd0:	e0bffe17 	ldw	r2,-8(fp)
 2004fd4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2004fd8:	e0bffe17 	ldw	r2,-8(fp)
 2004fdc:	10c00217 	ldw	r3,8(r2)
 2004fe0:	d0a6ca17 	ldw	r2,-25816(gp)
 2004fe4:	1880032e 	bgeu	r3,r2,2004ff4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 2004fe8:	e0fffe17 	ldw	r3,-8(fp)
 2004fec:	00800044 	movi	r2,1
 2004ff0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 2004ff4:	e0bfff17 	ldw	r2,-4(fp)
 2004ff8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2004ffc:	d0e00c04 	addi	r3,gp,-32720
 2005000:	e0bffe17 	ldw	r2,-8(fp)
 2005004:	10ffcc1e 	bne	r2,r3,2004f38 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 2005008:	e037883a 	mov	sp,fp
 200500c:	dfc00117 	ldw	ra,4(sp)
 2005010:	df000017 	ldw	fp,0(sp)
 2005014:	dec00204 	addi	sp,sp,8
 2005018:	f800283a 	ret

0200501c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 200501c:	deffff04 	addi	sp,sp,-4
 2005020:	df000015 	stw	fp,0(sp)
 2005024:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2005028:	000170fa 	wrctl	ienable,zero
}
 200502c:	e037883a 	mov	sp,fp
 2005030:	df000017 	ldw	fp,0(sp)
 2005034:	dec00104 	addi	sp,sp,4
 2005038:	f800283a 	ret

0200503c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 200503c:	defff904 	addi	sp,sp,-28
 2005040:	dfc00615 	stw	ra,24(sp)
 2005044:	df000515 	stw	fp,20(sp)
 2005048:	df000504 	addi	fp,sp,20
 200504c:	e13ffd15 	stw	r4,-12(fp)
 2005050:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2005054:	e0bffe17 	ldw	r2,-8(fp)
 2005058:	10800017 	ldw	r2,0(r2)
 200505c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2005060:	e13ffd17 	ldw	r4,-12(fp)
 2005064:	20002d80 	call	20002d8 <strlen>
 2005068:	10800044 	addi	r2,r2,1
 200506c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2005070:	00000d06 	br	20050a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2005074:	e0bffc17 	ldw	r2,-16(fp)
 2005078:	11000217 	ldw	r4,8(r2)
 200507c:	e1bffb17 	ldw	r6,-20(fp)
 2005080:	e17ffd17 	ldw	r5,-12(fp)
 2005084:	200530c0 	call	200530c <memcmp>
 2005088:	1004c03a 	cmpne	r2,r2,zero
 200508c:	1000031e 	bne	r2,zero,200509c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2005090:	e0bffc17 	ldw	r2,-16(fp)
 2005094:	e0bfff15 	stw	r2,-4(fp)
 2005098:	00000706 	br	20050b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 200509c:	e0bffc17 	ldw	r2,-16(fp)
 20050a0:	10800017 	ldw	r2,0(r2)
 20050a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20050a8:	e0fffe17 	ldw	r3,-8(fp)
 20050ac:	e0bffc17 	ldw	r2,-16(fp)
 20050b0:	10fff01e 	bne	r2,r3,2005074 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 20050b4:	e03fff15 	stw	zero,-4(fp)
 20050b8:	e0bfff17 	ldw	r2,-4(fp)
}
 20050bc:	e037883a 	mov	sp,fp
 20050c0:	dfc00117 	ldw	ra,4(sp)
 20050c4:	df000017 	ldw	fp,0(sp)
 20050c8:	dec00204 	addi	sp,sp,8
 20050cc:	f800283a 	ret

020050d0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 20050d0:	defffa04 	addi	sp,sp,-24
 20050d4:	dfc00515 	stw	ra,20(sp)
 20050d8:	df000415 	stw	fp,16(sp)
 20050dc:	df000404 	addi	fp,sp,16
 20050e0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 20050e4:	00808034 	movhi	r2,512
 20050e8:	109c7804 	addi	r2,r2,29152
 20050ec:	10800017 	ldw	r2,0(r2)
 20050f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20050f4:	00003306 	br	20051c4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 20050f8:	e0bffd17 	ldw	r2,-12(fp)
 20050fc:	11000217 	ldw	r4,8(r2)
 2005100:	20002d80 	call	20002d8 <strlen>
 2005104:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 2005108:	e0bffd17 	ldw	r2,-12(fp)
 200510c:	10c00217 	ldw	r3,8(r2)
 2005110:	e0bffc17 	ldw	r2,-16(fp)
 2005114:	1885883a 	add	r2,r3,r2
 2005118:	10bfffc4 	addi	r2,r2,-1
 200511c:	10800003 	ldbu	r2,0(r2)
 2005120:	10803fcc 	andi	r2,r2,255
 2005124:	1080201c 	xori	r2,r2,128
 2005128:	10bfe004 	addi	r2,r2,-128
 200512c:	10800bd8 	cmpnei	r2,r2,47
 2005130:	1000031e 	bne	r2,zero,2005140 <alt_find_file+0x70>
    {
      len -= 1;
 2005134:	e0bffc17 	ldw	r2,-16(fp)
 2005138:	10bfffc4 	addi	r2,r2,-1
 200513c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2005140:	e0bffc17 	ldw	r2,-16(fp)
 2005144:	1007883a 	mov	r3,r2
 2005148:	e0bffe17 	ldw	r2,-8(fp)
 200514c:	1885883a 	add	r2,r3,r2
 2005150:	10800003 	ldbu	r2,0(r2)
 2005154:	10803fcc 	andi	r2,r2,255
 2005158:	1080201c 	xori	r2,r2,128
 200515c:	10bfe004 	addi	r2,r2,-128
 2005160:	10800be0 	cmpeqi	r2,r2,47
 2005164:	10000a1e 	bne	r2,zero,2005190 <alt_find_file+0xc0>
 2005168:	e0bffc17 	ldw	r2,-16(fp)
 200516c:	1007883a 	mov	r3,r2
 2005170:	e0bffe17 	ldw	r2,-8(fp)
 2005174:	1885883a 	add	r2,r3,r2
 2005178:	10800003 	ldbu	r2,0(r2)
 200517c:	10803fcc 	andi	r2,r2,255
 2005180:	1080201c 	xori	r2,r2,128
 2005184:	10bfe004 	addi	r2,r2,-128
 2005188:	1004c03a 	cmpne	r2,r2,zero
 200518c:	10000a1e 	bne	r2,zero,20051b8 <alt_find_file+0xe8>
 2005190:	e0bffd17 	ldw	r2,-12(fp)
 2005194:	11000217 	ldw	r4,8(r2)
 2005198:	e1bffc17 	ldw	r6,-16(fp)
 200519c:	e17ffe17 	ldw	r5,-8(fp)
 20051a0:	200530c0 	call	200530c <memcmp>
 20051a4:	1004c03a 	cmpne	r2,r2,zero
 20051a8:	1000031e 	bne	r2,zero,20051b8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 20051ac:	e0bffd17 	ldw	r2,-12(fp)
 20051b0:	e0bfff15 	stw	r2,-4(fp)
 20051b4:	00000806 	br	20051d8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 20051b8:	e0bffd17 	ldw	r2,-12(fp)
 20051bc:	10800017 	ldw	r2,0(r2)
 20051c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20051c4:	00c08034 	movhi	r3,512
 20051c8:	18dc7804 	addi	r3,r3,29152
 20051cc:	e0bffd17 	ldw	r2,-12(fp)
 20051d0:	10ffc91e 	bne	r2,r3,20050f8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 20051d4:	e03fff15 	stw	zero,-4(fp)
 20051d8:	e0bfff17 	ldw	r2,-4(fp)
}
 20051dc:	e037883a 	mov	sp,fp
 20051e0:	dfc00117 	ldw	ra,4(sp)
 20051e4:	df000017 	ldw	fp,0(sp)
 20051e8:	dec00204 	addi	sp,sp,8
 20051ec:	f800283a 	ret

020051f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 20051f0:	defffa04 	addi	sp,sp,-24
 20051f4:	dfc00515 	stw	ra,20(sp)
 20051f8:	df000415 	stw	fp,16(sp)
 20051fc:	dc000315 	stw	r16,12(sp)
 2005200:	df000304 	addi	fp,sp,12
 2005204:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2005208:	00bffa04 	movi	r2,-24
 200520c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2005210:	e03ffe15 	stw	zero,-8(fp)
 2005214:	00002006 	br	2005298 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 2005218:	e13ffe17 	ldw	r4,-8(fp)
 200521c:	04008034 	movhi	r16,512
 2005220:	8417db04 	addi	r16,r16,24428
 2005224:	01400304 	movi	r5,12
 2005228:	2002b680 	call	2002b68 <__mulsi3>
 200522c:	1405883a 	add	r2,r2,r16
 2005230:	10800017 	ldw	r2,0(r2)
 2005234:	1004c03a 	cmpne	r2,r2,zero
 2005238:	1000141e 	bne	r2,zero,200528c <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 200523c:	e13ffe17 	ldw	r4,-8(fp)
 2005240:	04008034 	movhi	r16,512
 2005244:	8417db04 	addi	r16,r16,24428
 2005248:	01400304 	movi	r5,12
 200524c:	2002b680 	call	2002b68 <__mulsi3>
 2005250:	1407883a 	add	r3,r2,r16
 2005254:	e0bfff17 	ldw	r2,-4(fp)
 2005258:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 200525c:	00808034 	movhi	r2,512
 2005260:	109c7c04 	addi	r2,r2,29168
 2005264:	10c00017 	ldw	r3,0(r2)
 2005268:	e0bffe17 	ldw	r2,-8(fp)
 200526c:	1880040e 	bge	r3,r2,2005280 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 2005270:	00c08034 	movhi	r3,512
 2005274:	18dc7c04 	addi	r3,r3,29168
 2005278:	e0bffe17 	ldw	r2,-8(fp)
 200527c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 2005280:	e0bffe17 	ldw	r2,-8(fp)
 2005284:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 2005288:	00000606 	br	20052a4 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 200528c:	e0bffe17 	ldw	r2,-8(fp)
 2005290:	10800044 	addi	r2,r2,1
 2005294:	e0bffe15 	stw	r2,-8(fp)
 2005298:	e0bffe17 	ldw	r2,-8(fp)
 200529c:	10800810 	cmplti	r2,r2,32
 20052a0:	103fdd1e 	bne	r2,zero,2005218 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 20052a4:	e0bffd17 	ldw	r2,-12(fp)
}
 20052a8:	e037883a 	mov	sp,fp
 20052ac:	dfc00217 	ldw	ra,8(sp)
 20052b0:	df000117 	ldw	fp,4(sp)
 20052b4:	dc000017 	ldw	r16,0(sp)
 20052b8:	dec00304 	addi	sp,sp,12
 20052bc:	f800283a 	ret

020052c0 <atexit>:
 20052c0:	200b883a 	mov	r5,r4
 20052c4:	000d883a 	mov	r6,zero
 20052c8:	0009883a 	mov	r4,zero
 20052cc:	000f883a 	mov	r7,zero
 20052d0:	20053801 	jmpi	2005380 <__register_exitproc>

020052d4 <exit>:
 20052d4:	defffe04 	addi	sp,sp,-8
 20052d8:	000b883a 	mov	r5,zero
 20052dc:	dc000015 	stw	r16,0(sp)
 20052e0:	dfc00115 	stw	ra,4(sp)
 20052e4:	2021883a 	mov	r16,r4
 20052e8:	20054b80 	call	20054b8 <__call_exitprocs>
 20052ec:	00808034 	movhi	r2,512
 20052f0:	109c7504 	addi	r2,r2,29140
 20052f4:	11000017 	ldw	r4,0(r2)
 20052f8:	20800f17 	ldw	r2,60(r4)
 20052fc:	10000126 	beq	r2,zero,2005304 <exit+0x30>
 2005300:	103ee83a 	callr	r2
 2005304:	8009883a 	mov	r4,r16
 2005308:	20056a80 	call	20056a8 <_exit>

0200530c <memcmp>:
 200530c:	00c000c4 	movi	r3,3
 2005310:	1980032e 	bgeu	r3,r6,2005320 <memcmp+0x14>
 2005314:	2144b03a 	or	r2,r4,r5
 2005318:	10c4703a 	and	r2,r2,r3
 200531c:	10000f26 	beq	r2,zero,200535c <memcmp+0x50>
 2005320:	31ffffc4 	addi	r7,r6,-1
 2005324:	3000061e 	bne	r6,zero,2005340 <memcmp+0x34>
 2005328:	00000a06 	br	2005354 <memcmp+0x48>
 200532c:	39ffffc4 	addi	r7,r7,-1
 2005330:	00bfffc4 	movi	r2,-1
 2005334:	21000044 	addi	r4,r4,1
 2005338:	29400044 	addi	r5,r5,1
 200533c:	38800526 	beq	r7,r2,2005354 <memcmp+0x48>
 2005340:	20c00003 	ldbu	r3,0(r4)
 2005344:	28800003 	ldbu	r2,0(r5)
 2005348:	18bff826 	beq	r3,r2,200532c <memcmp+0x20>
 200534c:	1885c83a 	sub	r2,r3,r2
 2005350:	f800283a 	ret
 2005354:	0005883a 	mov	r2,zero
 2005358:	f800283a 	ret
 200535c:	180f883a 	mov	r7,r3
 2005360:	20c00017 	ldw	r3,0(r4)
 2005364:	28800017 	ldw	r2,0(r5)
 2005368:	18bfed1e 	bne	r3,r2,2005320 <memcmp+0x14>
 200536c:	31bfff04 	addi	r6,r6,-4
 2005370:	21000104 	addi	r4,r4,4
 2005374:	29400104 	addi	r5,r5,4
 2005378:	39bff936 	bltu	r7,r6,2005360 <memcmp+0x54>
 200537c:	003fe806 	br	2005320 <memcmp+0x14>

02005380 <__register_exitproc>:
 2005380:	defffa04 	addi	sp,sp,-24
 2005384:	00808034 	movhi	r2,512
 2005388:	109c7504 	addi	r2,r2,29140
 200538c:	dc000015 	stw	r16,0(sp)
 2005390:	14000017 	ldw	r16,0(r2)
 2005394:	dd000415 	stw	r20,16(sp)
 2005398:	2829883a 	mov	r20,r5
 200539c:	81405217 	ldw	r5,328(r16)
 20053a0:	dcc00315 	stw	r19,12(sp)
 20053a4:	dc800215 	stw	r18,8(sp)
 20053a8:	dc400115 	stw	r17,4(sp)
 20053ac:	dfc00515 	stw	ra,20(sp)
 20053b0:	2023883a 	mov	r17,r4
 20053b4:	3027883a 	mov	r19,r6
 20053b8:	3825883a 	mov	r18,r7
 20053bc:	28002526 	beq	r5,zero,2005454 <__register_exitproc+0xd4>
 20053c0:	29000117 	ldw	r4,4(r5)
 20053c4:	008007c4 	movi	r2,31
 20053c8:	11002716 	blt	r2,r4,2005468 <__register_exitproc+0xe8>
 20053cc:	8800101e 	bne	r17,zero,2005410 <__register_exitproc+0x90>
 20053d0:	2105883a 	add	r2,r4,r4
 20053d4:	1085883a 	add	r2,r2,r2
 20053d8:	20c00044 	addi	r3,r4,1
 20053dc:	1145883a 	add	r2,r2,r5
 20053e0:	0009883a 	mov	r4,zero
 20053e4:	15000215 	stw	r20,8(r2)
 20053e8:	28c00115 	stw	r3,4(r5)
 20053ec:	2005883a 	mov	r2,r4
 20053f0:	dfc00517 	ldw	ra,20(sp)
 20053f4:	dd000417 	ldw	r20,16(sp)
 20053f8:	dcc00317 	ldw	r19,12(sp)
 20053fc:	dc800217 	ldw	r18,8(sp)
 2005400:	dc400117 	ldw	r17,4(sp)
 2005404:	dc000017 	ldw	r16,0(sp)
 2005408:	dec00604 	addi	sp,sp,24
 200540c:	f800283a 	ret
 2005410:	29802204 	addi	r6,r5,136
 2005414:	00800044 	movi	r2,1
 2005418:	110e983a 	sll	r7,r2,r4
 200541c:	30c04017 	ldw	r3,256(r6)
 2005420:	2105883a 	add	r2,r4,r4
 2005424:	1085883a 	add	r2,r2,r2
 2005428:	1185883a 	add	r2,r2,r6
 200542c:	19c6b03a 	or	r3,r3,r7
 2005430:	14802015 	stw	r18,128(r2)
 2005434:	14c00015 	stw	r19,0(r2)
 2005438:	00800084 	movi	r2,2
 200543c:	30c04015 	stw	r3,256(r6)
 2005440:	88bfe31e 	bne	r17,r2,20053d0 <__register_exitproc+0x50>
 2005444:	30804117 	ldw	r2,260(r6)
 2005448:	11c4b03a 	or	r2,r2,r7
 200544c:	30804115 	stw	r2,260(r6)
 2005450:	003fdf06 	br	20053d0 <__register_exitproc+0x50>
 2005454:	00808074 	movhi	r2,513
 2005458:	10a38904 	addi	r2,r2,-29148
 200545c:	100b883a 	mov	r5,r2
 2005460:	80805215 	stw	r2,328(r16)
 2005464:	003fd606 	br	20053c0 <__register_exitproc+0x40>
 2005468:	00800034 	movhi	r2,0
 200546c:	10800004 	addi	r2,r2,0
 2005470:	1000021e 	bne	r2,zero,200547c <__register_exitproc+0xfc>
 2005474:	013fffc4 	movi	r4,-1
 2005478:	003fdc06 	br	20053ec <__register_exitproc+0x6c>
 200547c:	01006404 	movi	r4,400
 2005480:	103ee83a 	callr	r2
 2005484:	1007883a 	mov	r3,r2
 2005488:	103ffa26 	beq	r2,zero,2005474 <__register_exitproc+0xf4>
 200548c:	80805217 	ldw	r2,328(r16)
 2005490:	180b883a 	mov	r5,r3
 2005494:	18000115 	stw	zero,4(r3)
 2005498:	18800015 	stw	r2,0(r3)
 200549c:	80c05215 	stw	r3,328(r16)
 20054a0:	18006215 	stw	zero,392(r3)
 20054a4:	18006315 	stw	zero,396(r3)
 20054a8:	0009883a 	mov	r4,zero
 20054ac:	883fc826 	beq	r17,zero,20053d0 <__register_exitproc+0x50>
 20054b0:	003fd706 	br	2005410 <__register_exitproc+0x90>

020054b4 <register_fini>:
 20054b4:	f800283a 	ret

020054b8 <__call_exitprocs>:
 20054b8:	00808034 	movhi	r2,512
 20054bc:	109c7504 	addi	r2,r2,29140
 20054c0:	10800017 	ldw	r2,0(r2)
 20054c4:	defff304 	addi	sp,sp,-52
 20054c8:	df000b15 	stw	fp,44(sp)
 20054cc:	d8800115 	stw	r2,4(sp)
 20054d0:	00800034 	movhi	r2,0
 20054d4:	10800004 	addi	r2,r2,0
 20054d8:	1005003a 	cmpeq	r2,r2,zero
 20054dc:	d8800215 	stw	r2,8(sp)
 20054e0:	d8800117 	ldw	r2,4(sp)
 20054e4:	dd400815 	stw	r21,32(sp)
 20054e8:	dd000715 	stw	r20,28(sp)
 20054ec:	10805204 	addi	r2,r2,328
 20054f0:	dfc00c15 	stw	ra,48(sp)
 20054f4:	ddc00a15 	stw	r23,40(sp)
 20054f8:	dd800915 	stw	r22,36(sp)
 20054fc:	dcc00615 	stw	r19,24(sp)
 2005500:	dc800515 	stw	r18,20(sp)
 2005504:	dc400415 	stw	r17,16(sp)
 2005508:	dc000315 	stw	r16,12(sp)
 200550c:	282b883a 	mov	r21,r5
 2005510:	2039883a 	mov	fp,r4
 2005514:	d8800015 	stw	r2,0(sp)
 2005518:	2829003a 	cmpeq	r20,r5,zero
 200551c:	d8800117 	ldw	r2,4(sp)
 2005520:	14405217 	ldw	r17,328(r2)
 2005524:	88001026 	beq	r17,zero,2005568 <__call_exitprocs+0xb0>
 2005528:	ddc00017 	ldw	r23,0(sp)
 200552c:	88800117 	ldw	r2,4(r17)
 2005530:	8c802204 	addi	r18,r17,136
 2005534:	143fffc4 	addi	r16,r2,-1
 2005538:	80000916 	blt	r16,zero,2005560 <__call_exitprocs+0xa8>
 200553c:	05bfffc4 	movi	r22,-1
 2005540:	a000151e 	bne	r20,zero,2005598 <__call_exitprocs+0xe0>
 2005544:	8409883a 	add	r4,r16,r16
 2005548:	2105883a 	add	r2,r4,r4
 200554c:	1485883a 	add	r2,r2,r18
 2005550:	10c02017 	ldw	r3,128(r2)
 2005554:	a8c01126 	beq	r21,r3,200559c <__call_exitprocs+0xe4>
 2005558:	843fffc4 	addi	r16,r16,-1
 200555c:	85bff81e 	bne	r16,r22,2005540 <__call_exitprocs+0x88>
 2005560:	d8800217 	ldw	r2,8(sp)
 2005564:	10003126 	beq	r2,zero,200562c <__call_exitprocs+0x174>
 2005568:	dfc00c17 	ldw	ra,48(sp)
 200556c:	df000b17 	ldw	fp,44(sp)
 2005570:	ddc00a17 	ldw	r23,40(sp)
 2005574:	dd800917 	ldw	r22,36(sp)
 2005578:	dd400817 	ldw	r21,32(sp)
 200557c:	dd000717 	ldw	r20,28(sp)
 2005580:	dcc00617 	ldw	r19,24(sp)
 2005584:	dc800517 	ldw	r18,20(sp)
 2005588:	dc400417 	ldw	r17,16(sp)
 200558c:	dc000317 	ldw	r16,12(sp)
 2005590:	dec00d04 	addi	sp,sp,52
 2005594:	f800283a 	ret
 2005598:	8409883a 	add	r4,r16,r16
 200559c:	88c00117 	ldw	r3,4(r17)
 20055a0:	2105883a 	add	r2,r4,r4
 20055a4:	1445883a 	add	r2,r2,r17
 20055a8:	18ffffc4 	addi	r3,r3,-1
 20055ac:	11800217 	ldw	r6,8(r2)
 20055b0:	1c001526 	beq	r3,r16,2005608 <__call_exitprocs+0x150>
 20055b4:	10000215 	stw	zero,8(r2)
 20055b8:	303fe726 	beq	r6,zero,2005558 <__call_exitprocs+0xa0>
 20055bc:	00c00044 	movi	r3,1
 20055c0:	1c06983a 	sll	r3,r3,r16
 20055c4:	90804017 	ldw	r2,256(r18)
 20055c8:	8cc00117 	ldw	r19,4(r17)
 20055cc:	1884703a 	and	r2,r3,r2
 20055d0:	10001426 	beq	r2,zero,2005624 <__call_exitprocs+0x16c>
 20055d4:	90804117 	ldw	r2,260(r18)
 20055d8:	1884703a 	and	r2,r3,r2
 20055dc:	10000c1e 	bne	r2,zero,2005610 <__call_exitprocs+0x158>
 20055e0:	2105883a 	add	r2,r4,r4
 20055e4:	1485883a 	add	r2,r2,r18
 20055e8:	11400017 	ldw	r5,0(r2)
 20055ec:	e009883a 	mov	r4,fp
 20055f0:	303ee83a 	callr	r6
 20055f4:	88800117 	ldw	r2,4(r17)
 20055f8:	98bfc81e 	bne	r19,r2,200551c <__call_exitprocs+0x64>
 20055fc:	b8800017 	ldw	r2,0(r23)
 2005600:	147fd526 	beq	r2,r17,2005558 <__call_exitprocs+0xa0>
 2005604:	003fc506 	br	200551c <__call_exitprocs+0x64>
 2005608:	8c000115 	stw	r16,4(r17)
 200560c:	003fea06 	br	20055b8 <__call_exitprocs+0x100>
 2005610:	2105883a 	add	r2,r4,r4
 2005614:	1485883a 	add	r2,r2,r18
 2005618:	11000017 	ldw	r4,0(r2)
 200561c:	303ee83a 	callr	r6
 2005620:	003ff406 	br	20055f4 <__call_exitprocs+0x13c>
 2005624:	303ee83a 	callr	r6
 2005628:	003ff206 	br	20055f4 <__call_exitprocs+0x13c>
 200562c:	88800117 	ldw	r2,4(r17)
 2005630:	1000081e 	bne	r2,zero,2005654 <__call_exitprocs+0x19c>
 2005634:	89000017 	ldw	r4,0(r17)
 2005638:	20000726 	beq	r4,zero,2005658 <__call_exitprocs+0x1a0>
 200563c:	b9000015 	stw	r4,0(r23)
 2005640:	8809883a 	mov	r4,r17
 2005644:	00000000 	call	0 <__reset-0x2000000>
 2005648:	bc400017 	ldw	r17,0(r23)
 200564c:	883fb71e 	bne	r17,zero,200552c <__call_exitprocs+0x74>
 2005650:	003fc506 	br	2005568 <__call_exitprocs+0xb0>
 2005654:	89000017 	ldw	r4,0(r17)
 2005658:	882f883a 	mov	r23,r17
 200565c:	2023883a 	mov	r17,r4
 2005660:	883fb21e 	bne	r17,zero,200552c <__call_exitprocs+0x74>
 2005664:	003fc006 	br	2005568 <__call_exitprocs+0xb0>

02005668 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 2005668:	defffd04 	addi	sp,sp,-12
 200566c:	df000215 	stw	fp,8(sp)
 2005670:	df000204 	addi	fp,sp,8
 2005674:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 2005678:	e0bfff17 	ldw	r2,-4(fp)
 200567c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2005680:	e0bffe17 	ldw	r2,-8(fp)
 2005684:	1005003a 	cmpeq	r2,r2,zero
 2005688:	1000021e 	bne	r2,zero,2005694 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 200568c:	002af070 	cmpltui	zero,zero,43969
 2005690:	00000106 	br	2005698 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 2005694:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 2005698:	e037883a 	mov	sp,fp
 200569c:	df000017 	ldw	fp,0(sp)
 20056a0:	dec00104 	addi	sp,sp,4
 20056a4:	f800283a 	ret

020056a8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 20056a8:	defffd04 	addi	sp,sp,-12
 20056ac:	dfc00215 	stw	ra,8(sp)
 20056b0:	df000115 	stw	fp,4(sp)
 20056b4:	df000104 	addi	fp,sp,4
 20056b8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 20056bc:	e13fff17 	ldw	r4,-4(fp)
 20056c0:	20056680 	call	2005668 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 20056c4:	003fff06 	br	20056c4 <_exit+0x1c>
 20056c8:	020054b4 	movhi	r8,338
